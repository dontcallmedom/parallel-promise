{
  "spec": {
    "title": "Mathematical Markup Language (MathML) Version 4.0",
    "url": "https://w3c.github.io/mathml/"
  },
  "algorithms": [
    {
      "html": "The following algorithm specifies the height and depth of vertically stretched characters:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <code>maxheight</code> and <code>maxdepth</code> be the maximum height and depth of the\n     <em>non</em>-stretchy siblings within the same <code class=\"element\">mrow</code> or <code class=\"element\">mtr</code>.\n     Let axis be the height of the math axis above the baseline.</p>\n \n     <p>Note that even if a <code class=\"attribute\">minsize</code> or <code class=\"attribute\">maxsize</code> value is set on a stretchy operator,\n     it is <em>not</em> used in the initial calculation of the maximum height and depth of an <code class=\"element\">mrow</code>.</p>"
        },
        {
          "html": "<p>\n      If <code class=\"attribute\">symmetric</code>=<code class=\"attributevalue\">true</code>, then the computed height\n      and depth of the stretchy operator are:\n     </p>\n \n      <div class=\"example algorithm\">\n       <pre aria-busy=\"false\"><code class=\"hljs\">height=max(maxheight-axis, maxdepth+axis) + axis\ndepth =max(maxheight-axis, maxdepth+axis) - axis</code></pre>\n      </div>\n      <p>Otherwise the height and depth are:</p>\n \n      <div class=\"example algorithm\">\n       <pre aria-busy=\"false\"><code class=\"hljs abnf\"><span class=\"hljs-attribute\">height</span>= maxheight\n<span class=\"hljs-attribute\">depth</span> = maxdepth</code></pre>\n      </div>"
        },
        {
          "html": "<p>\n      If the total size = height+depth is less than minsize\n      or greater than maxsize, increase or decrease both\n      height and depth proportionately so that the effective\n      size meets the constraint.\n     </p>"
        }
      ]
    },
    {
      "html": "A simple algorithm by which a MathML renderer can perform the\n alignment specified in this section is given here. Since the alignment\n specification is deterministic (except for the definition of the left\n and right edges of a character), any correct MathML alignment\n algorithm will have the same behavior as this one. Each\n <code class=\"element\">mtable</code> column (alignment scope) can be treated\n independently; the algorithm given here applies to one\n <code class=\"element\">mtable</code> column, and takes into account the\n alignment elements and the <code class=\"attribute\">columnalign</code> attribute described\n under <code class=\"element\">mtable</code> (<a href=\"https://w3c.github.io/mathml/#presm_mtable\" class=\"sec-ref\"><bdi class=\"secno\">3.5.1 </bdi>Table or Matrix\n   <span><code class=\"defn starttag\">&lt;mtable&gt;</code></span></a>).\n In an RTL context, switch left and right edges in the algorithm.",
      "rationale": "for",
      "steps": [
        {
          "html": "A rendering is computed for the contents of each table cell\n    in the column, using zero width for all\n    <code class=\"element\">maligngroup</code> and <code class=\"element\">malignmark</code>\n    elements. The final rendering will be identical except for horizontal\n    shifts applied to each alignment group and/or table cell."
        },
        {
          "html": "For each alignment group, the horizontal positions of the left\n    edge, alignment point (if specified by <code class=\"element\">malignmark</code>, otherwise the left edge),\n    and right edge are noted, allowing the width of\n    the group on each side of the alignment point (left and right) to be\n    determined. The sum of these two <q>side-widths</q>, i.e. the sum of the\n    widths to the left and right of the alignment point, will equal the\n    width of the alignment group."
        },
        {
          "html": "Each column of alignment groups is\n    scanned. The <i class=\"var\">i</i>th scan covers the <i class=\"var\">i</i>th\n    alignment group in each table cell containing any alignment\n    groups. Table cells with no alignment groups, or with fewer than\n    <i class=\"var\">i</i> alignment groups, are ignored. Each scan computes two\n    maximums over the alignment groups scanned: the maximum width to the\n    left of the alignment point, and the maximum width to the right of the\n    alignment point, of any alignment group scanned."
        },
        {
          "html": "The sum of all the maximum widths computed (two for each column of\n    alignment groups) gives one total width, which will be the width of\n    each table cell containing alignment groups. Call the maximum number\n    of alignment groups in one cell <i class=\"var\">n</i>; each such cell\n    is divided into 2<i class=\"var\">n</i> horizontally adjacent sections, called\n    L(<i class=\"var\">i</i>) and R(<i class=\"var\">i</i>) for <i class=\"var\">i</i> from 1 to\n    <i class=\"var\">n</i>, using the 2<i class=\"var\">n</i> maximum side-widths computed\n    above; for each <i class=\"var\">i</i>, the width of all sections called\n    L(<i class=\"var\">i</i>) is the maximum width of any cell's <i class=\"var\">i</i>th\n    alignment group to the left of its alignment point, and the width of\n    all sections called R(<i class=\"var\">i</i>) is the maximum width of any\n    cell's <i class=\"var\">i</i>th alignment group to the right of its alignment\n    point."
        },
        {
          "html": "Each alignment group is then shifted horizontally as a block\n    to <span>a</span> unique position that places: in the section called L(<i class=\"var\">i</i>) that part\n    of the <i class=\"var\">i</i>th group to the left of its alignment point;\n    in the section called R(<i class=\"var\">i</i>) that part of the <i class=\"var\">i</i>th group\n    to the right of its alignment point. This results in the\n    alignment point of each <i class=\"var\">i</i>th group being on the boundary\n    between adjacent sections L(<i class=\"var\">i</i>) and R(<i class=\"var\">i</i>), so\n    that all alignment points of <i class=\"var\">i</i>th groups have the same\n    horizontal position."
        }
      ]
    },
    {
      "rationale": "if",
      "steps": [
        {
          "html": "If an <code class=\"attribute\">intent</code>\n     attribute does not match the grammar <a href=\"https://w3c.github.io/mathml/#mixing_intent_grammar\" class=\"sec-ref\"><bdi class=\"secno\">5.1 </bdi>The Grammar for <code class=\"attribue\">intent</code></a>,\n     then the processor should act as if the attribute were not\n     present.\n     Typically this will result in a suitable fallback text being\n     generated from the MathML element and its descendents. Note that\n     just the erroneous attribute is ignored, other <code class=\"attribute\">intent</code> attributes in the MathML\n     expression should be used."
        },
        {
          "html": "If a <code>reference</code> such as <code>$x</code> does not correspond to an <code class=\"attribute\">arg</code> attribute with value <code>x</code> on a\n     descendent element, the processor should act as if the reference\n     were replaced by the literal <code>_dollar_x</code>."
        }
      ]
    },
    {
      "html": "An application that transfers MathML markup <em class=\"rfc2119\">SHOULD</em> adhere to the following\n   conventions:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>An application that supports pure presentation markup and/or pure\n     content markup <em class=\"rfc2119\">SHOULD</em> offer as many of these flavors as it has available.\n     </p>"
        },
        {
          "html": "<p>An application that only exports one MathML flavor <em class=\"rfc2119\">SHOULD</em> name it\n     <code>MathML</code> if it is unable to determine a more specific flavor.\n     </p>"
        },
        {
          "html": "<p>\n      If an application is able to determine a more specific flavor, it <em class=\"rfc2119\">SHOULD</em>\n      offer both the generic and specific transfer flavors, but it <em class=\"rfc2119\">SHOULD</em> only\n      deliver the specific flavor if it knows that the recipient supports it.\n      For an HTTP GET transfer, for example, the specific transfer types for\n      content and presentation markup should only be returned if they are\n      included in the HTTP <code>Accept</code> header sent by the client.\n     </p>"
        },
        {
          "html": "<p>\n      An application that exports the two specific transfer flavors <em class=\"rfc2119\">SHOULD</em>\n      export both the content and presentation transfer flavors, as well as\n      the generic flavor, which <em class=\"rfc2119\">SHOULD</em> combine the other two flavors using\n      a top-level MathML <code class=\"element\">semantics</code> element\n     (see <a href=\"https://w3c.github.io/mathml/#mixing_top_level\" class=\"sec-ref\"><bdi class=\"secno\">6.9.1 </bdi>Top-level Parallel Markup</a>).</p>"
        },
        {
          "html": "<p>\n      When an application exports a MathML fragment whose only child of the\n      root element is a <code class=\"element\">semantics</code> element, it <em class=\"rfc2119\">SHOULD</em> offer, after\n      the above flavors, a transfer flavor for each <code class=\"element\">annotation</code> or\n      <code class=\"element\">annotation-xml</code> element, provided the transfer flavor can be\n      recognized and named based on the <code class=\"attribute\">encoding</code> attribute value,\n      and provided the annotation key is (the default)\n      <a class=\"omsymbol\" href=\"https://openmath.org/cd/mathmlkeys#alternate-representation\">alternate-representation</a>.\n      The transfer content for each annotation should contain the character data\n      in the specified encoding (for an <code class=\"element\">annotation</code> element), or a\n      well-formed XML fragment (for an <code class=\"element\">annotation-xml</code> element), or\n      the data that results by requesting the URL given by the <code class=\"attribute\">src</code>\n     attribute (for an annotation reference).</p>"
        },
        {
          "html": "<p>As a final fallback, an application <em class=\"rfc2119\">MAY</em> export a version of\n     the data in a plain-text flavor (such as <code>text/plain</code>,\n     <code>CF_UNICODETEXT</code>, <code>UnicodeText</code>, or\n     <code>NSStringPboardType</code>).  When an application has multiple\n     versions of an expression available, it may choose the version to\n     export as text at its discretion.  Since some older MathML processors\n     expect MathML instances transferred as plain text to begin with a\n     <code class=\"element\">math</code> element, the text version <em class=\"rfc2119\">SHOULD</em> generally omit the XML\n     declaration, DOCTYPE declaration, and other XML prolog material that\n     would appear before the <code class=\"element\">math</code> element.  The Unicode\n     text version of the data <em class=\"rfc2119\">SHOULD</em> always be the last flavor exported,\n     following the principle that exported flavors should be ordered with\n     the most specific flavor first and the least specific flavor last.\n     </p>"
        }
      ]
    },
    {
      "html": "An application that needs to persist private data within a MathML\n  expression should generally attempt to do so without altering the\n  underlying content model, even in situations where it is feasible to\n  do so.  To support this requirement<span>, regardless of what may be allowed\n  by the content model of a particular compound document format</span>, MathML\n  permits the <span>storage</span>\n  of private data via the following strategies:",
      "rationale": "for",
      "steps": [
        {
          "html": "<p><span>In a format that permits the use of XML Namespaces,\n    </span>for small amounts of data, attributes from other namespaces\n    are allowed on all MathML elements.</p>"
        },
        {
          "html": "<p>For larger amounts of data, applications may use the\n    <code class=\"element\">semantics</code> element, as described in\n    <a href=\"https://w3c.github.io/mathml/#mixing\" class=\"sec-ref\"><bdi class=\"secno\">6. </bdi>Annotating MathML: semantics</a>.</p>"
        },
        {
          "html": "<p>For authoring tools and other applications that need to\n    associate particular actions with presentation MathML subtrees,\n    e.g. to mark an incomplete expression to be filled in by an author,\n    the <code class=\"element\">maction</code> element may be used, as described in\n    <a href=\"https://w3c.github.io/mathml/#presm_maction\" class=\"sec-ref\"><bdi class=\"secno\">3.7.1 </bdi>Bind Action to Sub-Expression</a>.</p>"
        }
      ]
    },
    {
      "html": "To transform an arbitrary content MathML expression into\n   Strict Content MathML, apply each of the following rules in turn\n   to the input expression until all instances of the target\n   constructs have been eliminated:",
      "rationale": "apply",
      "steps": [
        {
          "html": "<p><em>Rewrite non-strict <code class=\"element\">bind</code> and eliminate deprecated elements</em>:\n     Change the outer <code class=\"element\">bind</code> tags\n     in binding expressions to <code class=\"element\">apply</code> if they have qualifiers or multiple\n     children. This simplifies the algorithm by allowing the subsequent rules to be applied\n     to non-strict binding expressions without case distinction. Note\n     that the <span>later</span>\n     rules will change the <code class=\"element\">apply</code> elements introduced in this step back to\n     <code class=\"element\">bind</code> elements.</p>"
        },
        {
          "html": "<p><em>Apply special case rules for idiomatic uses of qualifiers</em>:\n     </p>\n     <ol>\n\n      <li>\n       <p>Rewrite derivatives with rules <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-diff\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-diff-1\">Rewrite: diff</a>, <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-nthdiff\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-nthdiff-1\">Rewrite: nthdiff</a>,\n       and <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-partialdiffdegree\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-partialdiffdegree-1\">Rewrite: partialdiffdegree</a>\n       to explicate the binding status of the variables involved.\n       </p>\n      </li>\n\n      <li>\n       <p>Rewrite integrals with the rules <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-int\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-int-1\">Rewrite: int</a><span>,  <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-defint\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-defint-1\">Rewrite: defint</a></span>\n       and <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-defint-limits\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-defint-limits-1\">Rewrite: defint limits</a> to disambiguate the status\n       of bound and free variables and of the orientation of the range of integration if\n       it is given as a <code class=\"element\">lowlimit</code>/<code class=\"element\">uplimit</code> pair.\n       </p>\n      </li>\n\n      <li>\n       <p>Rewrite limits as described in <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-tendsto\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-tendsto-1\">Rewrite: tendsto</a> and <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-limits-condition\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-limits-condition-1\">Rewrite: limits condition</a>.</p>\n      </li>\n\n      <li>\n       <p>Rewrite sums and products as described in\n       <a href=\"https://w3c.github.io/mathml/#contm_sum_sec\" class=\"sec-ref\"><bdi class=\"secno\">4.3.5.2 </bdi>N-ary Sum <span><code class=\"defn emptytag\">&lt;sum/&gt;</code></span></a> and <a href=\"https://w3c.github.io/mathml/#contm_product_sec\" class=\"sec-ref\"><bdi class=\"secno\">4.3.5.3 </bdi>N-ary Product <span><code class=\"defn emptytag\">&lt;product/&gt;</code></span></a>.</p>\n      </li>\n\n      <li>\n       <p>Rewrite roots as described in <a href=\"https://w3c.github.io/mathml/#contm_p2s_root\" class=\"sec-ref\"><bdi class=\"secno\">F.2.5 </bdi>Roots</a>.</p>\n      </li>\n\n      <li>\n       <p>Rewrite logarithms as described in <a href=\"https://w3c.github.io/mathml/#contm_p2s_log\" class=\"sec-ref\"><bdi class=\"secno\">F.2.6 </bdi>Logarithms</a>.</p>\n      </li>\n\n      <li>\n       <p>Rewrite moments as described in <a href=\"https://w3c.github.io/mathml/#contm_p2s_mom\" class=\"sec-ref\"><bdi class=\"secno\">F.2.7 </bdi>Moments</a>.</p>\n      </li>\n     </ol>",
          "ignored": [
            "Rewrite derivatives with rules Rewrite: diff, Rewrite: nthdiff, and Rewrite: partialdiffdegree to explicate the binding status of the variables involved. Rewrite integrals with the rules Rewrite: int, Rewrite: defint and Rewrite: defint limits to disambiguate the status of bound and free variables and of the orientation of the range of integration if it is given as a lowlimit/uplimit pair. Rewrite limits as described in Rewrite: tendsto and Rewrite: limits condition. Rewrite sums and products as described in 4.3.5.2 N-ary Sum <sum/> and 4.3.5.3 N-ary Product <product/>. Rewrite roots as described in F.2.5 Roots. Rewrite logarithms as described in F.2.6 Logarithms. Rewrite moments as described in F.2.7 Moments."
          ]
        },
        {
          "html": "<p><em>Rewrite Qualifiers to <code class=\"element\">domainofapplication</code></em>:\n     These rules rewrite all <code class=\"element\">apply</code> constructions using <code class=\"element\">bvar</code> and\n     qualifiers to those using only the general <code class=\"element\">domainofapplication</code> qualifier.\n     </p>\n     <ol>\n\n      <li>\n       <p><em>Intervals</em>: Rewrite qualifiers given as <code class=\"element\">interval</code> and\n       <code class=\"element\">lowlimit</code>/<code class=\"element\">uplimit</code> to intervals of integers via\n       <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-interval-qualifier\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-interval-qualifier-1\">Rewrite: interval qualifier</a>.</p>\n      </li>\n\n      <li>\n       <p><em>Multiple <code class=\"element\">condition</code>s</em>: Rewrite multiple <code class=\"element\">condition</code>\n       qualifiers to a single one by taking their conjunction. The resulting compound\n       <code class=\"element\">condition</code> is then rewritten to <code class=\"element\">domainofapplication</code> according\n       to rule <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-condition\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-condition-1\">Rewrite: condition</a>.</p>\n      </li>\n\n      <li>\n       <p><em>Multiple <code class=\"element\">domainofapplication</code>s</em>: Rewrite multiple\n       <code class=\"element\">domainofapplication</code> qualifiers to a single one by taking the\n       intersection of the specified domains.</p>\n      </li>\n     </ol>",
          "ignored": [
            "Intervals: Rewrite qualifiers given as interval and lowlimit/uplimit to intervals of integers via Rewrite: interval qualifier. Multiple conditions: Rewrite multiple condition qualifiers to a single one by taking their conjunction. The resulting compound condition is then rewritten to domainofapplication according to rule Rewrite: condition. Multiple domainofapplications: Rewrite multiple domainofapplication qualifiers to a single one by taking the intersection of the specified domains."
          ]
        },
        {
          "html": "<p><em>Normalize Container Markup</em>:\n     </p>\n     <ol>\n\n      <li>\n       <p>Rewrite sets and lists by the rule\n       <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-n-ary-setlist-domainofapplication\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-n-ary-setlist-domainofapplication-1\">Rewrite: n-ary setlist domainofapplication</a>.</p>\n      </li>\n\n      <li id=\"contm_p2s_step_vector\">\n       <p>Rewrite interval, vectors, matrices, and matrix rows\n       as described in <a href=\"https://w3c.github.io/mathml/#contm_p2s_intv\" class=\"sec-ref\"><bdi class=\"secno\">F.3.1 </bdi>Intervals</a>, <a href=\"https://w3c.github.io/mathml/#contm_nary_construct_matrix\" class=\"sec-ref\"><bdi class=\"secno\">4.3.5.8 </bdi>N-ary Matrix Constructors:\n       <span><code class=\"defn emptytag\">&lt;vector/&gt;</code></span>,\n       <span><code class=\"defn emptytag\">&lt;matrix/&gt;</code></span>,\n       <span><code class=\"defn emptytag\">&lt;matrixrow/&gt;</code></span></a>. <span>Note any qualifiers will have been rewritten to <code class=\"element\">domainofapplication</code> and will be further rewritten in Step 6.</span></p>\n      </li>\n\n      <li>\n       <p>Rewrite lambda expressions by the rules <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-lambda\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-lambda-1\">Rewrite: lambda</a>\n       and <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-lambda-domainofapplication\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-lambda-domainofapplication-1\">Rewrite: lambda domainofapplication</a>.</p>\n      </li>\n\n      <li>\n       <p>Rewrite piecewise functions as described in <a href=\"https://w3c.github.io/mathml/#contm_piecewise_sec\" class=\"sec-ref\"><bdi class=\"secno\">4.3.10.5 </bdi>Piecewise declaration <span><code class=\"defn starttag\">&lt;piecewise&gt;</code></span>, <span><code class=\"defn starttag\">&lt;piece&gt;</code></span>, <span><code class=\"defn starttag\">&lt;otherwise&gt;</code></span></a>.</p>\n      </li>\n     </ol>",
          "ignored": [
            "Rewrite sets and lists by the rule Rewrite: n-ary setlist domainofapplication. Rewrite interval, vectors, matrices, and matrix rows as described in F.3.1 Intervals, 4.3.5.8 N-ary Matrix Constructors: <vector/>, <matrix/>, <matrixrow/>. Note any qualifiers will have been rewritten to domainofapplication and will be further rewritten in Step 6. Rewrite lambda expressions by the rules Rewrite: lambda and Rewrite: lambda domainofapplication. Rewrite piecewise functions as described in 4.3.10.5 Piecewise declaration <piecewise>, <piece>, <otherwise>."
          ]
        },
        {
          "html": "<p><em>Apply Special Case Rules for Operators using <code class=\"element\">domainofapplication</code> Qualifiers</em>:\n     This step deals with the special cases for the operators introduced in\n     <a href=\"https://w3c.github.io/mathml/#contm_structure_extended\" class=\"sec-ref\"><bdi class=\"secno\">4.3 </bdi>Content MathML for Specific Structures</a>. There are different classes of special cases to be taken into account:\n     </p>\n     <ol>\n\n      <li>\n       <p>Rewrite <code class=\"element\">min</code>, <code class=\"element\">max</code>, <code class=\"element\">mean</code> and similar n-ary/unary operators\n       by the rules <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-n-ary-unary-set\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-n-ary-unary-set-1\">Rewrite: n-ary unary set</a>, <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-n-ary-unary-domainofapplication\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-n-ary-unary-domainofapplication-1\">Rewrite: n-ary unary domainofapplication</a>\n       and <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-n-ary-unary-single\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-n-ary-unary-single-1\">Rewrite: n-ary unary single</a>.\n       </p>\n      </li>\n\n      <li>\n       <p>Rewrite the quantifiers <code class=\"element\">forall</code> and <code class=\"element\">exists</code> used with <code class=\"element\">domainofapplication</code>\n       to expressions using implication and conjunction by the rule <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-quantifier\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-quantifier-1\">Rewrite: quantifier</a>.\n       </p>\n      </li>\n\n      <li>\n       <p>Rewrite integrals used with a <code class=\"element\">domainofapplication</code> element (with or without a <code class=\"element\">bvar</code>)\n       according to the rules <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-int\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-int-2\">Rewrite: int</a><span> and\n       <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-defint\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-defint-2\">Rewrite: defint</a></span>.\n       </p>\n      </li>\n\n      <li>\n       <p>Rewrite sums and products used with a <code class=\"element\">domainofapplication</code> element\n       (with or without a <code class=\"element\">bvar</code>) as described in\n       <a href=\"https://w3c.github.io/mathml/#contm_sum_sec\" class=\"sec-ref\"><bdi class=\"secno\">4.3.5.2 </bdi>N-ary Sum <span><code class=\"defn emptytag\">&lt;sum/&gt;</code></span></a> and <a href=\"https://w3c.github.io/mathml/#contm_product_sec\" class=\"sec-ref\"><bdi class=\"secno\">4.3.5.3 </bdi>N-ary Product <span><code class=\"defn emptytag\">&lt;product/&gt;</code></span></a>.</p>\n      </li>\n     </ol>",
          "ignored": [
            "Rewrite min, max, mean and similar n-ary/unary operators by the rules Rewrite: n-ary unary set, Rewrite: n-ary unary domainofapplication and Rewrite: n-ary unary single. Rewrite the quantifiers forall and exists used with domainofapplication to expressions using implication and conjunction by the rule Rewrite: quantifier. Rewrite integrals used with a domainofapplication element (with or without a bvar) according to the rules Rewrite: int and Rewrite: defint. Rewrite sums and products used with a domainofapplication element (with or without a bvar) as described in 4.3.5.2 N-ary Sum <sum/> and 4.3.5.3 N-ary Product <product/>."
          ]
        },
        {
          "html": "<p><em>Eliminate <code class=\"element\">domainofapplication</code></em>: At this stage, any\n     <code class=\"element\">apply</code> has at most one <code class=\"element\">domainofapplication</code> child and special cases have been addressed. As\n     <code class=\"element\">domainofapplication</code> is not Strict Content MathML, it is rewritten\n     </p>\n     <ol>\n\n      <li>\n       <p>into an application of a restricted function via the rule\n       <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-restriction\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-restriction-1\">Rewrite: restriction</a> if the <code class=\"element\">apply</code> does not contain\n       a <code class=\"element\">bvar</code> child.</p>\n      </li>\n\n      <li>\n       <p>into an application of the <a class=\"omsymbol\" href=\"https://openmath.org/cd/fns2#predicate_on_list\">predicate_on_list</a> symbol via the rules\n       <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-n-ary-relations\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-n-ary-relations-1\">Rewrite: n-ary relations</a> and <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-n-ary-relations-bvar\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-n-ary-relations-bvar-1\">Rewrite: n-ary relations bvar</a>\n       if used with a relation.</p>\n      </li>\n\n      <li>\n       <p>into a construction with the <a class=\"omsymbol\" href=\"https://openmath.org/cd/fns2#apply_to_list\">apply_to_list</a> symbol\n       via the general rule <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-n-ary-domainofapplication\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-n-ary-domainofapplication-1\">Rewrite: n-ary domainofapplication</a> for\n       general n-ary operators.\n       </p>\n      </li>\n\n      <li>\n       <p>into a construction using the <a class=\"omsymbol\" href=\"https://openmath.org/cd/set1#suchthat\">suchthat</a> symbol\n       from the <a class=\"omcd\" href=\"https://openmath.org/cd/set1\">set1</a> content dictionary in an <code class=\"element\">apply</code> with bound\n       variables via the <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-apply-bvar-domainofapplication\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-apply-bvar-domainofapplication-1\">Rewrite: apply bvar domainofapplication</a> rule.</p>\n      </li>\n     </ol>",
          "ignored": [
            "into an application of a restricted function via the rule Rewrite: restriction if the apply does not contain a bvar child. into an application of the predicate_on_list symbol via the rules Rewrite: n-ary relations and Rewrite: n-ary relations bvar if used with a relation. into a construction with the apply_to_list symbol via the general rule Rewrite: n-ary domainofapplication for general n-ary operators. into a construction using the suchthat symbol from the set1 content dictionary in an apply with bound variables via the Rewrite: apply bvar domainofapplication rule."
          ]
        },
        {
          "html": "<p><em>Rewrite non-strict token elements</em>:\n     </p>\n     <ol>\n\n      <li>\n       <p>Rewrite numbers represented as <code class=\"element\">cn</code> elements where the <code class=\"attribute\">type</code>\n       attribute is one of <code class=\"attributevalue\">e-notation</code>, <code class=\"attributevalue\">rational</code>,\n       <code class=\"attributevalue\">complex-cartesian</code>, <code class=\"attributevalue\">complex-polar</code>,\n       <code class=\"attributevalue\">constant</code> as strict <code class=\"element\">cn</code> via rules\n       <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-cn-sep\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-cn-sep-1\">Rewrite: cn sep</a>, <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-cn-based_integer\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-cn-based_integer-1\">Rewrite: cn based_integer</a>\n       and <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-cn-constant\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-cn-constant-1\">Rewrite: cn constant</a>.</p>\n      </li>\n\n      <li>\n       <p>Rewrite any <code class=\"element\">ci</code>, <code class=\"element\">csymbol</code> or <code class=\"element\">cn</code> containing\n       presentation MathML to <code class=\"element\">semantics</code> elements with rules\n       <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-cn-presentation-mathml\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-cn-presentation-mathml-1\">Rewrite: cn presentation mathml</a> and <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-ci-presentation-mathml\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-ci-presentation-mathml-1\">Rewrite: ci presentation mathml</a> and\n       the analogous rule for <code class=\"element\">csymbol</code>.</p>\n      </li>\n     </ol>",
          "ignored": [
            "Rewrite numbers represented as cn elements where the type attribute is one of e-notation, rational, complex-cartesian, complex-polar, constant as strict cn via rules Rewrite: cn sep, Rewrite: cn based_integer and Rewrite: cn constant. Rewrite any ci, csymbol or cn containing presentation MathML to semantics elements with rules Rewrite: cn presentation mathml and Rewrite: ci presentation mathml and the analogous rule for csymbol."
          ]
        },
        {
          "html": "<p><em>Rewrite operators</em>: Rewrite any remaining operator defined in <a href=\"https://w3c.github.io/mathml/#contm_structure_extended\" class=\"sec-ref\"><bdi class=\"secno\">4.3 </bdi>Content MathML for Specific Structures</a>\n     to a <code class=\"element\">csymbol</code> referencing the symbol identified in the syntax table by the rule\n     <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-element\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-element-3\">Rewrite: element</a>. <span>As noted in the descriptions of each\n     operator element, some require special case rules to determine the proper choice\n     of symbol.\n     Some cases of particular note are:</span>\n     </p>\n     <ol>\n\n      <li>\n       <p>The order of the arguments for the\n       <a class=\"intref\" href=\"https://w3c.github.io/mathml/#contm_selector\" id=\"ref-for-contm_selector-2\"><code class=\"element\">selector</code></a> operator must be\n       rewritten, and the symbol depends on the type of the arguments.</p>\n      </li>\n\n      <li>\n       <p>The choice of symbol for the <code class=\"element\">minus</code>\n       operator depends on the number of the arguments, <a class=\"intref\" href=\"https://w3c.github.io/mathml/#contm_binary_arith\"><code class=\"element\">minus</code></a> or <a class=\"intref\" href=\"https://w3c.github.io/mathml/#contm_unary_arith\"><code class=\"element\">minus</code></a>.</p>\n      </li>\n\n      <li>\n       <p>The choice of symbol for some set operators depends on the values of\n       the <code class=\"attribute\">type</code> of the arguments.</p>\n      </li>\n\n      <li>\n       <p>The choice of symbol for some statistical operators depends on the values of\n       the types of the arguments.</p>\n      </li>\n     </ol>",
          "ignored": [
            "The order of the arguments for the selector operator must be rewritten, and the symbol depends on the type of the arguments. The choice of symbol for the minus operator depends on the number of the arguments, minus or minus. The choice of symbol for some set operators depends on the values of the type of the arguments. The choice of symbol for some statistical operators depends on the values of the types of the arguments."
          ]
        },
        {
          "html": "<p><em>Rewrite non-strict attributes</em>:\n     </p>\n     <ol>\n\n      <li>\n       <p><em>Rewrite the <code class=\"attribute\">type</code> attribute</em>:\n       <span>At this point, all elements\n       that accept the <code class=\"attribute\">type</code>, other than <code class=\"element\">ci</code> and <code class=\"element\">csymbol</code>, should have been\n       rewritten into Strict Content Markup equivalents without <code class=\"attribute\">type</code> attributes,\n       where type information is reflected in the choice of operator symbol.</span> Now rewrite remaining\n       <code class=\"element\">ci</code> <span>and <code class=\"element\">csymbol</code></span> elements with a <code class=\"attribute\">type</code> attribute to a\n       strict expression with <code class=\"element\">semantics</code> according to rule<span>s</span>\n       <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-ci-type-annotation\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-ci-type-annotation-1\">Rewrite: ci type annotation</a><span> and <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-csymbol-type-annotation\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-csymbol-type-annotation-1\">Rewrite: csymbol type annotation</a></span>.  </p>\n      </li>\n\n      <li>\n       <p><em>Rewrite <code class=\"attribute\">definitionURL</code> and <code class=\"attribute\">encoding</code> attributes</em>:\n       If the <code class=\"attribute\">definitionURL</code> and <code class=\"attribute\">encoding</code> attributes on a\n       <code class=\"element\">csymbol</code> element can be interpreted as a reference to a\n       content dictionary (see <a href=\"https://w3c.github.io/mathml/#contm_csymbol_extended\" class=\"sec-ref\"><bdi class=\"secno\">4.2.3.2 </bdi>Non-Strict uses of <code class=\"starttag\">&lt;csymbol&gt;</code></a> for details), then\n       rewrite to reference the content dictionary by the <code class=\"attribute\">cd</code> attribute instead.\n       </p>\n      </li>\n\n      <li>\n       <p><em>Rewrite attributes</em>: Rewrite any element with attributes that are\n       not allowed in strict markup to a <code class=\"element\">semantics</code> construction with\n       the element without these attributes as the first child and the attributes in\n       <code class=\"element\">annotation</code> elements by rule <a href=\"https://w3c.github.io/mathml/#dfn-rewrite-attributes\" class=\"internalDFN\" data-link-type=\"dfn\" id=\"ref-for-dfn-rewrite-attributes-1\">Rewrite: attributes</a>.</p>\n      </li>\n     </ol>",
          "ignored": [
            "Rewrite the type attribute: At this point, all elements that accept the type, other than ci and csymbol, should have been rewritten into Strict Content Markup equivalents without type attributes, where type information is reflected in the choice of operator symbol. Now rewrite remaining ci and csymbol elements with a type attribute to a strict expression with semantics according to rules Rewrite: ci type annotation and Rewrite: csymbol type annotation. Rewrite definitionURL and encoding attributes: If the definitionURL and encoding attributes on a csymbol element can be interpreted as a reference to a content dictionary (see 4.2.3.2 Non-Strict uses of <csymbol> for details), then rewrite to reference the content dictionary by the cd attribute instead. Rewrite attributes: Rewrite any element with attributes that are not allowed in strict markup to a semantics construction with the element without these attributes as the first child and the attributes in annotation elements by rule Rewrite: attributes."
          ]
        }
      ]
    }
  ]
}
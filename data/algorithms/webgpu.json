{
  "spec": {
    "title": "WebGPU",
    "url": "https://gpuweb.github.io/gpuweb/"
  },
  "algorithms": [
    {
      "html": "If the shader attempts to load data outside of <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#physical-resources\" id=\"ref-for-physical-resources②\">physical resource</a> bounds,\nthe implementation is allowed to:",
      "rationale": "return",
      "steps": [
        {
          "html": "<p>return a value at a different location within the resource bounds</p>"
        },
        {
          "html": "<p>return a value vector of \"(0, 0, 0, X)\" with any \"X\"</p>"
        },
        {
          "html": "<p>partially discard the draw or dispatch call</p>"
        }
      ]
    },
    {
      "name": "create a new WebGPU object",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-create-a-new-webgpu-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a new WebGPU object</dfn>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuobjectbase\" id=\"ref-for-gpuobjectbase①\">GPUObjectBase</a></code> <var>parent</var>,\n    interface <var>T</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpuobjectdescriptorbase\" id=\"ref-for-dictdef-gpuobjectdescriptorbase\">GPUObjectDescriptorBase</a></code> <var>descriptor</var>)\n    (where <var>T</var> extends <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuobjectbase\" id=\"ref-for-gpuobjectbase②\">GPUObjectBase</a></code>), run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline③\">content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>device</var> be <var>parent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>object</var> be a new instance of <var>T</var>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot①\" data-timeline=\"const\">[[device]]</a></code> to <var>device</var>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-label\" id=\"ref-for-dom-gpuobjectbase-label①\" data-timeline=\"content\">label</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectdescriptorbase-label\" id=\"ref-for-dom-gpuobjectdescriptorbase-label\">label</a></code>.</p>"
        },
        {
          "html": "<p>Return <var>object</var>.</p>"
        }
      ]
    },
    {
      "name": "invalidate",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"invalidate|Invalidate|invalidated|invalidates\" id=\"abstract-opdef-invalidate\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">invalidate</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuobjectbase\" id=\"ref-for-gpuobjectbase①①\">GPUObjectBase</a></code> <var>object</var>, run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><var>object</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-valid-slot\" id=\"ref-for-dom-gpuobjectbase-valid-slot④\" data-timeline=\"device\">[[valid]]</a></code> to <code>false</code>.</p>"
        }
      ]
    },
    {
      "name": "expire",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-expire",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"expire|Expire|expires\" id=\"abstract-opdef-expire\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">expire</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuadapter\" id=\"ref-for-gpuadapter④\">GPUAdapter</a></code> <var>adapter</var>, run the\n    following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>adapter</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapter-adapter-slot\" id=\"ref-for-dom-gpuadapter-adapter-slot①\">[[adapter]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-adapter-expired-slot\" id=\"ref-for-dom-adapter-expired-slot①\">[[expired]]</a></code> to <code>true</code></p>"
        }
      ]
    },
    {
      "name": "lose the device",
      "href": "https://gpuweb.github.io/gpuweb/#lose-the-device",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"lose-the-device\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">lose the device</dfn>(<var>device</var>, <var>reason</var>) run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑦\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate①\" data-timeline=\"device\">Invalidate</a> <var>device</var>.</p>"
        },
        {
          "html": "<p>Issue the following steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①①\">content timeline</a> of <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-content-device-slot\" id=\"ref-for-dom-device-content-device-slot\" data-timeline=\"content\">[[content device]]</a></code>:</p>\n      <div data-timeline=\"content\">\n       <ol>\n        <li data-md=\"\">\n         <p>Resolve <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-lost\" id=\"ref-for-dom-gpudevice-lost②\">lost</a></code> with a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpudevicelostinfo\" id=\"ref-for-gpudevicelostinfo\">GPUDeviceLostInfo</a></code> with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevicelostinfo-reason\" id=\"ref-for-dom-gpudevicelostinfo-reason\">reason</a></code> set to <var>reason</var> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevicelostinfo-message\" id=\"ref-for-dom-gpudevicelostinfo-message\">message</a></code> set to an implementation-defined value.</p>\n         \n       </li></ol>\n      </div>",
          "rationale": "resolve",
          "steps": [
            {
              "html": "<p>Resolve <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-lost\" id=\"ref-for-dom-gpudevice-lost②\">lost</a></code> with a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpudevicelostinfo\" id=\"ref-for-gpudevicelostinfo\">GPUDeviceLostInfo</a></code> with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevicelostinfo-reason\" id=\"ref-for-dom-gpudevicelostinfo-reason\">reason</a></code> set to <var>reason</var> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevicelostinfo-message\" id=\"ref-for-dom-gpudevicelostinfo-message\">message</a></code> set to an implementation-defined value.</p>"
            }
          ]
        },
        {
          "html": "<p>Complete any outstanding <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapasync\" id=\"ref-for-dom-gpubuffer-mapasync③\">mapAsync()</a></code> steps.</p>"
        },
        {
          "html": "<p>Complete any outstanding <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuqueue-onsubmittedworkdone\" id=\"ref-for-dom-gpuqueue-onsubmittedworkdone④\">onSubmittedWorkDone()</a></code> steps.</p>"
        }
      ]
    },
    {
      "name": "new adapter info",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-new-adapter-info",
      "html": "To create a <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-new-adapter-info\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">new adapter info</dfn> for a given <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#adapter\" id=\"ref-for-adapter②②\">adapter</a> <var>adapter</var>, run the\n    following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②\">content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>adapterInfo</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuadapterinfo\" id=\"ref-for-gpuadapterinfo⑨\">GPUAdapterInfo</a></code>.</p>"
        },
        {
          "html": "<p>If the vendor is known, set <var>adapterInfo</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapterinfo-vendor\" id=\"ref-for-dom-gpuadapterinfo-vendor①\">vendor</a></code> to the name of <var>adapter</var>’s vendor as a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#normalized-identifier-string\" id=\"ref-for-normalized-identifier-string\" data-timeline=\"content\">normalized identifier string</a>. To preserve privacy, the user\nagent may instead set <var>adapterInfo</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapterinfo-vendor\" id=\"ref-for-dom-gpuadapterinfo-vendor②\">vendor</a></code> to the empty string or a\nreasonable approximation of the vendor as a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#normalized-identifier-string\" id=\"ref-for-normalized-identifier-string①\" data-timeline=\"content\">normalized identifier string</a>.</p>"
        },
        {
          "html": "<p>If |the architecture is known, set <var>adapterInfo</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapterinfo-architecture\" id=\"ref-for-dom-gpuadapterinfo-architecture①\">architecture</a></code> to a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#normalized-identifier-string\" id=\"ref-for-normalized-identifier-string②\" data-timeline=\"content\">normalized identifier string</a> representing the family or class of adapters to which <var>adapter</var> belongs. To preserve privacy, the user agent may instead set <var>adapterInfo</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapterinfo-architecture\" id=\"ref-for-dom-gpuadapterinfo-architecture②\">architecture</a></code> to the empty string or a reasonable\napproximation of the architecture as a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#normalized-identifier-string\" id=\"ref-for-normalized-identifier-string③\" data-timeline=\"content\">normalized identifier string</a>.</p>"
        },
        {
          "html": "<p>If the device is known, set <var>adapterInfo</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapterinfo-device\" id=\"ref-for-dom-gpuadapterinfo-device①\">device</a></code> to a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#normalized-identifier-string\" id=\"ref-for-normalized-identifier-string④\" data-timeline=\"content\">normalized identifier string</a> representing a vendor-specific identifier for <var>adapter</var>.\nTo preserve privacy, the user agent may instead set <var>adapterInfo</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapterinfo-device\" id=\"ref-for-dom-gpuadapterinfo-device②\">device</a></code> to to the empty string or a reasonable approximation of a vendor-specific identifier as a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#normalized-identifier-string\" id=\"ref-for-normalized-identifier-string⑤\" data-timeline=\"content\">normalized identifier string</a>.</p>"
        },
        {
          "html": "<p>If a description is known, set <var>adapterInfo</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapterinfo-description\" id=\"ref-for-dom-gpuadapterinfo-description②\">description</a></code> to a description\nof the <var>adapter</var> as reported by the driver. To preserve privacy, the user agent may\ninstead set <var>adapterInfo</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapterinfo-description\" id=\"ref-for-dom-gpuadapterinfo-description③\">description</a></code> to the empty string or a\nreasonable approximation of a description.</p>"
        },
        {
          "html": "<p>Return <var>adapterInfo</var>.</p>"
        }
      ]
    },
    {
      "name": "queue a global task for GPUDevice",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-queue-a-global-task-for-gpudevice",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-queue-a-global-task-for-gpudevice\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">queue a global task for <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpudevice\" id=\"ref-for-gpudevice①⑤\">GPUDevice</a></code></dfn> <var>device</var>,\n    with a series of steps <var>steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①③\">content timeline</a>:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-global-task\" id=\"ref-for-queue-a-global-task\">Queue a global task</a> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#webgpu-task-source\" id=\"ref-for-webgpu-task-source\">WebGPU task source</a>, with the global object that was used\nto create <var>device</var>, and the steps <var>steps</var>.</p>"
        }
      ]
    },
    {
      "name": "queue an automatic expiry task",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-queue-an-automatic-expiry-task",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-queue-an-automatic-expiry-task\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">queue an automatic expiry task</dfn> with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpudevice\" id=\"ref-for-gpudevice①⑥\">GPUDevice</a></code> <var>device</var> and a series of steps <var>steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①④\">content timeline</a>:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-global-task\" id=\"ref-for-queue-a-global-task①\">Queue a global task</a> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#automatic-expiry-task-source\" id=\"ref-for-automatic-expiry-task-source①\">automatic expiry task source</a>, with the global object that\nwas used to create <var>device</var>, and the steps <var>steps</var>.</p>"
        }
      ]
    },
    {
      "name": "to WGSL type",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-to-wgsl-type",
      "html": "<span class=\"marker\">Note:</span> This <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror③\">TypeError</a></code> is generated in the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑨\">device timeline</a> and never surfaced to JavaScript.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert②\">Assert</a> <var>idlValue</var> is a finite value, since it is not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-unrestricted-double\" id=\"ref-for-idl-unrestricted-double\">unrestricted double</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-unrestricted-float\" id=\"ref-for-idl-unrestricted-float\">unrestricted float</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>v</var> be the ECMAScript Number resulting from <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands\">!</a> converting <var>idlValue</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-idl-to-javascript-value\" id=\"ref-for-dfn-convert-idl-to-javascript-value\">an ECMAScript value</a>.</p>"
        },
        {
          "html": "<dl class=\"switch\">\n       <dt data-md=\"\">If <var>T</var> is <code>bool</code>\n       </dt><dd data-md=\"\">\n        <p>Return the WGSL <code>bool</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①\">!</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value\">an IDL value</a> of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-boolean\" id=\"ref-for-idl-boolean\">boolean</a></code>.</p>\n        \n       </dd><dt data-md=\"\">If <var>T</var> is <code>i32</code>\n       </dt><dd data-md=\"\">\n        <p>Return the WGSL <code>i32</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②\">?</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value①\">an IDL value</a> of type [<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#EnforceRange\" id=\"ref-for-EnforceRange\">EnforceRange</a></code>] <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-long\" id=\"ref-for-idl-long\">long</a></code>.</p>\n       </dd><dt data-md=\"\">If <var>T</var> is <code>u32</code>\n       </dt><dd data-md=\"\">\n        <p>Return the WGSL <code>u32</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③\">?</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value②\">an IDL value</a> of type [<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#EnforceRange\" id=\"ref-for-EnforceRange①\">EnforceRange</a></code>] <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-unsigned-long\" id=\"ref-for-idl-unsigned-long②⑨\">unsigned long</a></code>.</p>\n       </dd><dt data-md=\"\">If <var>T</var> is <code>f32</code>\n       </dt><dd data-md=\"\">\n        <p>Return the WGSL <code>f32</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④\">?</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value③\">an IDL value</a> of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-float\" id=\"ref-for-idl-float③\">float</a></code>.</p>\n       </dd><dt data-md=\"\">If <var>T</var> is <code>f16</code>\n       </dt><dd data-md=\"\">\n        <ol>\n         <li data-md=\"\">\n          <p>Let <var>wgslF32</var> be the WGSL <code>f32</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤\">?</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value④\">an IDL value</a> of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-float\" id=\"ref-for-idl-float④\">float</a></code>.</p>\n         </li><li data-md=\"\">\n          <p>Return <code>f16(<var>wgslF32</var>)</code>, the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑥\">!</a> converting the WGSL <code>f32</code> value\nto <code>f16</code> as defined in <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#floating-point-conversion\" id=\"ref-for-floating-point-conversion\">WGSL floating point conversion</a>.</p>\n        </li></ol>\n        \n      </dd></dl>",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "If T is bool",
                  "steps": [
                    {
                      "html": "<p>Return the WGSL <code>bool</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①\">!</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value\">an IDL value</a> of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-boolean\" id=\"ref-for-idl-boolean\">boolean</a></code>.</p>"
                    }
                  ]
                },
                {
                  "case": "If T is i32",
                  "steps": [
                    {
                      "html": "<p>Return the WGSL <code>i32</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②\">?</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value①\">an IDL value</a> of type [<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#EnforceRange\" id=\"ref-for-EnforceRange\">EnforceRange</a></code>] <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-long\" id=\"ref-for-idl-long\">long</a></code>.</p>"
                    }
                  ]
                },
                {
                  "case": "If T is u32",
                  "steps": [
                    {
                      "html": "<p>Return the WGSL <code>u32</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③\">?</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value②\">an IDL value</a> of type [<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#EnforceRange\" id=\"ref-for-EnforceRange①\">EnforceRange</a></code>] <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-unsigned-long\" id=\"ref-for-idl-unsigned-long②⑨\">unsigned long</a></code>.</p>"
                    }
                  ]
                },
                {
                  "case": "If T is f32",
                  "steps": [
                    {
                      "html": "<p>Return the WGSL <code>f32</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④\">?</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value③\">an IDL value</a> of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-float\" id=\"ref-for-idl-float③\">float</a></code>.</p>"
                    }
                  ]
                },
                {
                  "case": "If T is f16",
                  "steps": [
                    {
                      "html": "<ol>\n         <li data-md=\"\">\n          <p>Let <var>wgslF32</var> be the WGSL <code>f32</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤\">?</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value④\">an IDL value</a> of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-float\" id=\"ref-for-idl-float④\">float</a></code>.</p>\n         </li><li data-md=\"\">\n          <p>Return <code>f16(<var>wgslF32</var>)</code>, the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑥\">!</a> converting the WGSL <code>f32</code> value\nto <code>f16</code> as defined in <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#floating-point-conversion\" id=\"ref-for-floating-point-conversion\">WGSL floating point conversion</a>.</p>\n        </li></ol>",
                      "rationale": "let",
                      "steps": [
                        {
                          "html": "<p>Let <var>wgslF32</var> be the WGSL <code>f32</code> value corresponding to the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤\">?</a> converting <var>v</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value④\">an IDL value</a> of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-float\" id=\"ref-for-idl-float④\">float</a></code>.</p>"
                        },
                        {
                          "html": "<p>Return <code>f16(<var>wgslF32</var>)</code>, the result of <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑥\">!</a> converting the WGSL <code>f32</code> value\nto <code>f16</code> as defined in <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#floating-point-conversion\" id=\"ref-for-floating-point-conversion\">WGSL floating point conversion</a>.</p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "to a texel value of texture format",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-to-a-texel-value-of-texture-format",
      "html": "<span class=\"marker\">Note:</span> This <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror⑤\">TypeError</a></code> is generated in the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline②①\">device timeline</a> and never surfaced to JavaScript.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the components of <var>format</var> (<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert③\">assert</a> they all have the same type) are:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "floating-point types or normalized types",
                  "steps": [
                    {
                      "html": "<p>Let <var>T</var> be <code>f32</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "signed integer types",
                  "steps": [
                    {
                      "html": "<p>Let <var>T</var> be <code>i32</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "unsigned integer types",
                  "steps": [
                    {
                      "html": "<p>Let <var>T</var> be <code>u32</code>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>wgslColor</var> be a WGSL value of type <code>vec4&lt;<var>T</var>&gt;</code>, where the 4\ncomponents are the RGBA channels of <var>color</var>, each <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑦\">?</a> converted <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-to-wgsl-type\" id=\"ref-for-abstract-opdef-to-wgsl-type\" data-timeline=\"device\">to WGSL type</a> <var>T</var>.</p>"
        },
        {
          "html": "<p>Convert <var>wgslColor</var> to <var>format</var> using the same conversion rules as the <a href=\"https://gpuweb.github.io/gpuweb/#output-merging\">§ 23.2.7 Output Merging</a> step, and return the result.</p>"
        }
      ]
    },
    {
      "name": "GPU.requestAdapter",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpu-requestadapter-options-options",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⑤\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var data-timeline=\"content\">contentTimeline</var> be the current <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⑥\">Content timeline</a>.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline②②\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "GPU.requestAdapter",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpu-requestadapter-options-options",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline②③\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>adapter</var> be <code>null</code>.</p>"
        },
        {
          "html": "If the user agent chooses to return an adapter, it should:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>adapter</var> to an <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#adapter\" id=\"ref-for-adapter②④\">adapter</a> chosen according to\nthe rules in <a href=\"https://gpuweb.github.io/gpuweb/#adapter-selection\">§ 4.2.2 Adapter Selection</a> and the criteria in <var>options</var>,\nadhering to <a href=\"https://gpuweb.github.io/gpuweb/#adapter-capability-guarantees\">§ 4.2.1 Adapter Capability Guarantees</a>.</p>\n           <p>The <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#supported-limits\" id=\"ref-for-supported-limits⑤\">supported limits</a> of the adapter must adhere to the requirements\ndefined in <a href=\"https://gpuweb.github.io/gpuweb/#limits\">§ 3.6.2 Limits</a>.</p>"
            },
            {
              "html": "<p>If <var>adapter</var> meets the criteria of a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fallback-adapter\" id=\"ref-for-fallback-adapter②\">fallback adapter</a> set <var>adapter</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-adapter-fallback-slot\" id=\"ref-for-dom-adapter-fallback-slot\">[[fallback]]</a></code> to <code>true</code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Issue the subsequent steps on <var data-timeline=\"content\">contentTimeline</var>.</p>"
        }
      ]
    },
    {
      "name": "GPU.requestAdapter",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpu-requestadapter-options-options",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⑦\">Content timeline</a> steps:",
      "rationale": "if",
      "steps": [
        {
          "html": "If <var>adapter</var> is not <code>null</code>:",
          "rationale": "resolve",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①\">Resolve</a> <var>promise</var> with a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuadapter\" id=\"ref-for-gpuadapter⑨\">GPUAdapter</a></code> encapsulating <var>adapter</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Otherwise, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②\">Resolve</a> <var>promise</var> with <code>null</code>.</p>"
        }
      ]
    },
    {
      "name": "GPU.getPreferredCanvasFormat",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return either <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-rgba8unorm\" id=\"ref-for-dom-gputextureformat-rgba8unorm①\">\"rgba8unorm\"</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-bgra8unorm\" id=\"ref-for-dom-gputextureformat-bgra8unorm①\">\"bgra8unorm\"</a></code>, depending on which format is optimal for\ndisplaying WebGPU canvases on this system.</p>"
        }
      ]
    },
    {
      "name": "GPUAdapter.info",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⑨\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return a <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-new-adapter-info\" id=\"ref-for-abstract-opdef-new-adapter-info\" data-timeline=\"content\">new adapter info</a> for <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapter-adapter-slot\" id=\"ref-for-dom-gpuadapter-adapter-slot④\">[[adapter]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUAdapter.requestDevice",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuadapter-requestdevice-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline②⓪\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var data-timeline=\"content\">contentTimeline</var> be the current <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline②①\">Content timeline</a>.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Let <var>adapter</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuadapter-adapter-slot\" id=\"ref-for-dom-gpuadapter-adapter-slot⑥\">[[adapter]]</a></code>.</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> to the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline②④\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUAdapter.requestDevice",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuadapter-requestdevice-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline②⑤\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline②②\">Content timeline</a> steps:",
          "rationale": "reject",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject\">Reject</a> <var>promise</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror⑥\">TypeError</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline②③\">Content timeline</a> steps:",
          "rationale": "reject",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①\">Reject</a> <var>promise</var> with an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#operationerror\" id=\"ref-for-operationerror\">OperationError</a></code>.</p>"
            }
          ]
        },
        {
          "html": "If <var>adapter</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-expired\" id=\"ref-for-abstract-opdef-expired\" data-timeline=\"device\">expired</a>,\nor the user agent otherwise cannot fulfill the request:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>device</var> be a new <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device\" id=\"ref-for-device①⑤\">device</a>.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#lose-the-device\" id=\"ref-for-lose-the-device③\" data-timeline=\"device\">Lose the device</a>(<var>device</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevicelostreason-unknown\" id=\"ref-for-dom-gpudevicelostreason-unknown①\">\"unknown\"</a></code>).</p>"
            }
          ],
          "additional": [
            {
              "html": "Otherwise:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>device</var> be <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#a-new-device\" id=\"ref-for-a-new-device\" data-timeline=\"device\">a new device</a> with the capabilities described by <var>descriptor</var>.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-expire\" id=\"ref-for-abstract-opdef-expire⑦\" data-timeline=\"device\">Expire</a> <var>adapter</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Issue the subsequent steps on <var data-timeline=\"content\">contentTimeline</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUAdapter.requestDevice",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuadapter-requestdevice-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline②④\">Content timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>gpuDevice</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpudevice\" id=\"ref-for-gpudevice②①\">GPUDevice</a></code> instance.</p>"
        },
        {
          "html": "<p>Set <var>gpuDevice</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑦\" data-timeline=\"const\">[[device]]</a></code> to <var>device</var>.</p>"
        },
        {
          "html": "<p>Set <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-content-device-slot\" id=\"ref-for-dom-device-content-device-slot①\" data-timeline=\"content\">[[content device]]</a></code> to <var>gpuDevice</var>.</p>"
        },
        {
          "html": "<p>Set <var>gpuDevice</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-label\" id=\"ref-for-dom-gpuobjectbase-label⑤\" data-timeline=\"content\">label</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectdescriptorbase-label\" id=\"ref-for-dom-gpuobjectdescriptorbase-label②\">label</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve③\">Resolve</a> <var>promise</var> with <var>gpuDevice</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.destroy()",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline②⑤\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-unmap\" id=\"ref-for-dom-gpubuffer-unmap\">unmap()</a></code> all <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer\" id=\"ref-for-gpubuffer①⓪\">GPUBuffer</a></code>s from this device.</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline②⑥\">Device timeline</a> of <var>this</var>.</p>"
        }
      ]
    },
    {
      "name": "mapState",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline②⑥\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot\" data-timeline=\"content\">[[mapping]]</a></code> is not <code>null</code>,\nreturn <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffermapstate-mapped\" id=\"ref-for-dom-gpubuffermapstate-mapped①\" data-timeline=\"content\">\"mapped\"</a></code>.</p>"
        },
        {
          "html": "<p>If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-pending_map-slot\" id=\"ref-for-dom-gpubuffer-pending_map-slot\" data-timeline=\"content\">[[pending_map]]</a></code> is not <code>null</code>,\nreturn <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffermapstate-pending\" id=\"ref-for-dom-gpubuffermapstate-pending①\" data-timeline=\"content\">\"pending\"</a></code>.</p>"
        },
        {
          "html": "<p>Return <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffermapstate-unmapped\" id=\"ref-for-dom-gpubuffermapstate-unmapped①\" data-timeline=\"content\">\"unmapped\"</a></code>.</p>"
        }
      ]
    },
    {
      "name": "initialize an active buffer mapping",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-initialize-an-active-buffer-mapping",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-initialize-an-active-buffer-mapping\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">initialize an active buffer mapping</dfn> with mode <var>mode</var> and\n    range <var>range</var>, run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline②⑦\">content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>size</var> be <var>range</var>[1] - <var>range</var>[0].</p>"
        },
        {
          "html": "<p>Let <var>data</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑧\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/#sec-createbytedatablock\" id=\"ref-for-sec-createbytedatablock\">CreateByteDataBlock</a>(<var>size</var>).</p>"
        },
        {
          "html": "<p>Return an <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping\" id=\"ref-for-active-buffer-mapping①\" data-timeline=\"content\">active buffer mapping</a> with:</p>\n        <ul>\n         <li data-md=\"\">\n          <p><a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-data\" id=\"ref-for-active-buffer-mapping-data\" data-timeline=\"content\">data</a> set to <var>data</var>.</p>\n         </li><li data-md=\"\">\n          <p><a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-mode\" id=\"ref-for-active-buffer-mapping-mode\" data-timeline=\"content\">mode</a> set to <var>mode</var>.</p>\n         </li><li data-md=\"\">\n          <p><a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-range\" id=\"ref-for-active-buffer-mapping-range\" data-timeline=\"content\">range</a> set to <var>range</var>.</p>\n         </li><li data-md=\"\">\n          <p><a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-views\" id=\"ref-for-active-buffer-mapping-views①\" data-timeline=\"content\">views</a> set to <code>[]</code>.</p>\n        </li></ul>"
        }
      ]
    },
    {
      "name": "GPUDevice.createBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createbuffer-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline②⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>b</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑨\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer\" id=\"ref-for-gpubuffer②⑧\">GPUBuffer</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Set <var>b</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①\" data-timeline=\"const\">size</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-size\" id=\"ref-for-dom-gpubufferdescriptor-size②\">size</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>b</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage①\" data-timeline=\"const\">usage</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-usage\" id=\"ref-for-dom-gpubufferdescriptor-usage②\">usage</a></code>.</p>"
        },
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-mappedatcreation\" id=\"ref-for-dom-gpubufferdescriptor-mappedatcreation③\">mappedAtCreation</a></code> is <code>true</code>:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>b</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot①\" data-timeline=\"content\">[[mapping]]</a></code> to <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⓪\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-initialize-an-active-buffer-mapping\" id=\"ref-for-abstract-opdef-initialize-an-active-buffer-mapping\" data-timeline=\"content\">initialize an active buffer mapping</a> with mode <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumapmode-write\" id=\"ref-for-dom-gpumapmode-write①\">WRITE</a></code> and range <code>[0, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-size\" id=\"ref-for-dom-gpubufferdescriptor-size③\">size</a></code>]</code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline②⑧\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>b</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createbuffer-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline②⑨\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error④\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate②\" data-timeline=\"device\">invalidate</a> <var>b</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must not be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalid\" id=\"ref-for-abstract-opdef-invalid⑦\" data-timeline=\"device\">lost</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-usage\" id=\"ref-for-dom-gpubufferdescriptor-usage③\">usage</a></code> must not be 0.</p>\n           </li><li data-md=\"\">\n            <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-usage\" id=\"ref-for-dom-gpubufferdescriptor-usage④\">usage</a></code> must be a subset of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#allowed-buffer-usages\" id=\"ref-for-allowed-buffer-usages\" data-timeline=\"const\">allowed buffer usages</a> for <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-usage\" id=\"ref-for-dom-gpubufferdescriptor-usage⑤\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-map_read\" id=\"ref-for-dom-gpubufferusage-map_read③\">MAP_READ</a></code>:</p>\n            <ul>\n             <li data-md=\"\">\n              <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-usage\" id=\"ref-for-dom-gpubufferdescriptor-usage⑥\">usage</a></code> must contain no other flags\nexcept <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-copy_dst\" id=\"ref-for-dom-gpubufferusage-copy_dst③\">COPY_DST</a></code>.</p>\n            </li></ul>\n           </li><li data-md=\"\">\n            <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-usage\" id=\"ref-for-dom-gpubufferdescriptor-usage⑦\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-map_write\" id=\"ref-for-dom-gpubufferusage-map_write③\">MAP_WRITE</a></code>:</p>\n            <ul>\n             <li data-md=\"\">\n              <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-usage\" id=\"ref-for-dom-gpubufferdescriptor-usage⑧\">usage</a></code> must contain no other flags\nexcept <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-copy_src\" id=\"ref-for-dom-gpubufferusage-copy_src③\">COPY_SRC</a></code>.</p>\n            </li></ul>\n           </li><li data-md=\"\">\n            <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-size\" id=\"ref-for-dom-gpubufferdescriptor-size④\">size</a></code> must be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot①⓪\" data-timeline=\"const\">[[device]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot②\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxbuffersize\" id=\"ref-for-dom-supported-limits-maxbuffersize②\">maxBufferSize</a></code>.</p>\n           </li><li data-md=\"\">\n            <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-mappedatcreation\" id=\"ref-for-dom-gpubufferdescriptor-mappedatcreation④\">mappedAtCreation</a></code> is <code>true</code>:</p>\n            <ul>\n             <li data-md=\"\">\n              <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-size\" id=\"ref-for-dom-gpubufferdescriptor-size⑤\">size</a></code> must be a multiple of 4.</p>\n            </li></ul>\n          </li></ul>\n         </div>"
        }
      ]
    },
    {
      "name": "GPUDevice.createBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createbuffer-descriptor-descriptor",
      "html": "<span class=\"marker\">Note:</span> If buffer creation fails, and <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-mappedatcreation\" id=\"ref-for-dom-gpubufferdescriptor-mappedatcreation⑤\">mappedAtCreation</a></code> is <code>false</code>,\n        any calls to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapasync\" id=\"ref-for-dom-gpubuffer-mapasync①①\">mapAsync()</a></code> will reject, so any resources allocated to enable mapping can\n        and may be discarded or recycled.",
      "rationale": "if",
      "steps": [
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-mappedatcreation\" id=\"ref-for-dom-gpubufferdescriptor-mappedatcreation⑥\">mappedAtCreation</a></code> is <code>true</code>:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>b</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-internal-state-slot\" id=\"ref-for-dom-gpubuffer-internal-state-slot\" data-timeline=\"device\">[[internal state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer-internal-state-unavailable\" id=\"ref-for-gpubuffer-internal-state-unavailable\" data-timeline=\"device\">unavailable</a>\".</p>"
            }
          ],
          "additional": [
            {
              "html": "Else:",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>b</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-internal-state-slot\" id=\"ref-for-dom-gpubuffer-internal-state-slot①\" data-timeline=\"device\">[[internal state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer-internal-state-available\" id=\"ref-for-gpubuffer-internal-state-available\" data-timeline=\"device\">available</a>\".</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Create a device allocation for <var>b</var> where each byte is zero.</p>\n         <p>If the allocation fails without side-effects, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-an-out-of-memory-error\" id=\"ref-for-abstract-opdef-generate-an-out-of-memory-error\" data-timeline=\"device\">generate an out-of-memory error</a>,\nmake <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③\" data-timeline=\"device\">invalidate</a> <var>b</var>, and return.</p>"
        }
      ]
    },
    {
      "name": "GPUBuffer.destroy",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline②⑨\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Call <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-unmap\" id=\"ref-for-dom-gpubuffer-unmap③\">unmap()</a></code>.</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline③⓪\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot①①\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUBuffer.destroy",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline③①\">Device timeline</a> steps:",
      "rationale": "set",
      "steps": [
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-internal-state-slot\" id=\"ref-for-dom-gpubuffer-internal-state-slot②\" data-timeline=\"device\">[[internal state]]</a></code> to\n\"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer-internal-state-destroyed\" id=\"ref-for-gpubuffer-internal-state-destroyed①\" data-timeline=\"device\">destroyed</a>\".</p>"
        }
      ]
    },
    {
      "name": "GPUBuffer.mapAsync",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapasync-mode-offset-size-mode",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline③①\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var data-timeline=\"content\">contentTimeline</var> be the current <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline③②\">Content timeline</a>.</p>"
        },
        {
          "html": "If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-pending_map-slot\" id=\"ref-for-dom-gpubuffer-pending_map-slot②\" data-timeline=\"content\">[[pending_map]]</a></code> is not <code>null</code>:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with\">a promise rejected with</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#operationerror\" id=\"ref-for-operationerror①\">OperationError</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>p</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise①④\">Promise</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-pending_map-slot\" id=\"ref-for-dom-gpubuffer-pending_map-slot③\" data-timeline=\"content\">[[pending_map]]</a></code> to <var>p</var>.</p>"
        },
        {
          "html": "<p>Issue the <var>validation steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline③②\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot①②\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p>Return <var>p</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUBuffer.mapAsync",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapasync-mode-offset-size-mode",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline③③\">Device timeline</a> <var>validation steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "If <var>size</var> is <code>undefined</code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>rangeSize</var> be max(0, <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size②\" data-timeline=\"const\">size</a></code> - <var>offset</var>).</p>"
            }
          ],
          "additional": [
            {
              "html": "Otherwise:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>rangeSize</var> be <var>size</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "Then:",
          "rationale": "issue",
          "steps": [
            {
              "html": "<p>Issue the <var data-timeline=\"content\">map failure steps</var> on <var data-timeline=\"content\">contentTimeline</var>.</p>"
            },
            {
              "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error⑤\" data-timeline=\"device\">Generate a validation error</a>.</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-internal-state-slot\" id=\"ref-for-dom-gpubuffer-internal-state-slot④\" data-timeline=\"device\">[[internal state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer-internal-state-unavailable\" id=\"ref-for-gpubuffer-internal-state-unavailable①\" data-timeline=\"device\">unavailable</a>\".</p>"
        },
        {
          "html": "If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot①③\" data-timeline=\"const\">[[device]]</a></code> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalid\" id=\"ref-for-abstract-opdef-invalid⑧\" data-timeline=\"device\">lost</a>, or when it <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#lose-the-device\" id=\"ref-for-lose-the-device⑤\" data-timeline=\"device\">becomes lost</a>:",
          "rationale": "issue",
          "steps": [
            {
              "html": "<p>Issue the <var data-timeline=\"content\">map failure steps</var> on <var data-timeline=\"content\">contentTimeline</var>.</p>"
            }
          ],
          "additional": [
            {
              "html": "run the following steps:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>internalStateAtCompletion</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-internal-state-slot\" id=\"ref-for-dom-gpubuffer-internal-state-slot⑤\" data-timeline=\"device\">[[internal state]]</a></code>.</p>"
                },
                {
                  "html": "<p>Let <var>dataForMappedRegion</var> be the contents of <var>this</var> starting at offset <var>offset</var>, for <var>rangeSize</var> bytes.</p>"
                },
                {
                  "html": "<p>Issue the <var data-timeline=\"content\">map success steps</var> on the <var data-timeline=\"content\">contentTimeline</var>.</p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUBuffer.mapAsync",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapasync-mode-offset-size-mode",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline③③\">Content timeline</a> <var data-timeline=\"content\">map success steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<span class=\"marker\">Note:</span> The map has been cancelled by <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-unmap\" id=\"ref-for-dom-gpubuffer-unmap①⓪\">unmap()</a></code>.",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert④\">Assert</a> <var>p</var> is rejected.</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert⑤\">Assert</a> <var>p</var> is pending.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert⑥\">Assert</a> <var>internalStateAtCompletion</var> is \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer-internal-state-unavailable\" id=\"ref-for-gpubuffer-internal-state-unavailable②\" data-timeline=\"device\">unavailable</a>\".</p>"
        },
        {
          "html": "If this allocation fails:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-pending_map-slot\" id=\"ref-for-dom-gpubuffer-pending_map-slot⑥\" data-timeline=\"content\">[[pending_map]]</a></code> to <code>null</code>,\nand <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject②\">reject</a> <var>p</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror②\">RangeError</a></code>.</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p>Set the content of <var>mapping</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-data\" id=\"ref-for-active-buffer-mapping-data①\" data-timeline=\"content\">data</a> to <var>dataForMappedRegion</var>.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot②\" data-timeline=\"content\">[[mapping]]</a></code> to <var>mapping</var>.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-pending_map-slot\" id=\"ref-for-dom-gpubuffer-pending_map-slot⑦\" data-timeline=\"content\">[[pending_map]]</a></code> to <code>null</code>,\nand <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve④\">resolve</a> <var>p</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUBuffer.mapAsync",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapasync-mode-offset-size-mode",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline③④\">Content timeline</a> <var data-timeline=\"content\">map failure steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<span class=\"marker\">Note:</span> The map has been cancelled by <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-unmap\" id=\"ref-for-dom-gpubuffer-unmap①①\">unmap()</a></code>.",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert⑦\">Assert</a> <var>p</var> is already rejected.</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert⑧\">Assert</a> <var>p</var> is still pending.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-pending_map-slot\" id=\"ref-for-dom-gpubuffer-pending_map-slot⑨\" data-timeline=\"content\">[[pending_map]]</a></code> to <code>null</code>,\nand <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject③\">reject</a> <var>p</var> with an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#operationerror\" id=\"ref-for-operationerror②\">OperationError</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUBuffer.getMappedRange",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpubuffer-getmappedrange-offset-size-offset",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline③⑤\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>size</var> is missing:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>rangeSize</var> be max(0, <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size④\" data-timeline=\"const\">size</a></code> - <var>offset</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, throw an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#operationerror\" id=\"ref-for-operationerror③\">OperationError</a></code> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot③\" data-timeline=\"content\">[[mapping]]</a></code> is not <code>null</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>offset</var> is a multiple of 8.</p>\n           </li><li data-md=\"\">\n            <p><var>rangeSize</var> is a multiple of 4.</p>\n           </li><li data-md=\"\">\n            <p><var>offset</var> ≥ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot④\" data-timeline=\"content\">[[mapping]]</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-range\" id=\"ref-for-active-buffer-mapping-range①\" data-timeline=\"content\">range</a>[0].</p>\n           </li><li data-md=\"\">\n            <p><var>offset</var> + <var>rangeSize</var> ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot⑤\" data-timeline=\"content\">[[mapping]]</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-range\" id=\"ref-for-active-buffer-mapping-range②\" data-timeline=\"content\">range</a>[1].</p>\n           </li><li data-md=\"\">\n            <p>[<var>offset</var>, <var>offset</var> + <var>rangeSize</var>) does not overlap another range in <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot⑥\" data-timeline=\"content\">[[mapping]]</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-views\" id=\"ref-for-active-buffer-mapping-views②\" data-timeline=\"content\">views</a>.</p>\n          </li></ul>\n          \n         </div>"
        },
        {
          "html": "<p>Let <var>data</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot⑦\" data-timeline=\"content\">[[mapping]]</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-data\" id=\"ref-for-active-buffer-mapping-data②\" data-timeline=\"content\">data</a>.</p>"
        },
        {
          "html": "<p>Let <var>view</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①①\">!</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#arraybuffer-create\" id=\"ref-for-arraybuffer-create\">create an ArrayBuffer</a> of size <var>rangeSize</var>,\nbut with its pointer mutably referencing the content of <var>data</var> at offset\n(<var>offset</var> - <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot⑧\" data-timeline=\"content\">[[mapping]]</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-range\" id=\"ref-for-active-buffer-mapping-range③\" data-timeline=\"content\">range</a>[0]).</p>"
        },
        {
          "html": "<p>Set <var>view</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances\" id=\"ref-for-sec-properties-of-the-arraybuffer-instances\">[[ArrayBufferDetachKey]]</a></code> to \"WebGPUBufferMapping\".</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append\">Append</a> <var>view</var> to <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot⑨\" data-timeline=\"content\">[[mapping]]</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-views\" id=\"ref-for-active-buffer-mapping-views③\" data-timeline=\"content\">views</a>.</p>"
        },
        {
          "html": "<p>Return <var>view</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUBuffer.unmap",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline③⑦\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-pending_map-slot\" id=\"ref-for-dom-gpubuffer-pending_map-slot①⓪\" data-timeline=\"content\">[[pending_map]]</a></code> is not <code>null</code>:",
          "rationale": "reject",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject④\">Reject</a> <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-pending_map-slot\" id=\"ref-for-dom-gpubuffer-pending_map-slot①①\" data-timeline=\"content\">[[pending_map]]</a></code> with an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#aborterror\" id=\"ref-for-aborterror\">AbortError</a></code>.</p>"
            },
            {
              "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-pending_map-slot\" id=\"ref-for-dom-gpubuffer-pending_map-slot①②\" data-timeline=\"content\">[[pending_map]]</a></code> to <code>null</code>.</p>"
            }
          ]
        },
        {
          "html": "If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot①⓪\" data-timeline=\"content\">[[mapping]]</a></code> is <code>null</code>:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-ArrayBuffer\" id=\"ref-for-idl-ArrayBuffer①⑥\">ArrayBuffer</a></code> <var>ab</var> in <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot①①\" data-timeline=\"content\">[[mapping]]</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-views\" id=\"ref-for-active-buffer-mapping-views④\" data-timeline=\"content\">views</a>:",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/#sec-detacharraybuffer\" id=\"ref-for-sec-detacharraybuffer①\">DetachArrayBuffer</a>(<var>ab</var>, \"WebGPUBufferMapping\").</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>bufferUpdate</var> be <code>null</code>.</p>"
        },
        {
          "html": "If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot①②\" data-timeline=\"content\">[[mapping]]</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-mode\" id=\"ref-for-active-buffer-mapping-mode①\" data-timeline=\"content\">mode</a> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumapmode-write\" id=\"ref-for-dom-gpumapmode-write⑤\">WRITE</a></code>:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>bufferUpdate</var> to { <code>data</code>: <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot①③\" data-timeline=\"content\">[[mapping]]</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-data\" id=\"ref-for-active-buffer-mapping-data③\" data-timeline=\"content\">data</a>, <code>offset</code>: <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot①④\" data-timeline=\"content\">[[mapping]]</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#active-buffer-mapping-range\" id=\"ref-for-active-buffer-mapping-range④\" data-timeline=\"content\">range</a>[0]\n}.</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-mapping-slot\" id=\"ref-for-dom-gpubuffer-mapping-slot①⑤\" data-timeline=\"content\">[[mapping]]</a></code> to <code>null</code>.</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline③⑥\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot①④\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUBuffer.unmap",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline③⑦\">Device timeline</a> steps:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following conditions are unsatisfied, return.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①\" data-timeline=\"device\">valid to use with</a> <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot①⑤\" data-timeline=\"const\">[[device]]</a></code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert⑨\">Assert</a> <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-internal-state-slot\" id=\"ref-for-dom-gpubuffer-internal-state-slot⑥\" data-timeline=\"device\">[[internal state]]</a></code> is \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer-internal-state-unavailable\" id=\"ref-for-gpubuffer-internal-state-unavailable③\" data-timeline=\"device\">unavailable</a>\".</p>"
        },
        {
          "html": "If <var>bufferUpdate</var> is not <code>null</code>:",
          "rationale": "issue",
          "steps": [
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline①⓪\">Queue timeline</a> steps:",
              "rationale": "update",
              "steps": [
                {
                  "html": "<p>Update the contents of <var>this</var> at offset <var>bufferUpdate</var>.<code>offset</code> with the data <var>bufferUpdate</var>.<code>data</code>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-internal-state-slot\" id=\"ref-for-dom-gpubuffer-internal-state-slot⑦\" data-timeline=\"device\">[[internal state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer-internal-state-available\" id=\"ref-for-gpubuffer-internal-state-available③\" data-timeline=\"device\">available</a>\".</p>"
        }
      ]
    },
    {
      "name": "compute render extent",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-compute-render-extent",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline③⑧\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>extent</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpuextent3ddict\" id=\"ref-for-dictdef-gpuextent3ddict①\">GPUExtent3DDict</a></code> object.</p>"
        },
        {
          "html": "<p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-width\" id=\"ref-for-dom-gpuextent3ddict-width\">width</a></code> to max(1, <var>baseSize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width③\">width</a> ≫ <var>mipLevel</var>).</p>"
        },
        {
          "html": "<p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-height\" id=\"ref-for-dom-gpuextent3ddict-height\">height</a></code> to max(1, <var>baseSize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height②\">height</a> ≫ <var>mipLevel</var>).</p>"
        },
        {
          "html": "<p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-depthorarraylayers\" id=\"ref-for-dom-gpuextent3ddict-depthorarraylayers\">depthOrArrayLayers</a></code> to 1.</p>"
        },
        {
          "html": "<p>Return <var>extent</var>.</p>"
        }
      ]
    },
    {
      "name": "Logical miplevel-specific texture extent",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-logical-miplevel-specific-texture-extent",
      "html": "<strong>Returns:</strong> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpuextent3ddict\" id=\"ref-for-dictdef-gpuextent3ddict②\">GPUExtent3DDict</a></code>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>extent</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpuextent3ddict\" id=\"ref-for-dictdef-gpuextent3ddict③\">GPUExtent3DDict</a></code> object.</p>"
        },
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-dimension\" id=\"ref-for-dom-gputexturedescriptor-dimension④\">dimension</a></code> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"1d\"",
                  "steps": [
                    {
                      "html": "<ul>\n         <li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-width\" id=\"ref-for-dom-gpuextent3ddict-width①\">width</a></code> to max(1, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size⑦\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width④\">width</a> ≫ <var>mipLevel</var>).</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-height\" id=\"ref-for-dom-gpuextent3ddict-height①\">height</a></code> to 1.</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-depthorarraylayers\" id=\"ref-for-dom-gpuextent3ddict-depthorarraylayers①\">depthOrArrayLayers</a></code> to 1.</p>\n        </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"2d\"",
                  "steps": [
                    {
                      "html": "<ul>\n         <li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-width\" id=\"ref-for-dom-gpuextent3ddict-width②\">width</a></code> to max(1, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size⑧\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width⑤\">width</a> ≫ <var>mipLevel</var>).</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-height\" id=\"ref-for-dom-gpuextent3ddict-height②\">height</a></code> to max(1, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size⑨\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height③\">height</a> ≫ <var>mipLevel</var>).</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-depthorarraylayers\" id=\"ref-for-dom-gpuextent3ddict-depthorarraylayers②\">depthOrArrayLayers</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size①⓪\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers②\">depthOrArrayLayers</a>.</p>\n        </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"3d\"",
                  "steps": [
                    {
                      "html": "<ul>\n         <li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-width\" id=\"ref-for-dom-gpuextent3ddict-width③\">width</a></code> to max(1, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size①①\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width⑥\">width</a> ≫ <var>mipLevel</var>).</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-height\" id=\"ref-for-dom-gpuextent3ddict-height③\">height</a></code> to max(1, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size①②\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height④\">height</a> ≫ <var>mipLevel</var>).</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-depthorarraylayers\" id=\"ref-for-dom-gpuextent3ddict-depthorarraylayers③\">depthOrArrayLayers</a></code> to max(1, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size①③\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers③\">depthOrArrayLayers</a> ≫ <var>mipLevel</var>).</p>\n        </li></ul>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>extent</var>.</p>"
        }
      ]
    },
    {
      "name": "Physical miplevel-specific texture extent",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-physical-miplevel-specific-texture-extent",
      "html": "<strong>Returns:</strong> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpuextent3ddict\" id=\"ref-for-dictdef-gpuextent3ddict④\">GPUExtent3DDict</a></code>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>extent</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpuextent3ddict\" id=\"ref-for-dictdef-gpuextent3ddict⑤\">GPUExtent3DDict</a></code> object.</p>"
        },
        {
          "html": "<p>Let <var>logicalExtent</var> be <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#logical-miplevel-specific-texture-extent\" id=\"ref-for-logical-miplevel-specific-texture-extent①\">logical miplevel-specific texture extent</a>(<var>descriptor</var>, <var>mipLevel</var>).</p>"
        },
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-dimension\" id=\"ref-for-dom-gputexturedescriptor-dimension⑤\">dimension</a></code> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"1d\"",
                  "steps": [
                    {
                      "html": "<ul>\n         <li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-width\" id=\"ref-for-dom-gpuextent3ddict-width④\">width</a></code> to <var>logicalExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width⑦\">width</a> rounded up to the nearest multiple of <var>descriptor</var>’s <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width\">texel block width</a>.</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-height\" id=\"ref-for-dom-gpuextent3ddict-height④\">height</a></code> to 1.</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-depthorarraylayers\" id=\"ref-for-dom-gpuextent3ddict-depthorarraylayers④\">depthOrArrayLayers</a></code> to 1.</p>\n        </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"2d\"",
                  "steps": [
                    {
                      "html": "<ul>\n         <li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-width\" id=\"ref-for-dom-gpuextent3ddict-width⑤\">width</a></code> to <var>logicalExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width⑧\">width</a> rounded up to the nearest multiple of <var>descriptor</var>’s <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width①\">texel block width</a>.</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-height\" id=\"ref-for-dom-gpuextent3ddict-height⑤\">height</a></code> to <var>logicalExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height⑤\">height</a> rounded up to the nearest multiple of <var>descriptor</var>’s <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-height\" id=\"ref-for-texel-block-height\">texel block height</a>.</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-depthorarraylayers\" id=\"ref-for-dom-gpuextent3ddict-depthorarraylayers⑤\">depthOrArrayLayers</a></code> to <var>logicalExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers④\">depthOrArrayLayers</a>.</p>\n        </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"3d\"",
                  "steps": [
                    {
                      "html": "<ul>\n         <li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-width\" id=\"ref-for-dom-gpuextent3ddict-width⑥\">width</a></code> to <var>logicalExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width⑨\">width</a> rounded up to the nearest multiple of <var>descriptor</var>’s <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width②\">texel block width</a>.</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-height\" id=\"ref-for-dom-gpuextent3ddict-height⑥\">height</a></code> to <var>logicalExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height⑥\">height</a> rounded up to the nearest multiple of <var>descriptor</var>’s <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-height\" id=\"ref-for-texel-block-height①\">texel block height</a>.</p>\n         </li><li data-md=\"\">\n          <p>Set <var>extent</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuextent3ddict-depthorarraylayers\" id=\"ref-for-dom-gpuextent3ddict-depthorarraylayers⑥\">depthOrArrayLayers</a></code> to <var>logicalExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers⑤\">depthOrArrayLayers</a>.</p>\n        </li></ul>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>extent</var>.</p>"
        }
      ]
    },
    {
      "name": "maximum mipLevel count",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-maximum-miplevel-count",
      "html": "<strong>Arguments:</strong>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>dimension</var> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"1d\"",
                  "steps": [
                    {
                      "html": "<p>Return 1.</p>"
                    }
                  ]
                },
                {
                  "case": "\"2d\"",
                  "steps": [
                    {
                      "html": "<p>Let <var>m</var> = max(<var>size</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width①⓪\">width</a>, <var>size</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height⑦\">height</a>).</p>"
                    }
                  ]
                },
                {
                  "case": "\"3d\"",
                  "steps": [
                    {
                      "html": "<p>Let <var>m</var> = max(max(<var>size</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width①①\">width</a>, <var>size</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height⑧\">height</a>), <var>size</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers⑥\">depthOrArrayLayer</a>).</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return floor(log<sub>2</sub>(<var>m</var>)) + 1.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createtexture-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline③⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①②\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuextent3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuextent3d-shape\" data-timeline=\"content\">validate GPUExtent3D shape</a>(<var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size①⑤\">size</a></code>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①③\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features\" id=\"ref-for-abstract-opdef-validate-texture-format-required-features\" data-timeline=\"content\">Validate texture format required features</a> of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-format\" id=\"ref-for-dom-gputexturedescriptor-format③\">format</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot①⑦\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①④\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features\" id=\"ref-for-abstract-opdef-validate-texture-format-required-features①\" data-timeline=\"content\">Validate texture format required features</a> of each element of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-viewformats\" id=\"ref-for-dom-gputexturedescriptor-viewformats②\">viewFormats</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot①⑧\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>t</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⑤\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object①\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputexture\" id=\"ref-for-gputexture②③\">GPUTexture</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Set <var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-width\" id=\"ref-for-dom-gputexture-width②\">width</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size①⑥\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width①②\">width</a>.</p>"
        },
        {
          "html": "<p>Set <var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-height\" id=\"ref-for-dom-gputexture-height②\">height</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size①⑦\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height⑨\">height</a>.</p>"
        },
        {
          "html": "<p>Set <var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-depthorarraylayers\" id=\"ref-for-dom-gputexture-depthorarraylayers②\">depthOrArrayLayers</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size①⑧\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers⑦\">depthOrArrayLayers</a>.</p>"
        },
        {
          "html": "<p>Set <var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-miplevelcount\" id=\"ref-for-dom-gputexture-miplevelcount①\">mipLevelCount</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-miplevelcount\" id=\"ref-for-dom-gputexturedescriptor-miplevelcount①\">mipLevelCount</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount①\">sampleCount</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-samplecount\" id=\"ref-for-dom-gputexturedescriptor-samplecount②\">sampleCount</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension①\">dimension</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-dimension\" id=\"ref-for-dom-gputexturedescriptor-dimension⑦\">dimension</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①\">format</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-format\" id=\"ref-for-dom-gputexturedescriptor-format④\">format</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-usage\" id=\"ref-for-dom-gputexture-usage①\">usage</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-usage\" id=\"ref-for-dom-gputexturedescriptor-usage①\">usage</a></code>.</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline③⑨\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>t</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createtexture-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline④⓪\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following conditions are unsatisfied <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error⑥\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④\" data-timeline=\"device\">invalidate</a> <var>t</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gputexturedescriptor\" id=\"ref-for-abstract-opdef-validating-gputexturedescriptor\" data-timeline=\"device\">validating GPUTextureDescriptor</a>(<var>this</var>, <var>descriptor</var>) returns <code>true</code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-size-slot\" id=\"ref-for-dom-gputexture-size-slot\">[[size]]</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size①⑨\">size</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-viewformats-slot\" id=\"ref-for-dom-gputexture-viewformats-slot\">[[viewFormats]]</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-viewformats\" id=\"ref-for-dom-gputexturedescriptor-viewformats③\">viewFormats</a></code>.</p>"
        }
      ]
    },
    {
      "name": "validating GPUTextureDescriptor",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gputexturedescriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline④①\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-dimension\" id=\"ref-for-dom-gputexturedescriptor-dimension⑧\">dimension</a></code> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"1d\"",
                  "steps": [
                    {
                      "html": "<ul>\n            <li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size②③\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width①④\">width</a> must be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-limits\" id=\"ref-for-dom-gpudevice-limits②\">limits</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusupportedlimits-maxtexturedimension1d\" id=\"ref-for-dom-gpusupportedlimits-maxtexturedimension1d\">maxTextureDimension1D</a></code>.</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size②④\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height①①\">height</a> must be 1.</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size②⑤\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers⑨\">depthOrArrayLayers</a> must be 1.</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-samplecount\" id=\"ref-for-dom-gputexturedescriptor-samplecount④\">sampleCount</a></code> must be 1.</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-format\" id=\"ref-for-dom-gputexturedescriptor-format⑤\">format</a></code> must not be a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#compressed-format\" id=\"ref-for-compressed-format\">compressed format</a> or <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#depth-or-stencil-format\" id=\"ref-for-depth-or-stencil-format①\">depth-or-stencil format</a>.</p>\n           </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"2d\"",
                  "steps": [
                    {
                      "html": "<ul>\n            <li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size②⑥\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width①⑤\">width</a> must be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-limits\" id=\"ref-for-dom-gpudevice-limits③\">limits</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusupportedlimits-maxtexturedimension2d\" id=\"ref-for-dom-gpusupportedlimits-maxtexturedimension2d\">maxTextureDimension2D</a></code>.</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size②⑦\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height①②\">height</a> must be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-limits\" id=\"ref-for-dom-gpudevice-limits④\">limits</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusupportedlimits-maxtexturedimension2d\" id=\"ref-for-dom-gpusupportedlimits-maxtexturedimension2d①\">maxTextureDimension2D</a></code>.</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size②⑧\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers①⓪\">depthOrArrayLayers</a> must be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-limits\" id=\"ref-for-dom-gpudevice-limits⑤\">limits</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusupportedlimits-maxtexturearraylayers\" id=\"ref-for-dom-gpusupportedlimits-maxtexturearraylayers\">maxTextureArrayLayers</a></code>.</p>\n           </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"3d\"",
                  "steps": [
                    {
                      "html": "<ul>\n            <li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size②⑨\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width①⑥\">width</a> must be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-limits\" id=\"ref-for-dom-gpudevice-limits⑥\">limits</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusupportedlimits-maxtexturedimension3d\" id=\"ref-for-dom-gpusupportedlimits-maxtexturedimension3d\">maxTextureDimension3D</a></code>.</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size③⓪\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height①③\">height</a> must be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-limits\" id=\"ref-for-dom-gpudevice-limits⑦\">limits</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusupportedlimits-maxtexturedimension3d\" id=\"ref-for-dom-gpusupportedlimits-maxtexturedimension3d①\">maxTextureDimension3D</a></code>.</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-size\" id=\"ref-for-dom-gputexturedescriptor-size③①\">size</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers①①\">depthOrArrayLayers</a> must be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-limits\" id=\"ref-for-dom-gpudevice-limits⑧\">limits</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusupportedlimits-maxtexturedimension3d\" id=\"ref-for-dom-gpusupportedlimits-maxtexturedimension3d②\">maxTextureDimension3D</a></code>.</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-samplecount\" id=\"ref-for-dom-gputexturedescriptor-samplecount⑤\">sampleCount</a></code> must be 1.</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-format\" id=\"ref-for-dom-gputexturedescriptor-format⑥\">format</a></code> must support <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedimension-3d\" id=\"ref-for-dom-gputexturedimension-3d⑨\">\"3d\"</a></code> textures according to <a href=\"https://gpuweb.github.io/gpuweb/#texture-format-caps\">§ 26.1 Texture Format Capabilities</a>.</p>\n           </li></ul>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUTexture.destroy",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline③⑨\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-destroyed-slot\" id=\"ref-for-dom-gputexture-destroyed-slot\">[[destroyed]]</a></code> to true.</p>"
        }
      ]
    },
    {
      "name": "GPUTexture.createView",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gputexture-createview-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline④⓪\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⑥\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features\" id=\"ref-for-abstract-opdef-validate-texture-format-required-features②\" data-timeline=\"content\">Validate texture format required features</a> of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format③\">format</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot①⑨\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>view</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⑦\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object②\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview\" id=\"ref-for-gputextureview①①\">GPUTextureView</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline④②\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>view</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUTexture.createView",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gputexture-createview-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline④③\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "set",
      "steps": [
        {
          "html": "<p>Set <var>descriptor</var> to the result of <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-resolving-gputextureviewdescriptor-defaults\" id=\"ref-for-abstract-opdef-resolving-gputextureviewdescriptor-defaults\" data-timeline=\"device\">resolving GPUTextureViewDescriptor defaults</a> for <var>this</var> with <var>descriptor</var>.</p>"
        },
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension④\">dimension</a></code> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"1d\"",
                  "steps": [
                    {
                      "html": "<ul>\n               <li data-md=\"\">\n                <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension②\">dimension</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedimension-1d\" id=\"ref-for-dom-gputexturedimension-1d⑧\">\"1d\"</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-arraylayercount\" id=\"ref-for-dom-gputextureviewdescriptor-arraylayercount⑤\">arrayLayerCount</a></code> must be <code>1</code>.</p>\n              </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"2d\"",
                  "steps": [
                    {
                      "html": "<ul>\n               <li data-md=\"\">\n                <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension③\">dimension</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedimension-2d\" id=\"ref-for-dom-gputexturedimension-2d①②\">\"2d\"</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-arraylayercount\" id=\"ref-for-dom-gputextureviewdescriptor-arraylayercount⑥\">arrayLayerCount</a></code> must be <code>1</code>.</p>\n              </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"2d-array\"",
                  "steps": [
                    {
                      "html": "<ul>\n               <li data-md=\"\">\n                <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension④\">dimension</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedimension-2d\" id=\"ref-for-dom-gputexturedimension-2d①③\">\"2d\"</a></code>.</p>\n              </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"cube\"",
                  "steps": [
                    {
                      "html": "<ul>\n               <li data-md=\"\">\n                <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension⑤\">dimension</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedimension-2d\" id=\"ref-for-dom-gputexturedimension-2d①④\">\"2d\"</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-arraylayercount\" id=\"ref-for-dom-gputextureviewdescriptor-arraylayercount⑦\">arrayLayerCount</a></code> must be <code>6</code>.</p>\n               </li><li data-md=\"\">\n                <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-width\" id=\"ref-for-dom-gputexture-width③\">width</a></code> must equal <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-height\" id=\"ref-for-dom-gputexture-height③\">height</a></code>.</p>\n              </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"cube-array\"",
                  "steps": [
                    {
                      "html": "<ul>\n               <li data-md=\"\">\n                <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension⑥\">dimension</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedimension-2d\" id=\"ref-for-dom-gputexturedimension-2d①⑤\">\"2d\"</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-arraylayercount\" id=\"ref-for-dom-gputextureviewdescriptor-arraylayercount⑧\">arrayLayerCount</a></code> must be a multiple of <code>6</code>.</p>\n               </li><li data-md=\"\">\n                <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-width\" id=\"ref-for-dom-gputexture-width④\">width</a></code> must equal <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-height\" id=\"ref-for-dom-gputexture-height④\">height</a></code>.</p>\n              </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"3d\"",
                  "steps": [
                    {
                      "html": "<ul>\n               <li data-md=\"\">\n                <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension⑦\">dimension</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedimension-3d\" id=\"ref-for-dom-gputexturedimension-3d①①\">\"3d\"</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-arraylayercount\" id=\"ref-for-dom-gputextureviewdescriptor-arraylayercount⑨\">arrayLayerCount</a></code> must be <code>1</code>.</p>\n              </li></ul>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>view</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview\" id=\"ref-for-gputextureview①②\">GPUTextureView</a></code> object.</p>"
        },
        {
          "html": "<p>Set <var>view</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-texture-slot\" id=\"ref-for-dom-gputextureview-texture-slot①\">[[texture]]</a></code> to <var>this</var>.</p>"
        },
        {
          "html": "<p>Set <var>view</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot①\">[[descriptor]]</a></code> to <var>descriptor</var>.</p>"
        },
        {
          "html": "If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-usage\" id=\"ref-for-dom-gputexture-usage②\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-render_attachment\" id=\"ref-for-dom-gputextureusage-render_attachment⑥\">RENDER_ATTACHMENT</a></code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>renderExtent</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-compute-render-extent\" id=\"ref-for-abstract-opdef-compute-render-extent\" data-timeline=\"device\">compute render extent</a>(<var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-size-slot\" id=\"ref-for-dom-gputexture-size-slot①\">[[size]]</a></code>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-basemiplevel\" id=\"ref-for-dom-gputextureviewdescriptor-basemiplevel⑥\">baseMipLevel</a></code>).</p>"
            },
            {
              "html": "<p>Set <var>view</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-renderextent-slot\" id=\"ref-for-dom-gputextureview-renderextent-slot\">[[renderExtent]]</a></code> to <var>renderExtent</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "resolving GPUTextureViewDescriptor defaults",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-resolving-gputextureviewdescriptor-defaults",
      "html": "When <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-resolving-gputextureviewdescriptor-defaults\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">resolving GPUTextureViewDescriptor defaults</dfn> for <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview\" id=\"ref-for-gputextureview①③\">GPUTextureView</a></code> <var>texture</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gputextureviewdescriptor\" id=\"ref-for-dictdef-gputextureviewdescriptor⑥\">GPUTextureViewDescriptor</a></code> <var>descriptor</var>, run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline④④\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>resolved</var> be a copy of <var>descriptor</var>.</p>"
        },
        {
          "html": "If <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format⑥\">format</a></code> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③\">provided</a>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>format</var> be the result of <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-resolving-gputextureaspect\" id=\"ref-for-abstract-opdef-resolving-gputextureaspect①\" data-timeline=\"const\">resolving GPUTextureAspect</a>( <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format⑤\">format</a></code>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-aspect\" id=\"ref-for-dom-gputextureviewdescriptor-aspect⑤\">aspect</a></code>).</p>"
            },
            {
              "html": "<p>If <var>format</var> is <code>null</code>:</p>\n        <ul>\n         <li data-md=\"\">\n          <p>Set <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format⑦\">format</a></code> to <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format⑥\">format</a></code>.</p>\n        </li></ul>\n        <p>Otherwise:</p>\n        <ul>\n         <li data-md=\"\">\n          <p>Set <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format⑧\">format</a></code> to <var>format</var>.</p>\n        </li></ul>"
            }
          ]
        },
        {
          "html": "<p>If <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-miplevelcount\" id=\"ref-for-dom-gputextureviewdescriptor-miplevelcount④\">mipLevelCount</a></code> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④\">provided</a>:\nset <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-miplevelcount\" id=\"ref-for-dom-gputextureviewdescriptor-miplevelcount⑤\">mipLevelCount</a></code> to <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-miplevelcount\" id=\"ref-for-dom-gputexture-miplevelcount③\">mipLevelCount</a></code> − <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-basemiplevel\" id=\"ref-for-dom-gputextureviewdescriptor-basemiplevel⑦\">baseMipLevel</a></code>.</p>"
        },
        {
          "html": "If <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension⑤\">dimension</a></code> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑤\">provided</a> and <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension⑧\">dimension</a></code> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"1d\"",
                  "steps": [
                    {
                      "html": "<p>Set <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension⑥\">dimension</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-1d\" id=\"ref-for-dom-gputextureviewdimension-1d②\">\"1d\"</a></code>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"2d\"",
                  "steps": [
                    {
                      "html": "<p>If the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-array-layer-count\" id=\"ref-for-abstract-opdef-array-layer-count①\" data-timeline=\"const\">array layer count</a> of <var>texture</var> is 1:</p>\n        <ul>\n         <li data-md=\"\">\n          <p>Set <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension⑦\">dimension</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-2d\" id=\"ref-for-dom-gputextureviewdimension-2d③\">\"2d\"</a></code>.</p>\n        </li></ul>\n        <p>Otherwise:</p>\n        <ul>\n         <li data-md=\"\">\n          <p>Set <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension⑧\">dimension</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-2d-array\" id=\"ref-for-dom-gputextureviewdimension-2d-array③\">\"2d-array\"</a></code>.</p>\n        </li></ul>"
                    }
                  ]
                },
                {
                  "case": "\"3d\"",
                  "steps": [
                    {
                      "html": "<p>Set <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension⑨\">dimension</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-3d\" id=\"ref-for-dom-gputextureviewdimension-3d②\">\"3d\"</a></code>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "If <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-arraylayercount\" id=\"ref-for-dom-gputextureviewdescriptor-arraylayercount①⓪\">arrayLayerCount</a></code> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑥\">provided</a> and <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension①⓪\">dimension</a></code> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"1d\", \"2d\", or \"3d\"",
                  "steps": [
                    {
                      "html": "<p>Set <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-arraylayercount\" id=\"ref-for-dom-gputextureviewdescriptor-arraylayercount①①\">arrayLayerCount</a></code> to <code>1</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"cube\"",
                  "steps": [
                    {
                      "html": "<p>Set <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-arraylayercount\" id=\"ref-for-dom-gputextureviewdescriptor-arraylayercount①②\">arrayLayerCount</a></code> to <code>6</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"2d-array\" or \"cube-array\"",
                  "steps": [
                    {
                      "html": "<p>Set <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-arraylayercount\" id=\"ref-for-dom-gputextureviewdescriptor-arraylayercount①③\">arrayLayerCount</a></code> to the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-array-layer-count\" id=\"ref-for-abstract-opdef-array-layer-count②\" data-timeline=\"const\">array layer count</a> of <var>texture</var> − <var>resolved</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-basearraylayer\" id=\"ref-for-dom-gputextureviewdescriptor-basearraylayer⑤\">baseArrayLayer</a></code>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>resolved</var>.</p>"
        }
      ]
    },
    {
      "name": "array layer count",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-array-layer-count",
      "html": "To determine the <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-array-layer-count\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">array layer count</dfn> of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputexture\" id=\"ref-for-gputexture③①\">GPUTexture</a></code> <var>texture</var>, run the\n    following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension⑨\">dimension</a></code> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"1d\" or \"3d\"",
                  "steps": [
                    {
                      "html": "<p>Return <code>1</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"2d\"",
                  "steps": [
                    {
                      "html": "<p>Return <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-depthorarraylayers\" id=\"ref-for-dom-gputexture-depthorarraylayers③\">depthOrArrayLayers</a></code>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "resolving GPUTextureAspect",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-resolving-gputextureaspect",
      "html": "<strong>Returns:</strong> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat\" id=\"ref-for-enumdef-gputextureformat②①\">GPUTextureFormat</a></code> or <code>null</code>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>aspect</var> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"all\"",
                  "steps": [
                    {
                      "html": "<p>Return <var>format</var>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"depth-only\"",
                  "steps": [
                    {
                      "html": "<p>If <var>format</var> is a depth-stencil-format:\nReturn the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-specific-format\" id=\"ref-for-aspect-specific-format\">aspect-specific format</a> of <var>format</var> according to <a href=\"https://gpuweb.github.io/gpuweb/#depth-formats\">§ 26.1.2 Depth-stencil formats</a> or <code>null</code> if\n    the aspect is not present in <var>format</var>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"stencil-only\"",
                  "steps": [
                    {
                      "html": "<p>If <var>format</var> is a depth-stencil-format:\nReturn the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-specific-format\" id=\"ref-for-aspect-specific-format\">aspect-specific format</a> of <var>format</var> according to <a href=\"https://gpuweb.github.io/gpuweb/#depth-formats\">§ 26.1.2 Depth-stencil formats</a> or <code>null</code> if\n    the aspect is not present in <var>format</var>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <code>null</code>.</p>"
        }
      ]
    },
    {
      "name": "Validate texture format required features",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-validate-texture-format-required-features\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">Validate texture format required features</dfn> of a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat\" id=\"ref-for-enumdef-gputextureformat②③\">GPUTextureFormat</a></code> <var>format</var><br> with logical <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device\" id=\"ref-for-device①⑨\">device</a> <var>device</var>, run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline④①\">content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>format</var> requires a feature and <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-features-slot\" id=\"ref-for-dom-device-features-slot②\" data-timeline=\"const\">[[features]]</a></code> does not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-contain\" id=\"ref-for-list-contain①\">contain</a> the feature:",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror⑨\">TypeError</a></code>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GPUDevice.importExternalTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-importexternaltexture-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline④②\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>source</var> be <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuexternaltexturedescriptor-source\" id=\"ref-for-dom-gpuexternaltexturedescriptor-source②\">source</a></code>.</p>"
        },
        {
          "html": "If the current image contents of <var>source</var> are the same as the most recent <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-importexternaltexture\" id=\"ref-for-dom-gpudevice-importexternaltexture⑤\">importExternalTexture()</a></code> call with the same <var>descriptor</var> (ignoring <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectdescriptorbase-label\" id=\"ref-for-dom-gpuobjectdescriptorbase-label③\">label</a></code>),\nand the user agent chooses to reuse it:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>previousResult</var> be the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuexternaltexture\" id=\"ref-for-gpuexternaltexture①②\">GPUExternalTexture</a></code> returned previously.</p>"
            },
            {
              "html": "<p>Set <var>previousResult</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuexternaltexture-expired-slot\" id=\"ref-for-dom-gpuexternaltexture-expired-slot①\">[[expired]]</a></code> to <code>false</code>,\nrenewing ownership of the underlying resource.</p>"
            },
            {
              "html": "<p>Let <var>result</var> be <var>previousResult</var>.</p>"
            }
          ],
          "additional": [
            {
              "html": "Otherwise:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>source</var> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#the-image-argument-is-not-origin-clean\" id=\"ref-for-the-image-argument-is-not-origin-clean①\">is not origin-clean</a>,\nthrow a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#securityerror\" id=\"ref-for-securityerror\">SecurityError</a></code> and stop.</p>"
                },
                {
                  "html": "<p>Let <var>usability</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⑧\">?</a> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#check-the-usability-of-the-image-argument\" id=\"ref-for-check-the-usability-of-the-image-argument\">check the usability of the image argument</a>(<var>source</var>).</p>"
                },
                {
                  "html": "If <var>usability</var> is not <code>good</code>:",
                  "rationale": "generate",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error⑧\" data-timeline=\"device\">Generate a validation error</a>.</p>"
                    },
                    {
                      "html": "<p>Return an <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑥\" data-timeline=\"device\">invalidated</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuexternaltexture\" id=\"ref-for-gpuexternaltexture①④\">GPUExternalTexture</a></code>.</p>"
                    }
                  ]
                },
                {
                  "html": "<p>Let <var>data</var> be the result of converting the current image contents of <var>source</var> into\nthe color space <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuexternaltexturedescriptor-colorspace\" id=\"ref-for-dom-gpuexternaltexturedescriptor-colorspace②\">colorSpace</a></code> with unpremultiplied alpha.</p>\n           <p>This <a href=\"https://gpuweb.github.io/gpuweb/#color-space-conversions\">may result</a> in values outside of the range [0, 1].\nIf clamping is desired, it may be performed after sampling.</p>"
                },
                {
                  "html": "<p>Let <var>result</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuexternaltexture\" id=\"ref-for-gpuexternaltexture①⑤\">GPUExternalTexture</a></code> object wrapping <var>data</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>If <var>source</var> is an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/media.html#htmlvideoelement\" id=\"ref-for-htmlvideoelement③\">HTMLVideoElement</a></code>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-queue-an-automatic-expiry-task\" id=\"ref-for-abstract-opdef-queue-an-automatic-expiry-task\" data-timeline=\"content\">queue an automatic expiry task</a> with device <var>this</var> and the following steps:</p>\n         <div data-timeline=\"content\">\n          <ol>\n           <li data-md=\"\">\n            <p>Set <var>result</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuexternaltexture-expired-slot\" id=\"ref-for-dom-gpuexternaltexture-expired-slot②\">[[expired]]</a></code> to <code>true</code>,\nreleasing ownership of the underlying resource.</p>\n          </li></ol>\n         </div>",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>result</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuexternaltexture-expired-slot\" id=\"ref-for-dom-gpuexternaltexture-expired-slot②\">[[expired]]</a></code> to <code>true</code>,\nreleasing ownership of the underlying resource.</p>"
            }
          ]
        },
        {
          "html": "<p>If <var>source</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://w3c.github.io/webcodecs/#videoframe\" id=\"ref-for-videoframe⑥\">VideoFrame</a></code>, then when <var>source</var> is <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/webcodecs/#close-videoframe\" id=\"ref-for-close-videoframe①\">closed</a>, run the following steps:</p>\n         <div data-timeline=\"content\">\n          <ol>\n           <li data-md=\"\">\n            <p>Set <var>result</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuexternaltexture-expired-slot\" id=\"ref-for-dom-gpuexternaltexture-expired-slot③\">[[expired]]</a></code> to <code>true</code>.</p>\n          </li></ol>\n         </div>",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>result</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuexternaltexture-expired-slot\" id=\"ref-for-dom-gpuexternaltexture-expired-slot③\">[[expired]]</a></code> to <code>true</code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>result</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-label\" id=\"ref-for-dom-gpuobjectbase-label⑥\" data-timeline=\"content\">label</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectdescriptorbase-label\" id=\"ref-for-dom-gpuobjectdescriptorbase-label④\">label</a></code>.</p>"
        },
        {
          "html": "<p>Return <var>result</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createSampler",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createsampler-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline④③\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>s</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⑨\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object③\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpusampler\" id=\"ref-for-gpusampler①⑥\">GPUSampler</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline④⑤\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>s</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createSampler",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createsampler-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline④⑥\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following conditions are unsatisfied <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error⑨\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑦\" data-timeline=\"device\">invalidate</a> <var>s</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must not be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalid\" id=\"ref-for-abstract-opdef-invalid①①\" data-timeline=\"device\">lost</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-lodminclamp\" id=\"ref-for-dom-gpusamplerdescriptor-lodminclamp①\">lodMinClamp</a></code> ≥ 0.</p>\n           </li><li data-md=\"\">\n            <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-lodmaxclamp\" id=\"ref-for-dom-gpusamplerdescriptor-lodmaxclamp①\">lodMaxClamp</a></code> ≥ <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-lodminclamp\" id=\"ref-for-dom-gpusamplerdescriptor-lodminclamp②\">lodMinClamp</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-maxanisotropy\" id=\"ref-for-dom-gpusamplerdescriptor-maxanisotropy⑤\">maxAnisotropy</a></code> ≥ 1.</p>\n            \n           </li><li data-md=\"\">\n            <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-maxanisotropy\" id=\"ref-for-dom-gpusamplerdescriptor-maxanisotropy⑧\">maxAnisotropy</a></code> &gt; 1:</p>\n            <ul>\n             <li data-md=\"\">\n              <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-magfilter\" id=\"ref-for-dom-gpusamplerdescriptor-magfilter①\">magFilter</a></code>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-minfilter\" id=\"ref-for-dom-gpusamplerdescriptor-minfilter①\">minFilter</a></code>,\nand <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-mipmapfilter\" id=\"ref-for-dom-gpusamplerdescriptor-mipmapfilter①\">mipmapFilter</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumipmapfiltermode-linear\" id=\"ref-for-dom-gpumipmapfiltermode-linear\">\"linear\"</a></code>.</p>\n            </li></ul>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>s</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusampler-descriptor-slot\" id=\"ref-for-dom-gpusampler-descriptor-slot\">[[descriptor]]</a></code> to <var>descriptor</var>.</p>"
        },
        {
          "html": "<p>Set <var>s</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusampler-iscomparison-slot\" id=\"ref-for-dom-gpusampler-iscomparison-slot\">[[isComparison]]</a></code> to <code>false</code> if the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-compare\" id=\"ref-for-dom-gpusamplerdescriptor-compare①\">compare</a></code> attribute\n    of <var>s</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusampler-descriptor-slot\" id=\"ref-for-dom-gpusampler-descriptor-slot①\">[[descriptor]]</a></code> is <code>null</code> or undefined. Otherwise, set it to <code>true</code>.</p>"
        },
        {
          "html": "<p>Set <var>s</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusampler-isfiltering-slot\" id=\"ref-for-dom-gpusampler-isfiltering-slot\">[[isFiltering]]</a></code> to <code>false</code> if none of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-minfilter\" id=\"ref-for-dom-gpusamplerdescriptor-minfilter②\">minFilter</a></code>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-magfilter\" id=\"ref-for-dom-gpusamplerdescriptor-magfilter②\">magFilter</a></code>, or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerdescriptor-mipmapfilter\" id=\"ref-for-dom-gpusamplerdescriptor-mipmapfilter②\">mipmapFilter</a></code> has the value of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpufiltermode-linear\" id=\"ref-for-dom-gpufiltermode-linear①\">\"linear\"</a></code>. Otherwise, set it to <code>true</code>.</p>"
        }
      ]
    },
    {
      "name": "exceeds the binding slot limits",
      "href": "https://gpuweb.github.io/gpuweb/#exceeds-the-binding-slot-limits",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline④⑦\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "For each <var>entry</var> in <var>entries</var>, if:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "entry.buffer?.type is \"uniform\" and entry.buffer?.hasDynamicOffset is true",
                  "steps": [
                    {
                      "html": "<p>Consider 1 <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxdynamicuniformbuffersperpipelinelayout\" id=\"ref-for-dom-supported-limits-maxdynamicuniformbuffersperpipelinelayout\">maxDynamicUniformBuffersPerPipelineLayout</a></code> slot to be used.</p>"
                    }
                  ]
                },
                {
                  "case": "entry.buffer?.type is \"storage\" and entry.buffer?.hasDynamicOffset is true",
                  "steps": [
                    {
                      "html": "<p>Consider 1 <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxdynamicstoragebuffersperpipelinelayout\" id=\"ref-for-dom-supported-limits-maxdynamicstoragebuffersperpipelinelayout\">maxDynamicStorageBuffersPerPipelineLayout</a></code> slot to be used.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "For each shader stage <var>stage</var> in\n« <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-vertex\" id=\"ref-for-dom-gpushaderstage-vertex①\">VERTEX</a></code>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-fragment\" id=\"ref-for-dom-gpushaderstage-fragment①\">FRAGMENT</a></code>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-compute\" id=\"ref-for-dom-gpushaderstage-compute①\">COMPUTE</a></code> »:",
          "rationale": "for",
          "steps": [
            {
              "html": "For each <var>entry</var> in <var>entries</var> for which <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-visibility\" id=\"ref-for-dom-gpubindgrouplayoutentry-visibility①\">visibility</a></code> contains <var>stage</var>, if:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "entry.buffer?.type is \"uniform\"",
                      "steps": [
                        {
                          "html": "<p>Consider 1 <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxuniformbufferspershaderstage\" id=\"ref-for-dom-supported-limits-maxuniformbufferspershaderstage①\">maxUniformBuffersPerShaderStage</a></code> slot to be used.</p>"
                        }
                      ]
                    },
                    {
                      "case": "entry.buffer?.type is \"storage\" or \"read-only-storage\"",
                      "steps": [
                        {
                          "html": "<p>Consider 1 <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxstoragebufferspershaderstage\" id=\"ref-for-dom-supported-limits-maxstoragebufferspershaderstage①\">maxStorageBuffersPerShaderStage</a></code> slot to be used.</p>"
                        }
                      ]
                    },
                    {
                      "case": "entry.sampler is provided",
                      "steps": [
                        {
                          "html": "<p>Consider 1 <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxsamplerspershaderstage\" id=\"ref-for-dom-supported-limits-maxsamplerspershaderstage①\">maxSamplersPerShaderStage</a></code> slot to be used.</p>"
                        }
                      ]
                    },
                    {
                      "case": "entry.texture is provided",
                      "steps": [
                        {
                          "html": "<p>Consider 1 <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxsampledtexturespershaderstage\" id=\"ref-for-dom-supported-limits-maxsampledtexturespershaderstage①\">maxSampledTexturesPerShaderStage</a></code> slot to be used.</p>"
                        }
                      ]
                    },
                    {
                      "case": "entry.storageTexture is provided",
                      "steps": [
                        {
                          "html": "<p>Consider 1 <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxstoragetexturespershaderstage\" id=\"ref-for-dom-supported-limits-maxstoragetexturespershaderstage①\">maxStorageTexturesPerShaderStage</a></code> slot to be used.</p>"
                        }
                      ]
                    },
                    {
                      "case": "entry.externalTexture is provided",
                      "steps": [
                        {
                          "html": "<p>Consider\n4 <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxsampledtexturespershaderstage\" id=\"ref-for-dom-supported-limits-maxsampledtexturespershaderstage②\">maxSampledTexturesPerShaderStage</a></code> slot,\n1 <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxsamplerspershaderstage\" id=\"ref-for-dom-supported-limits-maxsamplerspershaderstage②\">maxSamplersPerShaderStage</a></code> slot, and\n1 <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxuniformbufferspershaderstage\" id=\"ref-for-dom-supported-limits-maxuniformbufferspershaderstage②\">maxUniformBuffersPerShaderStage</a></code> slot\nto be used.</p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUDevice.createBindGroupLayout",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createbindgrouplayout-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline④④\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry②⑨\">GPUBindGroupLayoutEntry</a></code> <var>entry</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutdescriptor-entries\" id=\"ref-for-dom-gpubindgrouplayoutdescriptor-entries①\">entries</a></code>:",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture④\">storageTexture</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑥\">provided</a>:</p>\n           <ol>\n            <li data-md=\"\">\n             <p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⓪\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features\" id=\"ref-for-abstract-opdef-validate-texture-format-required-features③\" data-timeline=\"content\">Validate texture format required features</a> for <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture⑤\">storageTexture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-format\" id=\"ref-for-dom-gpustoragetexturebindinglayout-format②\">format</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot②①\" data-timeline=\"const\">[[device]]</a></code>.</p>\n           </li></ol>",
              "ignored": [
                "? Validate texture format required features for entry.storageTexture.format with this.[[device]]."
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>layout</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②①\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object④\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubindgrouplayout\" id=\"ref-for-gpubindgrouplayout①⑧\">GPUBindGroupLayout</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline④⑧\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>layout</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createBindGroupLayout",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createbindgrouplayout-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline④⑨\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following conditions are unsatisfied <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error①⓪\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑧\" data-timeline=\"device\">invalidate</a> <var>layout</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must not be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalid\" id=\"ref-for-abstract-opdef-invalid①②\" data-timeline=\"device\">lost</a>.</p>\n           </li><li data-md=\"\">\n            <p>Let <var>limits</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot②②\" data-timeline=\"const\">[[device]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot③\" data-timeline=\"const\">[[limits]]</a></code>.</p>\n           </li><li data-md=\"\">\n            <p>The <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-binding\" id=\"ref-for-dom-gpubindgrouplayoutentry-binding②\">binding</a></code> of each entry in <var>descriptor</var> is unique.</p>\n           </li><li data-md=\"\">\n            <p>The <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-binding\" id=\"ref-for-dom-gpubindgrouplayoutentry-binding③\">binding</a></code> of each entry in <var>descriptor</var> must be &lt; <var>limits</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxbindingsperbindgroup\" id=\"ref-for-dom-supported-limits-maxbindingsperbindgroup②\">maxBindingsPerBindGroup</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutdescriptor-entries\" id=\"ref-for-dom-gpubindgrouplayoutdescriptor-entries②\">entries</a></code> must not <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#exceeds-the-binding-slot-limits\" id=\"ref-for-exceeds-the-binding-slot-limits⑨\" data-timeline=\"device\">exceed the binding slot limits</a> of <var>limits</var>.</p>\n           </li><li data-md=\"\">\n            <p>For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry③⓪\">GPUBindGroupLayoutEntry</a></code> <var>entry</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutdescriptor-entries\" id=\"ref-for-dom-gpubindgrouplayoutdescriptor-entries③\">entries</a></code>:</p>\n            <ul>\n             <li data-md=\"\">\n              <p>Exactly one of <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer①⑤\">buffer</a></code>, <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-sampler\" id=\"ref-for-dom-gpubindgrouplayoutentry-sampler④\">sampler</a></code>, <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture④\">texture</a></code>, and <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture⑥\">storageTexture</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑦\">provided</a>.</p>\n             </li><li data-md=\"\">\n              <p><var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-visibility\" id=\"ref-for-dom-gpubindgrouplayoutentry-visibility②\">visibility</a></code> contains only bits defined in <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#namespacedef-gpushaderstage\" id=\"ref-for-namespacedef-gpushaderstage⑦\">GPUShaderStage</a></code>.</p>\n             </li><li data-md=\"\">\n              <p>If <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-visibility\" id=\"ref-for-dom-gpubindgrouplayoutentry-visibility③\">visibility</a></code> includes <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-vertex\" id=\"ref-for-dom-gpushaderstage-vertex②\">VERTEX</a></code>:</p>\n              <ul>\n               <li data-md=\"\">\n                <p><var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer①⑥\">buffer</a></code>?.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-type\" id=\"ref-for-dom-gpubufferbindinglayout-type①①\">type</a></code> must not be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindingtype-storage\" id=\"ref-for-dom-gpubufferbindingtype-storage⑥\">\"storage\"</a></code>.\nNote that <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindingtype-read-only-storage\" id=\"ref-for-dom-gpubufferbindingtype-read-only-storage⑤\">\"read-only-storage\"</a></code> is allowed.</p>\n               </li><li data-md=\"\">\n                <p><var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture⑦\">storageTexture</a></code>?.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-access\" id=\"ref-for-dom-gpustoragetexturebindinglayout-access①\">access</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetextureaccess-read-only\" id=\"ref-for-dom-gpustoragetextureaccess-read-only①\">\"read-only\"</a></code>.</p>\n              </li></ul>\n             </li><li data-md=\"\">\n              <p>If <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture⑤\">texture</a></code>?.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-multisampled\" id=\"ref-for-dom-gputexturebindinglayout-multisampled①\">multisampled</a></code> is <code>true</code>:</p>\n              <ul>\n               <li data-md=\"\">\n                <p><var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture⑥\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-viewdimension\" id=\"ref-for-dom-gputexturebindinglayout-viewdimension①\">viewDimension</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-2d\" id=\"ref-for-dom-gputextureviewdimension-2d⑤\">\"2d\"</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture⑦\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-sampletype\" id=\"ref-for-dom-gputexturebindinglayout-sampletype②\">sampleType</a></code> is not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturesampletype-float\" id=\"ref-for-dom-gputexturesampletype-float②\">\"float\"</a></code>.</p>\n              </li></ul>\n             </li><li data-md=\"\">\n              <p>If <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture⑧\">storageTexture</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑧\">provided</a>:</p>\n              <ul>\n               <li data-md=\"\">\n                <p><var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture⑨\">storageTexture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-viewdimension\" id=\"ref-for-dom-gpustoragetexturebindinglayout-viewdimension①\">viewDimension</a></code> is not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-cube\" id=\"ref-for-dom-gputextureviewdimension-cube④\">\"cube\"</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-cube-array\" id=\"ref-for-dom-gputextureviewdimension-cube-array③\">\"cube-array\"</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture①⓪\">storageTexture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-format\" id=\"ref-for-dom-gpustoragetexturebindinglayout-format③\">format</a></code> must be a format\nwhich can support storage usage for the given <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture①①\">storageTexture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-access\" id=\"ref-for-dom-gpustoragetexturebindinglayout-access②\">access</a></code> according to the <a href=\"https://gpuweb.github.io/gpuweb/#plain-color-formats\">§ 26.1.1 Plain color formats</a> table.</p>\n              </li></ul>\n            </li></ul>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayout-descriptor-slot\" id=\"ref-for-dom-gpubindgrouplayout-descriptor-slot\">[[descriptor]]</a></code> to <var>descriptor</var>.</p>"
        },
        {
          "html": "<p>Set <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayout-dynamicoffsetcount-slot\" id=\"ref-for-dom-gpubindgrouplayout-dynamicoffsetcount-slot\">[[dynamicOffsetCount]]</a></code> to the number of\nentries in <var>descriptor</var> where <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer①⑦\">buffer</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑨\">provided</a> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer①⑧\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-hasdynamicoffset\" id=\"ref-for-dom-gpubufferbindinglayout-hasdynamicoffset③\">hasDynamicOffset</a></code> is <code>true</code>.</p>"
        },
        {
          "html": "For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry③①\">GPUBindGroupLayoutEntry</a></code> <var>entry</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutdescriptor-entries\" id=\"ref-for-dom-gpubindgrouplayoutdescriptor-entries④\">entries</a></code>:",
          "rationale": "insert",
          "steps": [
            {
              "html": "<p>Insert <var>entry</var> into <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayout-entrymap-slot\" id=\"ref-for-dom-gpubindgrouplayout-entrymap-slot\">[[entryMap]]</a></code> with the key of <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-binding\" id=\"ref-for-dom-gpubindgrouplayoutentry-binding④\">binding</a></code>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "bound buffer ranges",
      "href": "https://gpuweb.github.io/gpuweb/#gpubindgroup-bound-buffer-ranges",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"GPUBindGroup\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"gpubindgroup-bound-buffer-ranges\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">bound buffer ranges</dfn> of a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubindgroup\" id=\"ref-for-gpubindgroup①③\">GPUBindGroup</a></code> <var>bindGroup</var>,\n    given <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list③\">list</a>&lt;GPUBufferDynamicOffset&gt; <var>dynamicOffsets</var>, are computed as follows:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>result</var> be a new <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#ordered-set\" id=\"ref-for-ordered-set③\">set</a>&lt;(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry③②\">GPUBindGroupLayoutEntry</a></code>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubufferbinding\" id=\"ref-for-dictdef-gpubufferbinding⑦\">GPUBufferBinding</a></code>)&gt;.</p>"
        },
        {
          "html": "<p>Let <var>dynamicOffsetIndex</var> be 0.</p>"
        },
        {
          "html": "For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgroupentry\" id=\"ref-for-dictdef-gpubindgroupentry③\">GPUBindGroupEntry</a></code> <var>bindGroupEntry</var> in <var>bindGroup</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-entries-slot\" id=\"ref-for-dom-gpubindgroup-entries-slot\">[[entries]]</a></code>,\nsorted by <var>bindGroupEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupentry-binding\" id=\"ref-for-dom-gpubindgroupentry-binding①\">binding</a></code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>bindGroupLayoutEntry</var> be <var>bindGroup</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-layout-slot\" id=\"ref-for-dom-gpubindgroup-layout-slot\">[[layout]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayout-entrymap-slot\" id=\"ref-for-dom-gpubindgrouplayout-entrymap-slot⑤\">[[entryMap]]</a></code>[<var>bindGroupEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupentry-binding\" id=\"ref-for-dom-gpubindgroupentry-binding②\">binding</a></code>].</p>"
            },
            {
              "html": "<p>If <var>bindGroupLayoutEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer①⑨\">buffer</a></code> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②⓪\">provided</a>, <strong>continue</strong>.</p>"
            },
            {
              "html": "<p>Let <var>bound</var> be a copy of <var>bindGroupEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupentry-resource\" id=\"ref-for-dom-gpubindgroupentry-resource\">resource</a></code>.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert①⓪\">Assert</a> <var>bound</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubufferbinding\" id=\"ref-for-dictdef-gpubufferbinding⑧\">GPUBufferBinding</a></code>.</p>"
            },
            {
              "html": "If <var>bindGroupLayoutEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer②⓪\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-hasdynamicoffset\" id=\"ref-for-dom-gpubufferbindinglayout-hasdynamicoffset④\">hasDynamicOffset</a></code>:",
              "rationale": "increment",
              "steps": [
                {
                  "html": "<p>Increment <var>bound</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-offset\" id=\"ref-for-dom-gpubufferbinding-offset②\">offset</a></code> by <var>dynamicOffsets</var>[<var>dynamicOffsetIndex</var>].</p>"
                },
                {
                  "html": "<p>Increment <var>dynamicOffsetIndex</var> by 1.</p>"
                }
              ]
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#set-append\" id=\"ref-for-set-append\">Append</a> (<var>bindGroupLayoutEntry</var>, <var>bound</var>) to <var>result</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>result</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createBindGroup",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createbindgroup-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline④⑤\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>bindGroup</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②②\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object⑤\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubindgroup\" id=\"ref-for-gpubindgroup②⓪\">GPUBindGroup</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑤⓪\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>bindGroup</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createBindGroup",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createbindgroup-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑤①\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>limits</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot②③\" data-timeline=\"const\">[[device]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot④\" data-timeline=\"const\">[[limits]]</a></code>.</p>"
        },
        {
          "html": "If the defined <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#binding-member\" id=\"ref-for-binding-member①\">binding member</a> for <var>layoutBinding</var> is",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "sampler",
                  "steps": [
                    {
                      "html": "If <var>layoutBinding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-sampler\" id=\"ref-for-dom-gpubindgrouplayoutentry-sampler⑥\">sampler</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerbindinglayout-type\" id=\"ref-for-dom-gpusamplerbindinglayout-type①\">type</a></code> is:",
                      "rationale": ".switch",
                      "steps": [
                        {
                          "operation": "switch",
                          "steps": [
                            {
                              "case": "\"filtering\"",
                              "steps": [
                                {
                                  "html": "<p><var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusampler-iscomparison-slot\" id=\"ref-for-dom-gpusampler-iscomparison-slot①\">[[isComparison]]</a></code> is <code>false</code>.</p>"
                                }
                              ]
                            },
                            {
                              "case": "\"non-filtering\"",
                              "steps": [
                                {
                                  "html": "<p><var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusampler-isfiltering-slot\" id=\"ref-for-dom-gpusampler-isfiltering-slot①\">[[isFiltering]]</a></code> is <code>false</code>. <var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusampler-iscomparison-slot\" id=\"ref-for-dom-gpusampler-iscomparison-slot②\">[[isComparison]]</a></code> is <code>false</code>.</p>"
                                }
                              ]
                            },
                            {
                              "case": "\"comparison\"",
                              "steps": [
                                {
                                  "html": "<p><var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusampler-iscomparison-slot\" id=\"ref-for-dom-gpusampler-iscomparison-slot③\">[[isComparison]]</a></code> is <code>true</code>.</p>"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "case": "texture",
                  "steps": [
                    {
                      "html": "<ul>\n               <li data-md=\"\">\n                <p><var>resource</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview\" id=\"ref-for-gputextureview②⓪\">GPUTextureView</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>resource</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with⑤\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n               </li><li data-md=\"\">\n                <p>Let <var>texture</var> be <var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-texture-slot\" id=\"ref-for-dom-gputextureview-texture-slot②\">[[texture]]</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>layoutBinding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture⑨\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-viewdimension\" id=\"ref-for-dom-gputexturebindinglayout-viewdimension②\">viewDimension</a></code> is equal to <var>resource</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension①③\">dimension</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>layoutBinding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture①⓪\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-sampletype\" id=\"ref-for-dom-gputexturebindinglayout-sampletype③\">sampleType</a></code> is <a href=\"https://gpuweb.github.io/gpuweb/#texture-format-caps\">compatible</a> with <var>resource</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format①⓪\">format</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>texture</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-usage\" id=\"ref-for-dom-gputexturedescriptor-usage⑧\">usage</a></code> includes <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-texture_binding\" id=\"ref-for-dom-gputextureusage-texture_binding③\">TEXTURE_BINDING</a></code>.</p>\n               </li><li data-md=\"\">\n                <p>If <var>layoutBinding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture①①\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-multisampled\" id=\"ref-for-dom-gputexturebindinglayout-multisampled②\">multisampled</a></code> is <code>true</code>, <var>texture</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-samplecount\" id=\"ref-for-dom-gputexturedescriptor-samplecount⑦\">sampleCount</a></code> &gt; <code>1</code>, Otherwise <var>texture</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-samplecount\" id=\"ref-for-dom-gputexturedescriptor-samplecount⑧\">sampleCount</a></code> is <code>1</code>.</p>\n              </li></ul>"
                    }
                  ]
                },
                {
                  "case": "storageTexture",
                  "steps": [
                    {
                      "html": "<ul>\n               <li data-md=\"\">\n                <p><var>resource</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview\" id=\"ref-for-gputextureview②①\">GPUTextureView</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>resource</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with⑥\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n               </li><li data-md=\"\">\n                <p>Let <var>texture</var> be <var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-texture-slot\" id=\"ref-for-dom-gputextureview-texture-slot③\">[[texture]]</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>layoutBinding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture①③\">storageTexture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-viewdimension\" id=\"ref-for-dom-gpustoragetexturebindinglayout-viewdimension②\">viewDimension</a></code> is equal to <var>resource</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension①④\">dimension</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>layoutBinding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture①④\">storageTexture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-format\" id=\"ref-for-dom-gpustoragetexturebindinglayout-format④\">format</a></code> is equal to <var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot②\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format①①\">format</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>texture</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-usage\" id=\"ref-for-dom-gputexturedescriptor-usage⑨\">usage</a></code> includes <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-storage_binding\" id=\"ref-for-dom-gputextureusage-storage_binding⑦\">STORAGE_BINDING</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot③\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-miplevelcount\" id=\"ref-for-dom-gputextureviewdescriptor-miplevelcount⑥\">mipLevelCount</a></code> must be 1.</p>\n              </li></ul>"
                    }
                  ]
                },
                {
                  "case": "buffer",
                  "steps": [
                    {
                      "html": "If <var>layoutBinding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer②③\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-type\" id=\"ref-for-dom-gpubufferbindinglayout-type①②\">type</a></code> is",
                      "rationale": ".switch",
                      "steps": [
                        {
                          "operation": "switch",
                          "steps": [
                            {
                              "case": "\"uniform\"",
                              "steps": [
                                {
                                  "html": "<ul>\n                   <li data-md=\"\">\n                    <p><var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-buffer\" id=\"ref-for-dom-gpubufferbinding-buffer④\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-usage\" id=\"ref-for-dom-gpubufferdescriptor-usage⑨\">usage</a></code> includes <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-uniform\" id=\"ref-for-dom-gpubufferusage-uniform③\">UNIFORM</a></code>.</p>\n                   </li><li data-md=\"\">\n                    <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-effective-buffer-binding-size\" id=\"ref-for-abstract-opdef-effective-buffer-binding-size①\" data-timeline=\"device\">effective buffer binding size</a>(<var>resource</var>) ≤ <var>limits</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxuniformbufferbindingsize\" id=\"ref-for-dom-supported-limits-maxuniformbufferbindingsize①\">maxUniformBufferBindingSize</a></code>.</p>\n                   </li><li data-md=\"\">\n                    <p><var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-offset\" id=\"ref-for-dom-gpubufferbinding-offset⑥\">offset</a></code> is a multiple of <var>limits</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-minuniformbufferoffsetalignment\" id=\"ref-for-dom-supported-limits-minuniformbufferoffsetalignment①\">minUniformBufferOffsetAlignment</a></code>.</p>\n                  </li></ul>"
                                }
                              ]
                            },
                            {
                              "case": "\"storage\" or \"read-only-storage\"",
                              "steps": [
                                {
                                  "html": "<ul>\n                   <li data-md=\"\">\n                    <p><var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-buffer\" id=\"ref-for-dom-gpubufferbinding-buffer⑤\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferdescriptor-usage\" id=\"ref-for-dom-gpubufferdescriptor-usage①⓪\">usage</a></code> includes <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-storage\" id=\"ref-for-dom-gpubufferusage-storage④\">STORAGE</a></code>.</p>\n                   </li><li data-md=\"\">\n                    <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-effective-buffer-binding-size\" id=\"ref-for-abstract-opdef-effective-buffer-binding-size②\" data-timeline=\"device\">effective buffer binding size</a>(<var>resource</var>) ≤ <var>limits</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxstoragebufferbindingsize\" id=\"ref-for-dom-supported-limits-maxstoragebufferbindingsize②\">maxStorageBufferBindingSize</a></code>.</p>\n                   </li><li data-md=\"\">\n                    <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-effective-buffer-binding-size\" id=\"ref-for-abstract-opdef-effective-buffer-binding-size③\" data-timeline=\"device\">effective buffer binding size</a>(<var>resource</var>) is a multiple of 4.</p>\n                   </li><li data-md=\"\">\n                    <p><var>resource</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-offset\" id=\"ref-for-dom-gpubufferbinding-offset⑦\">offset</a></code> is a multiple of <var>limits</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-minstoragebufferoffsetalignment\" id=\"ref-for-dom-supported-limits-minstoragebufferoffsetalignment①\">minStorageBufferOffsetAlignment</a></code>.</p>\n                  </li></ul>"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "case": "externalTexture",
                  "steps": [
                    {
                      "html": "<ul>\n               <li data-md=\"\">\n                <p><var>resource</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuexternaltexture\" id=\"ref-for-gpuexternaltexture②⓪\">GPUExternalTexture</a></code>.</p>\n               </li><li data-md=\"\">\n                <p><var>resource</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with⑧\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n              </li></ul>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>bindGroup</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-layout-slot\" id=\"ref-for-dom-gpubindgroup-layout-slot①\">[[layout]]</a></code> = <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupdescriptor-layout\" id=\"ref-for-dom-gpubindgroupdescriptor-layout⑤\">layout</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>bindGroup</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-entries-slot\" id=\"ref-for-dom-gpubindgroup-entries-slot①\">[[entries]]</a></code> = <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupdescriptor-entries\" id=\"ref-for-dom-gpubindgroupdescriptor-entries③\">entries</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>bindGroup</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-usedresources-slot\" id=\"ref-for-dom-gpubindgroup-usedresources-slot\">[[usedResources]]</a></code> = {}.</p>"
        },
        {
          "html": "For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgroupentry\" id=\"ref-for-dictdef-gpubindgroupentry⑨\">GPUBindGroupEntry</a></code> <var>bindingDescriptor</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupdescriptor-entries\" id=\"ref-for-dom-gpubindgroupdescriptor-entries④\">entries</a></code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>internalUsage</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#binding-usage\" id=\"ref-for-binding-usage\">binding usage</a> for <var>layoutBinding</var>.</p>"
            },
            {
              "html": "<p>Each <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#subresource\" id=\"ref-for-subresource①②\">subresource</a> seen by <var>resource</var> is added to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-usedresources-slot\" id=\"ref-for-dom-gpubindgroup-usedresources-slot①\">[[usedResources]]</a></code> as <var>internalUsage</var>.</p>"
            },
            {
              "html": "<p>Let <var>bindingDescriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupentry-prevalidatedsize-slot\" id=\"ref-for-dom-gpubindgroupentry-prevalidatedsize-slot\">[[prevalidatedSize]]</a></code> be <code>false</code> if the defined <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#binding-member\" id=\"ref-for-binding-member②\">binding member</a> for <var>layoutBinding</var> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer②④\">buffer</a></code> and <var>layoutBinding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer②⑤\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-minbindingsize\" id=\"ref-for-dom-gpubufferbindinglayout-minbindingsize④\">minBindingSize</a></code> is <code>0</code>, and <code>true</code> otherwise.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "effective buffer binding size",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-effective-buffer-binding-size",
      "html": "<strong>Returns:</strong> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#typedefdef-gpusize64\" id=\"ref-for-typedefdef-gpusize64②①\">GPUSize64</a></code>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>binding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-size\" id=\"ref-for-dom-gpubufferbinding-size⑤\">size</a></code> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②②\">provided</a>:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return max(0, <var>binding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-buffer\" id=\"ref-for-dom-gpubufferbinding-buffer⑥\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size⑤\" data-timeline=\"const\">size</a></code> - <var>binding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-offset\" id=\"ref-for-dom-gpubufferbinding-offset⑧\">offset</a></code>);</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>binding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-size\" id=\"ref-for-dom-gpubufferbinding-size⑥\">size</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createPipelineLayout",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createpipelinelayout-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline④⑥\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>pl</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②③\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object⑥\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpupipelinelayout\" id=\"ref-for-gpupipelinelayout①⑨\">GPUPipelineLayout</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑤②\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>pl</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createPipelineLayout",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createpipelinelayout-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑤③\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>limits</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot②④\" data-timeline=\"const\">[[device]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot⑤\" data-timeline=\"const\">[[limits]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>allEntries</var> be the result of concatenating <var>bgl</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayout-descriptor-slot\" id=\"ref-for-dom-gpubindgrouplayout-descriptor-slot①\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutdescriptor-entries\" id=\"ref-for-dom-gpubindgrouplayoutdescriptor-entries⑦\">entries</a></code> for all <var>bgl</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayoutdescriptor-bindgrouplayouts\" id=\"ref-for-dom-gpupipelinelayoutdescriptor-bindgrouplayouts③\">bindGroupLayouts</a></code>.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error①②\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate①⓪\" data-timeline=\"device\">invalidate</a> <var>pl</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p>Every <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubindgrouplayout\" id=\"ref-for-gpubindgrouplayout③③\">GPUBindGroupLayout</a></code> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayoutdescriptor-bindgrouplayouts\" id=\"ref-for-dom-gpupipelinelayoutdescriptor-bindgrouplayouts④\">bindGroupLayouts</a></code> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with⑨\" data-timeline=\"device\">valid to use with</a> <var>this</var> and have a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayout-exclusivepipeline-slot\" id=\"ref-for-dom-gpubindgrouplayout-exclusivepipeline-slot②\">[[exclusivePipeline]]</a></code> of <code>null</code>.</p>\n           </li><li data-md=\"\">\n            <p>The <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size\">size</a> of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayoutdescriptor-bindgrouplayouts\" id=\"ref-for-dom-gpupipelinelayoutdescriptor-bindgrouplayouts⑤\">bindGroupLayouts</a></code> must be ≤ <var>limits</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxbindgroups\" id=\"ref-for-dom-supported-limits-maxbindgroups①\">maxBindGroups</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>allEntries</var> must not <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#exceeds-the-binding-slot-limits\" id=\"ref-for-exceeds-the-binding-slot-limits①⓪\" data-timeline=\"device\">exceed the binding slot limits</a> of <var>limits</var>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set the <var>pl</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayout-bindgrouplayouts-slot\" id=\"ref-for-dom-gpupipelinelayout-bindgrouplayouts-slot③\">[[bindGroupLayouts]]</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayoutdescriptor-bindgrouplayouts\" id=\"ref-for-dom-gpupipelinelayoutdescriptor-bindgrouplayouts⑥\">bindGroupLayouts</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createShaderModule",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createshadermodule-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline④⑦\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>sm</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②④\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object⑦\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpushadermodule\" id=\"ref-for-gpushadermodule①⑧\">GPUShaderModule</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑤④\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>sm</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createShaderModule",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createshadermodule-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑤⑤\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>error</var> be any error that results from <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-module-creation\" id=\"ref-for-shader-module-creation\">shader module creation</a> with the\nWGSL source <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushadermoduledescriptor-code\" id=\"ref-for-dom-gpushadermoduledescriptor-code①\">code</a></code>, or <code>null</code> if no\nerrors occured.</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error①③\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate①①\" data-timeline=\"device\">invalidate</a> <var>sm</var>, and return.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must not be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalid\" id=\"ref-for-abstract-opdef-invalid①③\" data-timeline=\"device\">lost</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>error</var> must not be a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-creation-error\" id=\"ref-for-shader-creation-error\">shader-creation</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#program-error\" id=\"ref-for-program-error\">program error</a>.</p>\n          </li></ul>\n         </div>"
        }
      ]
    },
    {
      "name": "GPUShaderModule.getCompilationInfo",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline④⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var data-timeline=\"content\">contentTimeline</var> be the current <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline④⑨\">Content timeline</a>.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise②\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Issue the <var>synchronization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑤⑥\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUShaderModule.getCompilationInfo",
      "html": "When the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑤⑧\">device timeline</a> becomes informed that <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-module-creation\" id=\"ref-for-shader-module-creation①\">shader module creation</a> has\ncompleted for <var>this</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>messages</var> be a list of any errors, warnings, or informational messages\ngenerated during <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-module-creation\" id=\"ref-for-shader-module-creation②\">shader module creation</a> for <var>this</var>.</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on <var data-timeline=\"content\">contentTimeline</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUShaderModule.getCompilationInfo",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑤⓪\">Content timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>info</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucompilationinfo\" id=\"ref-for-gpucompilationinfo③\">GPUCompilationInfo</a></code>.</p>"
        },
        {
          "html": "For each <var>message</var> in <var>messages</var>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>m</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucompilationmessage\" id=\"ref-for-gpucompilationmessage⑦\">GPUCompilationMessage</a></code>.</p>"
            },
            {
              "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-message\" id=\"ref-for-dom-gpucompilationmessage-message①②\">message</a></code> to be the text of <var>message</var>.</p>"
            },
            {
              "html": "<dl class=\"switch\">\n            <dt data-md=\"\">If <var>message</var> is a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-creation-error\" id=\"ref-for-shader-creation-error②\">shader-creation error</a>:\n            </dt><dd data-md=\"\">\n             <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-type\" id=\"ref-for-dom-gpucompilationmessage-type②\">type</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessagetype-error\" id=\"ref-for-dom-gpucompilationmessagetype-error①\">\"error\"</a></code></p>\n            </dd><dt data-md=\"\">If <var>message</var> is a warning:\n            </dt><dd data-md=\"\">\n             <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-type\" id=\"ref-for-dom-gpucompilationmessage-type③\">type</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessagetype-warning\" id=\"ref-for-dom-gpucompilationmessagetype-warning\">\"warning\"</a></code></p>\n            </dd><dt data-md=\"\">Otherwise:\n            </dt><dd data-md=\"\">\n             <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-type\" id=\"ref-for-dom-gpucompilationmessage-type④\">type</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessagetype-info\" id=\"ref-for-dom-gpucompilationmessagetype-info\">\"info\"</a></code></p>\n           </dd></dl>",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "If message is a shader-creation error:",
                      "steps": [
                        {
                          "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-type\" id=\"ref-for-dom-gpucompilationmessage-type②\">type</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessagetype-error\" id=\"ref-for-dom-gpucompilationmessagetype-error①\">\"error\"</a></code></p>"
                        }
                      ]
                    },
                    {
                      "case": "If message is a warning:",
                      "steps": [
                        {
                          "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-type\" id=\"ref-for-dom-gpucompilationmessage-type③\">type</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessagetype-warning\" id=\"ref-for-dom-gpucompilationmessagetype-warning\">\"warning\"</a></code></p>"
                        }
                      ]
                    },
                    {
                      "case": "Otherwise:",
                      "steps": [
                        {
                          "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-type\" id=\"ref-for-dom-gpucompilationmessage-type④\">type</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessagetype-info\" id=\"ref-for-dom-gpucompilationmessagetype-info\">\"info\"</a></code></p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "html": "<dl class=\"switch\">\n            <dt data-md=\"\">If <var>message</var> is associated with a specific substring or position\nwithin the shader <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushadermoduledescriptor-code\" id=\"ref-for-dom-gpushadermoduledescriptor-code①①\">code</a></code>:\n            </dt><dd data-md=\"\">\n             <ol>\n              <li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linenum\" id=\"ref-for-dom-gpucompilationmessage-linenum⑤\">lineNum</a></code> to the one-based number\nof the first line that the message refers to.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linepos\" id=\"ref-for-dom-gpucompilationmessage-linepos④\">linePos</a></code> to the one-based number\nof the first UTF-16 code units on <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linenum\" id=\"ref-for-dom-gpucompilationmessage-linenum⑥\">lineNum</a></code> that the message refers to, or <code>1</code> if the <var>message</var> refers to\nthe entire line.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-offset\" id=\"ref-for-dom-gpucompilationmessage-offset②\">offset</a></code> to the number of UTF-16\ncode units from the beginning of the shader to beginning of the\nsubstring or position that <var>message</var> refers to.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-length\" id=\"ref-for-dom-gpucompilationmessage-length③\">length</a></code> the length of the\nsubstring in UTF-16 code units that <var>message</var> refers to, or 0\nif <var>message</var> refers to a position</p>\n             </li></ol>\n            </dd><dt data-md=\"\">Otherwise:\n            </dt><dd data-md=\"\">\n             <ol>\n              <li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linenum\" id=\"ref-for-dom-gpucompilationmessage-linenum⑦\">lineNum</a></code> to <code>0</code>.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linepos\" id=\"ref-for-dom-gpucompilationmessage-linepos⑤\">linePos</a></code> to <code>0</code>.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-offset\" id=\"ref-for-dom-gpucompilationmessage-offset③\">offset</a></code> to <code>0</code>.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-length\" id=\"ref-for-dom-gpucompilationmessage-length④\">length</a></code> to <code>0</code>.</p>\n             </li></ol>\n           </dd></dl>",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "If message is associated with a specific substring or position within the shader code:",
                      "steps": [
                        {
                          "html": "<ol>\n              <li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linenum\" id=\"ref-for-dom-gpucompilationmessage-linenum⑤\">lineNum</a></code> to the one-based number\nof the first line that the message refers to.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linepos\" id=\"ref-for-dom-gpucompilationmessage-linepos④\">linePos</a></code> to the one-based number\nof the first UTF-16 code units on <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linenum\" id=\"ref-for-dom-gpucompilationmessage-linenum⑥\">lineNum</a></code> that the message refers to, or <code>1</code> if the <var>message</var> refers to\nthe entire line.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-offset\" id=\"ref-for-dom-gpucompilationmessage-offset②\">offset</a></code> to the number of UTF-16\ncode units from the beginning of the shader to beginning of the\nsubstring or position that <var>message</var> refers to.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-length\" id=\"ref-for-dom-gpucompilationmessage-length③\">length</a></code> the length of the\nsubstring in UTF-16 code units that <var>message</var> refers to, or 0\nif <var>message</var> refers to a position</p>\n             </li></ol>",
                          "rationale": "set",
                          "steps": [
                            {
                              "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linenum\" id=\"ref-for-dom-gpucompilationmessage-linenum⑤\">lineNum</a></code> to the one-based number\nof the first line that the message refers to.</p>"
                            },
                            {
                              "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linepos\" id=\"ref-for-dom-gpucompilationmessage-linepos④\">linePos</a></code> to the one-based number\nof the first UTF-16 code units on <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linenum\" id=\"ref-for-dom-gpucompilationmessage-linenum⑥\">lineNum</a></code> that the message refers to, or <code>1</code> if the <var>message</var> refers to\nthe entire line.</p>"
                            },
                            {
                              "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-offset\" id=\"ref-for-dom-gpucompilationmessage-offset②\">offset</a></code> to the number of UTF-16\ncode units from the beginning of the shader to beginning of the\nsubstring or position that <var>message</var> refers to.</p>"
                            },
                            {
                              "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-length\" id=\"ref-for-dom-gpucompilationmessage-length③\">length</a></code> the length of the\nsubstring in UTF-16 code units that <var>message</var> refers to, or 0\nif <var>message</var> refers to a position</p>"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "case": "Otherwise:",
                      "steps": [
                        {
                          "html": "<ol>\n              <li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linenum\" id=\"ref-for-dom-gpucompilationmessage-linenum⑦\">lineNum</a></code> to <code>0</code>.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linepos\" id=\"ref-for-dom-gpucompilationmessage-linepos⑤\">linePos</a></code> to <code>0</code>.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-offset\" id=\"ref-for-dom-gpucompilationmessage-offset③\">offset</a></code> to <code>0</code>.</p>\n              </li><li data-md=\"\">\n               <p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-length\" id=\"ref-for-dom-gpucompilationmessage-length④\">length</a></code> to <code>0</code>.</p>\n             </li></ol>",
                          "rationale": "set",
                          "steps": [
                            {
                              "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linenum\" id=\"ref-for-dom-gpucompilationmessage-linenum⑦\">lineNum</a></code> to <code>0</code>.</p>"
                            },
                            {
                              "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-linepos\" id=\"ref-for-dom-gpucompilationmessage-linepos⑤\">linePos</a></code> to <code>0</code>.</p>"
                            },
                            {
                              "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-offset\" id=\"ref-for-dom-gpucompilationmessage-offset③\">offset</a></code> to <code>0</code>.</p>"
                            },
                            {
                              "html": "<p>Set <var>m</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationmessage-length\" id=\"ref-for-dom-gpucompilationmessage-length④\">length</a></code> to <code>0</code>.</p>"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append①\">Append</a> <var>m</var> to <var>info</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucompilationinfo-messages\" id=\"ref-for-dom-gpucompilationinfo-messages\">messages</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve⑤\">Resolve</a> <var>promise</var> with <var>info</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUPipelineError constructor",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpupipelineerror-constructor-message",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑤①\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this\">this</a>.<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#domexception-name\" id=\"ref-for-domexception-name\">name</a> to <code>\"GPUPipelineError\"</code>.</p>"
        },
        {
          "html": "<p>Set <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①\">this</a>.<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#domexception-message\" id=\"ref-for-domexception-message\">message</a> to <var>message</var>.</p>"
        },
        {
          "html": "<p>Set <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②\">this</a>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelineerror-reason\" id=\"ref-for-dom-gpupipelineerror-reason①\">reason</a></code> to <var>options</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelineerrorinit-reason\" id=\"ref-for-dom-gpupipelineerrorinit-reason\">reason</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUPipelineError serialization steps",
      "html": "Their <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#serialization-steps\" id=\"ref-for-serialization-steps\">serialization steps</a>, given <var>value</var> and <var>serialized</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Run the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" id=\"ref-for-idl-DOMException②\">DOMException</a></code> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#serialization-steps\" id=\"ref-for-serialization-steps①\">serialization steps</a> given <var>value</var> and <var>serialized</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUPipelineError deserialization steps",
      "html": "Their <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#deserialization-steps\" id=\"ref-for-deserialization-steps\">deserialization steps</a>, given <var>value</var> and <var>serialized</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Run the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" id=\"ref-for-idl-DOMException③\">DOMException</a></code> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#deserialization-steps\" id=\"ref-for-deserialization-steps①\">deserialization steps</a> given <var>value</var> and <var>serialized</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUPipelineBase.getBindGroupLayout",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpupipelinebase-getbindgrouplayout-index-index",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑤②\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>layout</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubindgrouplayout\" id=\"ref-for-gpubindgrouplayout④①\">GPUBindGroupLayout</a></code> object.</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑥⓪\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>layout</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUPipelineBase.getBindGroupLayout",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpupipelinebase-getbindgrouplayout-index-index",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑥①\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following conditions are unsatisfied <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error①⑥\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate①②\" data-timeline=\"device\">invalidate</a> <var>layout</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid\" id=\"ref-for-abstract-opdef-valid⑤\" data-timeline=\"device\">valid</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>index</var> &lt; the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size①\">size</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinebase-layout-slot\" id=\"ref-for-dom-gpupipelinebase-layout-slot①\">[[layout]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayout-bindgrouplayouts-slot\" id=\"ref-for-dom-gpupipelinelayout-bindgrouplayouts-slot⑥\">[[bindGroupLayouts]]</a></code></p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Initialize <var>layout</var> so it is a copy of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinebase-layout-slot\" id=\"ref-for-dom-gpupipelinebase-layout-slot②\">[[layout]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayout-bindgrouplayouts-slot\" id=\"ref-for-dom-gpupipelinelayout-bindgrouplayouts-slot⑦\">[[bindGroupLayouts]]</a></code>[<var>index</var>].</p>"
        }
      ]
    },
    {
      "name": "default pipeline layout creation",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-default-pipeline-layout",
      "html": "To create a <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-default-pipeline-layout\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">default pipeline layout</dfn> for <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpupipelinebase\" id=\"ref-for-gpupipelinebase⑦\">GPUPipelineBase</a></code> <var>pipeline</var>,\nrun the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑥③\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>groupCount</var> be 0.</p>"
        },
        {
          "html": "<p>Let <var>groupDescs</var> be a sequence of <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot⑥\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxbindgroups\" id=\"ref-for-dom-supported-limits-maxbindgroups②\">maxBindGroups</a></code> new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutdescriptor\" id=\"ref-for-dictdef-gpubindgrouplayoutdescriptor④\">GPUBindGroupLayoutDescriptor</a></code> objects.</p>"
        },
        {
          "html": "For each <var>groupDesc</var> in <var>groupDescs</var>:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>groupDesc</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutdescriptor-entries\" id=\"ref-for-dom-gpubindgrouplayoutdescriptor-entries⑧\">entries</a></code> to an empty <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#idl-sequence\" id=\"ref-for-idl-sequence⑧\">sequence</a>.</p>"
            }
          ]
        },
        {
          "html": "For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuprogrammablestage\" id=\"ref-for-gpuprogrammablestage\">GPUProgrammableStage</a></code> <var>stageDesc</var> in the descriptor used to create <var>pipeline</var>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>shaderStage</var> be the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#typedefdef-gpushaderstageflags\" id=\"ref-for-typedefdef-gpushaderstageflags②\">GPUShaderStageFlags</a></code> for the shader stage\nat which <var>stageDesc</var> is used in <var>pipeline</var>.</p>"
            },
            {
              "html": "<p>Let <var>entryPoint</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-get-the-entry-point\" id=\"ref-for-abstract-opdef-get-the-entry-point\" data-timeline=\"device\">get the entry point</a>(<var>shaderStage</var>, <var>stageDesc</var>). <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert①①\">Assert</a> <var>entryPoint</var> is not <code>null</code>.</p>"
            },
            {
              "html": "For each resource <var>resource</var> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#statically-used\" id=\"ref-for-statically-used\" data-timeline=\"const\">statically used</a> by <var>entryPoint</var>:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>group</var> be <var>resource</var>’s \"group\" decoration.</p>"
                },
                {
                  "html": "<p>Let <var>binding</var> be <var>resource</var>’s \"binding\" decoration.</p>"
                },
                {
                  "html": "<p>Let <var>entry</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry③④\">GPUBindGroupLayoutEntry</a></code>.</p>"
                },
                {
                  "html": "<p>Set <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-binding\" id=\"ref-for-dom-gpubindgrouplayoutentry-binding⑦\">binding</a></code> to <var>binding</var>.</p>"
                },
                {
                  "html": "<p>Set <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-visibility\" id=\"ref-for-dom-gpubindgrouplayoutentry-visibility④\">visibility</a></code> to <var>shaderStage</var>.</p>"
                },
                {
                  "html": "If <var>resource</var> is for a sampler binding:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>samplerLayout</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpusamplerbindinglayout\" id=\"ref-for-dictdef-gpusamplerbindinglayout③\">GPUSamplerBindingLayout</a></code>.</p>"
                    },
                    {
                      "html": "<p>Set <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-sampler\" id=\"ref-for-dom-gpubindgrouplayoutentry-sampler⑦\">sampler</a></code> to <var>samplerLayout</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "If <var>resource</var> is for a comparison sampler binding:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>samplerLayout</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpusamplerbindinglayout\" id=\"ref-for-dictdef-gpusamplerbindinglayout④\">GPUSamplerBindingLayout</a></code>.</p>"
                    },
                    {
                      "html": "<p>Set <var>samplerLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerbindinglayout-type\" id=\"ref-for-dom-gpusamplerbindinglayout-type②\">type</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerbindingtype-comparison\" id=\"ref-for-dom-gpusamplerbindingtype-comparison②\">\"comparison\"</a></code>.</p>"
                    },
                    {
                      "html": "<p>Set <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-sampler\" id=\"ref-for-dom-gpubindgrouplayoutentry-sampler⑧\">sampler</a></code> to <var>samplerLayout</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "If <var>resource</var> is for a buffer binding:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>bufferLayout</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubufferbindinglayout\" id=\"ref-for-dictdef-gpubufferbindinglayout⑤\">GPUBufferBindingLayout</a></code>.</p>"
                    },
                    {
                      "html": "<p>Set <var>bufferLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-minbindingsize\" id=\"ref-for-dom-gpubufferbindinglayout-minbindingsize⑤\">minBindingSize</a></code> to <var>resource</var>’s <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#minimum-buffer-binding-size\" id=\"ref-for-minimum-buffer-binding-size②\" data-timeline=\"const\">minimum buffer binding size</a>.</p>"
                    },
                    {
                      "html": "If <var>resource</var> is for a read-only storage buffer:",
                      "rationale": "set",
                      "steps": [
                        {
                          "html": "<p>Set <var>bufferLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-type\" id=\"ref-for-dom-gpubufferbindinglayout-type①③\">type</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindingtype-read-only-storage\" id=\"ref-for-dom-gpubufferbindingtype-read-only-storage⑦\">\"read-only-storage\"</a></code>.</p>"
                        }
                      ]
                    },
                    {
                      "html": "If <var>resource</var> is for a storage buffer:",
                      "rationale": "set",
                      "steps": [
                        {
                          "html": "<p>Set <var>bufferLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-type\" id=\"ref-for-dom-gpubufferbindinglayout-type①④\">type</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindingtype-storage\" id=\"ref-for-dom-gpubufferbindingtype-storage⑧\">\"storage\"</a></code>.</p>"
                        }
                      ]
                    },
                    {
                      "html": "<p>Set <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer②⑥\">buffer</a></code> to <var>bufferLayout</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "If <var>resource</var> is for a sampled texture binding:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>textureLayout</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gputexturebindinglayout\" id=\"ref-for-dictdef-gputexturebindinglayout④\">GPUTextureBindingLayout</a></code>.</p>"
                    },
                    {
                      "html": "Else if the sampled type of <var>resource</var> is:",
                      "rationale": ".switch",
                      "steps": [
                        {
                          "operation": "switch",
                          "steps": [
                            {
                              "case": "f32 and there exists a static use of resource by stageDesc with a textureSample* builtin",
                              "steps": [
                                {
                                  "html": "<p>Set <var>textureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-sampletype\" id=\"ref-for-dom-gputexturebindinglayout-sampletype⑤\">sampleType</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturesampletype-float\" id=\"ref-for-dom-gputexturesampletype-float③\">\"float\"</a></code></p>"
                                }
                              ]
                            },
                            {
                              "case": "f32 otherwise",
                              "steps": [
                                {
                                  "html": "<p>Set <var>textureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-sampletype\" id=\"ref-for-dom-gputexturebindinglayout-sampletype⑥\">sampleType</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturesampletype-unfilterable-float\" id=\"ref-for-dom-gputexturesampletype-unfilterable-float②\">\"unfilterable-float\"</a></code></p>"
                                }
                              ]
                            },
                            {
                              "case": "i32",
                              "steps": [
                                {
                                  "html": "<p>Set <var>textureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-sampletype\" id=\"ref-for-dom-gputexturebindinglayout-sampletype⑦\">sampleType</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturesampletype-sint\" id=\"ref-for-dom-gputexturesampletype-sint①\">\"sint\"</a></code></p>"
                                }
                              ]
                            },
                            {
                              "case": "u32",
                              "steps": [
                                {
                                  "html": "<p>Set <var>textureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-sampletype\" id=\"ref-for-dom-gputexturebindinglayout-sampletype⑧\">sampleType</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturesampletype-uint\" id=\"ref-for-dom-gputexturesampletype-uint①\">\"uint\"</a></code></p>"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "html": "<p>Set <var>textureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-viewdimension\" id=\"ref-for-dom-gputexturebindinglayout-viewdimension③\">viewDimension</a></code> to <var>resource</var>’s dimension.</p>"
                    },
                    {
                      "html": "If <var>resource</var> is for a multisampled texture:",
                      "rationale": "set",
                      "steps": [
                        {
                          "html": "<p>Set <var>textureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-multisampled\" id=\"ref-for-dom-gputexturebindinglayout-multisampled③\">multisampled</a></code> to <code>true</code>.</p>"
                        }
                      ]
                    },
                    {
                      "html": "<p>Set <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture①②\">texture</a></code> to <var>textureLayout</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "If <var>resource</var> is for a storage texture binding:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>storageTextureLayout</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpustoragetexturebindinglayout\" id=\"ref-for-dictdef-gpustoragetexturebindinglayout④\">GPUStorageTextureBindingLayout</a></code>.</p>"
                    },
                    {
                      "html": "<p>Set <var>storageTextureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-format\" id=\"ref-for-dom-gpustoragetexturebindinglayout-format⑤\">format</a></code> to <var>resource</var>’s format.</p>"
                    },
                    {
                      "html": "<p>Set <var>storageTextureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-viewdimension\" id=\"ref-for-dom-gpustoragetexturebindinglayout-viewdimension③\">viewDimension</a></code> to <var>resource</var>’s dimension.</p>"
                    },
                    {
                      "html": "If the access mode is:",
                      "rationale": ".switch",
                      "steps": [
                        {
                          "operation": "switch",
                          "steps": [
                            {
                              "case": "read",
                              "steps": [
                                {
                                  "html": "<p>Set <var>textureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-access\" id=\"ref-for-dom-gpustoragetexturebindinglayout-access③\">access</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetextureaccess-read-only\" id=\"ref-for-dom-gpustoragetextureaccess-read-only②\">\"read-only\"</a></code>.</p>"
                                }
                              ]
                            },
                            {
                              "case": "write",
                              "steps": [
                                {
                                  "html": "<p>Set <var>textureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-access\" id=\"ref-for-dom-gpustoragetexturebindinglayout-access④\">access</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetextureaccess-write-only\" id=\"ref-for-dom-gpustoragetextureaccess-write-only①\">\"write-only\"</a></code>.</p>"
                                }
                              ]
                            },
                            {
                              "case": "read_write",
                              "steps": [
                                {
                                  "html": "<p>Set <var>textureLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-access\" id=\"ref-for-dom-gpustoragetexturebindinglayout-access⑤\">access</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetextureaccess-read-write\" id=\"ref-for-dom-gpustoragetextureaccess-read-write①\">\"read-write\"</a></code>.</p>"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "html": "<p>Set <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture①⑤\">storageTexture</a></code> to <var>storageTextureLayout</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "<p>Set <var>groupCount</var> to max(<var>groupCount</var>, <var>group</var> + 1).</p>"
                },
                {
                  "html": "If <var>groupDescs</var>[<var>group</var>] has an entry <var>previousEntry</var> with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-binding\" id=\"ref-for-dom-gpubindgrouplayoutentry-binding⑧\">binding</a></code> equal to <var>binding</var>:",
                  "rationale": "if",
                  "steps": [
                    {
                      "html": "If <var>entry</var> has different <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-visibility\" id=\"ref-for-dom-gpubindgrouplayoutentry-visibility⑤\">visibility</a></code> than <var>previousEntry</var>:",
                      "rationale": "add",
                      "steps": [
                        {
                          "html": "<p>Add the bits set in <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-visibility\" id=\"ref-for-dom-gpubindgrouplayoutentry-visibility⑥\">visibility</a></code> into <var>previousEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-visibility\" id=\"ref-for-dom-gpubindgrouplayoutentry-visibility⑦\">visibility</a></code></p>"
                        }
                      ]
                    },
                    {
                      "html": "If <var>resource</var> is for a buffer binding and <var>entry</var> has greater <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer②⑦\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-minbindingsize\" id=\"ref-for-dom-gpubufferbindinglayout-minbindingsize⑥\">minBindingSize</a></code> than <var>previousEntry</var>:",
                      "rationale": "set",
                      "steps": [
                        {
                          "html": "<p>Set <var>previousEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer②⑧\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-minbindingsize\" id=\"ref-for-dom-gpubufferbindinglayout-minbindingsize⑦\">minBindingSize</a></code> to <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer②⑨\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-minbindingsize\" id=\"ref-for-dom-gpubufferbindinglayout-minbindingsize⑧\">minBindingSize</a></code>.</p>"
                        }
                      ]
                    },
                    {
                      "html": "If <var>resource</var> is a sampled texture binding and <var>entry</var> has different <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture①③\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-sampletype\" id=\"ref-for-dom-gputexturebindinglayout-sampletype⑨\">sampleType</a></code> than <var>previousEntry</var> and both <var>entry</var> and <var>previousEntry</var> have <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture①④\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-sampletype\" id=\"ref-for-dom-gputexturebindinglayout-sampletype①⓪\">sampleType</a></code> of either <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturesampletype-float\" id=\"ref-for-dom-gputexturesampletype-float④\">\"float\"</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturesampletype-unfilterable-float\" id=\"ref-for-dom-gputexturesampletype-unfilterable-float③\">\"unfilterable-float\"</a></code>:",
                      "rationale": "set",
                      "steps": [
                        {
                          "html": "<p>Set <var>previousEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture①⑤\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-sampletype\" id=\"ref-for-dom-gputexturebindinglayout-sampletype①①\">sampleType</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturesampletype-float\" id=\"ref-for-dom-gputexturesampletype-float⑤\">\"float\"</a></code>.</p>"
                        }
                      ]
                    },
                    {
                      "html": "If any other property is unequal between <var>entry</var> and <var>previousEntry</var>:",
                      "rationale": "return",
                      "steps": [
                        {
                          "html": "<p>Return <code>null</code> (which will cause the creation of the pipeline to fail).</p>"
                        }
                      ]
                    },
                    {
                      "html": "If <var>resource</var> is a storage texture binding, <var>entry</var>.<var>storageTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-access\" id=\"ref-for-dom-gpustoragetexturebindinglayout-access⑥\">access</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetextureaccess-read-write\" id=\"ref-for-dom-gpustoragetextureaccess-read-write②\">\"read-write\"</a></code>, <var>previousEntry</var>.<var>storageTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-access\" id=\"ref-for-dom-gpustoragetexturebindinglayout-access⑦\">access</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetextureaccess-write-only\" id=\"ref-for-dom-gpustoragetextureaccess-write-only②\">\"write-only\"</a></code>, and <var>previousEntry</var>.<var>storageTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-format\" id=\"ref-for-dom-gpustoragetexturebindinglayout-format⑥\">format</a></code> is compatible with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-storage_binding\" id=\"ref-for-dom-gputextureusage-storage_binding⑧\">STORAGE_BINDING</a></code> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetextureaccess-read-write\" id=\"ref-for-dom-gpustoragetextureaccess-read-write③\">\"read-write\"</a></code> according to the <a href=\"https://gpuweb.github.io/gpuweb/#plain-color-formats\">§ 26.1.1 Plain color formats</a> table:",
                      "rationale": "set",
                      "steps": [
                        {
                          "html": "<p>Set <var>previousEntry</var>.<var>storageTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-access\" id=\"ref-for-dom-gpustoragetexturebindinglayout-access⑧\">access</a></code> to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetextureaccess-read-write\" id=\"ref-for-dom-gpustoragetextureaccess-read-write④\">\"read-write\"</a></code>.</p>"
                        }
                      ]
                    }
                  ]
                },
                {
                  "html": "Else",
                  "rationale": "append",
                  "steps": [
                    {
                      "html": "<p>Append <var>entry</var> to <var>groupDescs</var>[<var>group</var>].</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>groupLayouts</var> be a new <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list⑤\">list</a>.</p>"
        },
        {
          "html": "For each <var>i</var> from 0 to <var>groupCount</var> - 1, inclusive:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>groupDesc</var> be <var>groupDescs</var>[<var>i</var>].</p>"
            },
            {
              "html": "<p>Let <var>bindGroupLayout</var> be the result of calling <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-createbindgrouplayout\" id=\"ref-for-dom-gpudevice-createbindgrouplayout③\">createBindGroupLayout()</a></code>(<var>groupDesc</var>).</p>"
            },
            {
              "html": "<p>Set <var>bindGroupLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayout-exclusivepipeline-slot\" id=\"ref-for-dom-gpubindgrouplayout-exclusivepipeline-slot③\">[[exclusivePipeline]]</a></code> to <var>pipeline</var>.</p>"
            },
            {
              "html": "<p>Append <var>bindGroupLayout</var> to <var>groupLayouts</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>desc</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpupipelinelayoutdescriptor\" id=\"ref-for-dictdef-gpupipelinelayoutdescriptor③\">GPUPipelineLayoutDescriptor</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>desc</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayoutdescriptor-bindgrouplayouts\" id=\"ref-for-dom-gpupipelinelayoutdescriptor-bindgrouplayouts⑦\">bindGroupLayouts</a></code> to <var>groupLayouts</var>.</p>"
        },
        {
          "html": "<p>Return <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-createpipelinelayout\" id=\"ref-for-dom-gpudevice-createpipelinelayout③\">createPipelineLayout()</a></code>(<var>desc</var>).</p>"
        }
      ]
    },
    {
      "name": "get the entry point",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-get-the-entry-point",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-get-the-entry-point\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">get the entry point</dfn>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#namespacedef-gpushaderstage\" id=\"ref-for-namespacedef-gpushaderstage⑧\">GPUShaderStage</a></code> <var>stage</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuprogrammablestage\" id=\"ref-for-gpuprogrammablestage⑤\">GPUProgrammableStage</a></code> <var>descriptor</var>), run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑥④\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-entrypoint\" id=\"ref-for-dom-gpuprogrammablestage-entrypoint③\">entryPoint</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②④\">provided</a>:",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-module\" id=\"ref-for-dom-gpuprogrammablestage-module③\">module</a></code> contains an entry point\nwhose name equals <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-entrypoint\" id=\"ref-for-dom-gpuprogrammablestage-entrypoint④\">entryPoint</a></code>,\nand whose shader stage equals <var>stage</var>,\nreturn that entry point.</p>\n        <p>Otherwise, return <code>null</code>.</p>"
            }
          ],
          "additional": [
            {
              "html": "Otherwise:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If there is exactly one entry point in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-module\" id=\"ref-for-dom-gpuprogrammablestage-module④\">module</a></code> whose shader stage equals <var>stage</var>, return that entry point.</p>\n        <p>Otherwise, return <code>null</code>.</p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "validating GPUProgrammableStage",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuprogrammablestage",
      "html": "All of the requirements in the following steps <var>must</var> be met.\n    If any are unmet, return <code>false</code>; otherwise, return <code>true</code>.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-module\" id=\"ref-for-dom-gpuprogrammablestage-module⑤\">module</a></code> <var>must</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid\" id=\"ref-for-abstract-opdef-valid⑥\" data-timeline=\"device\">valid</a>.</p>"
        },
        {
          "html": "<p>Let <var>entryPoint</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-get-the-entry-point\" id=\"ref-for-abstract-opdef-get-the-entry-point②\" data-timeline=\"device\">get the entry point</a>(<var>stage</var>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p><var>entryPoint</var> <var>must</var> not be <code>null</code>.</p>"
        },
        {
          "html": "<p>For each <var>binding</var> that is <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#statically-used\" id=\"ref-for-statically-used②\" data-timeline=\"const\">statically used</a> by <var>entryPoint</var>:</p>\n      <ul>\n       <li data-md=\"\">\n        <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-shader-binding\" id=\"ref-for-abstract-opdef-validating-shader-binding①\" data-timeline=\"const\">validating shader binding</a>(<var>binding</var>, <var>layout</var>) <var>must</var> return <code>true</code>.</p>\n      </li></ul>"
        },
        {
          "html": "For each texture and sampler <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#statically-used\" id=\"ref-for-statically-used③\" data-timeline=\"const\">statically used</a> together by <var>entryPoint</var> in texture sampling calls:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>texture</var> be the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry③⑤\">GPUBindGroupLayoutEntry</a></code> corresponding to the sampled texture in the call.</p>"
            },
            {
              "html": "<p>Let <var>sampler</var> be the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry③⑥\">GPUBindGroupLayoutEntry</a></code> corresponding to the used sampler in the call.</p>"
            },
            {
              "html": "<p>If <var>sampler</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerbindinglayout-type\" id=\"ref-for-dom-gpusamplerbindinglayout-type③\">type</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerbindingtype-filtering\" id=\"ref-for-dom-gpusamplerbindingtype-filtering③\">\"filtering\"</a></code>,\nthen <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-sampletype\" id=\"ref-for-dom-gputexturebindinglayout-sampletype①②\">sampleType</a></code> <var>must</var> be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturesampletype-float\" id=\"ref-for-dom-gputexturesampletype-float⑥\">\"float\"</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>For each <var>key</var> → <var>value</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-constants\" id=\"ref-for-dom-gpuprogrammablestage-constants②\">constants</a></code>:</p>\n      <ol>\n       <li data-md=\"\">\n        <p><var>key</var> <var>must</var> equal the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#pipeline-overridable-constant-identifier-string\" id=\"ref-for-pipeline-overridable-constant-identifier-string②\">pipeline-overridable constant identifier string</a> of\nsome <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#pipeline-overridable\" id=\"ref-for-pipeline-overridable③\">pipeline-overridable</a> constant defined in the shader module <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-module\" id=\"ref-for-dom-gpuprogrammablestage-module⑥\">module</a></code> by the rules defined in <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#identifier-comparison\" id=\"ref-for-identifier-comparison③\">WGSL identifier comparison</a>.\nThe pipeline-overridable constant is <em>not</em> required to be <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#statically-used\" id=\"ref-for-statically-used④\" data-timeline=\"const\">statically used</a> by <var>entryPoint</var>.\nLet the type of that constant be <var>T</var>.</p>\n       </li><li data-md=\"\">\n        <p>Converting the IDL value <var>value</var> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-to-wgsl-type\" id=\"ref-for-abstract-opdef-to-wgsl-type②\" data-timeline=\"device\">to WGSL type</a> <var>T</var> <var>must</var> not throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror①⓪\">TypeError</a></code>.</p>\n      </li></ol>",
          "ignored": [
            "key must equal the pipeline-overridable constant identifier string of some pipeline-overridable constant defined in the shader module descriptor.module by the rules defined in WGSL identifier comparison. The pipeline-overridable constant is not required to be statically used by entryPoint. Let the type of that constant be T. Converting the IDL value value to WGSL type T must not throw a TypeError."
          ]
        },
        {
          "html": "<p>For each <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#pipeline-overridable-constant-identifier-string\" id=\"ref-for-pipeline-overridable-constant-identifier-string③\">pipeline-overridable constant identifier string</a> <var>key</var> which is <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#statically-used\" id=\"ref-for-statically-used⑤\" data-timeline=\"const\">statically used</a> by <var>entryPoint</var>:</p>\n      <ul>\n       <li data-md=\"\">\n        <p>If the pipeline-overridable constant identified by <var>key</var> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#pipeline-overridable-constant-default-value\" id=\"ref-for-pipeline-overridable-constant-default-value\">does not have a default value</a>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-constants\" id=\"ref-for-dom-gpuprogrammablestage-constants③\">constants</a></code> <var>must</var> <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②⑤\">contain</a> <var>key</var>.</p>\n      </li></ul>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#pipeline-creation-error\" id=\"ref-for-pipeline-creation-error\">Pipeline-creation</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#program-error\" id=\"ref-for-program-error①\">program errors</a> <var>must</var> not\nresult from the rules of the <a data-link-type=\"biblio\" href=\"https://gpuweb.github.io/gpuweb/#biblio-wgsl\" title=\"WebGPU Shading Language\">[WGSL]</a> specification.</p>"
        }
      ]
    },
    {
      "name": "validating shader binding",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-shader-binding",
      "html": "If the defined <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#binding-member\" id=\"ref-for-binding-member③\">binding member</a> for <var>entry</var> is:",
      "rationale": ".switch",
      "steps": [
        {
          "operation": "switch",
          "steps": [
            {
              "case": "buffer",
              "steps": [
                {
                  "html": "If <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer③①\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-type\" id=\"ref-for-dom-gpubufferbindinglayout-type①⑤\">type</a></code> is:",
                  "rationale": ".switch",
                  "steps": [
                    {
                      "operation": "switch",
                      "steps": [
                        {
                          "case": "\"uniform\"",
                          "steps": [
                            {
                              "html": "<p><var>variable</var> is declared with address space <code>uniform</code>.</p>"
                            }
                          ]
                        },
                        {
                          "case": "\"storage\"",
                          "steps": [
                            {
                              "html": "<p><var>variable</var> is declared with address space <code>storage</code> and access mode <code>read_write</code>.</p>"
                            }
                          ]
                        },
                        {
                          "case": "\"read-only-storage\"",
                          "steps": [
                            {
                              "html": "<p><var>variable</var> is declared with address space <code>storage</code> and access mode <code>read</code>.</p>"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "case": "sampler",
              "steps": [
                {
                  "html": "If <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-sampler\" id=\"ref-for-dom-gpubindgrouplayoutentry-sampler①⓪\">sampler</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpusamplerbindinglayout-type\" id=\"ref-for-dom-gpusamplerbindinglayout-type④\">type</a></code> is:",
                  "rationale": ".switch",
                  "steps": [
                    {
                      "operation": "switch",
                      "steps": [
                        {
                          "case": "\"filtering\" or \"non-filtering\"",
                          "steps": [
                            {
                              "html": "<p><var>variable</var> has type <code>sampler</code>.</p>"
                            }
                          ]
                        },
                        {
                          "case": "\"comparison\"",
                          "steps": [
                            {
                              "html": "<p><var>variable</var> has type <code>sampler_comparison</code>.</p>"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "case": "texture",
              "steps": [
                {
                  "html": "<p>If, and only if, <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-texture\" id=\"ref-for-dom-gpubindgrouplayoutentry-texture①⑦\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturebindinglayout-multisampled\" id=\"ref-for-dom-gputexturebindinglayout-multisampled④\">multisampled</a></code> is <code>true</code>, <var>variable</var> has type <code>texture_multisampled_2d&lt;T&gt;</code> or <code>texture_depth_multisampled_2d&lt;T&gt;</code>.</p>"
                }
              ]
            },
            {
              "case": "storageTexture",
              "steps": [
                {
                  "html": "If <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture①⑦\">storageTexture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-viewdimension\" id=\"ref-for-dom-gpustoragetexturebindinglayout-viewdimension④\">viewDimension</a></code> is:",
                  "rationale": ".switch",
                  "steps": [
                    {
                      "operation": "switch",
                      "steps": [
                        {
                          "case": "\"1d\"",
                          "steps": [
                            {
                              "html": "<p><var>variable</var> has type <code>texture_storage_1d&lt;T, A&gt;</code>.</p>"
                            }
                          ]
                        },
                        {
                          "case": "\"2d\"",
                          "steps": [
                            {
                              "html": "<p><var>variable</var> has type <code>texture_storage_2d&lt;T, A&gt;</code>.</p>"
                            }
                          ]
                        },
                        {
                          "case": "\"2d-array\"",
                          "steps": [
                            {
                              "html": "<p><var>variable</var> has type <code>texture_storage_2d_array&lt;T, A&gt;</code>.</p>"
                            }
                          ]
                        },
                        {
                          "case": "\"3d\"",
                          "steps": [
                            {
                              "html": "<p><var>variable</var> has type <code>texture_storage_3d&lt;T, A&gt;</code>.</p>"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "minimum buffer binding size",
      "href": "https://gpuweb.github.io/gpuweb/#minimum-buffer-binding-size",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"minimum-buffer-binding-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">minimum buffer binding size</dfn> for a buffer binding variable <var>var</var> is computed as follows:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>T</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#store-type\" id=\"ref-for-store-type\">store type</a> of <var>var</var>.</p>"
        },
        {
          "html": "<p>If <var>T</var> is a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#runtime-sized\" id=\"ref-for-runtime-sized\">runtime-sized</a> array, or contains a runtime-sized array, replace\nthat <code>array&lt;E&gt;</code> with <code>array&lt;E, 1&gt;</code>.</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#sizeof\" id=\"ref-for-sizeof\">SizeOf</a>(<var>T</var>).</p>"
        }
      ]
    },
    {
      "html": "Stages of a compute <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#pipeline\" id=\"ref-for-pipeline⑥\">pipeline</a>:",
      "rationale": "compute",
      "steps": [
        {
          "html": "<p>Compute shader</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createComputePipeline",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createcomputepipeline-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑤④\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>pipeline</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⑤\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object⑧\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucomputepipeline\" id=\"ref-for-gpucomputepipeline①⑦\">GPUComputePipeline</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑥⑤\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>pipeline</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createComputePipeline",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createcomputepipeline-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑥⑥\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>layout</var> be a new <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-default-pipeline-layout\" id=\"ref-for-abstract-opdef-default-pipeline-layout①\" data-timeline=\"device\">default pipeline layout</a> for <var>pipeline</var> if <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinedescriptorbase-layout\" id=\"ref-for-dom-gpupipelinedescriptorbase-layout②\">layout</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuautolayoutmode-auto\" id=\"ref-for-dom-gpuautolayoutmode-auto④\">\"auto\"</a></code>,\nand <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinedescriptorbase-layout\" id=\"ref-for-dom-gpupipelinedescriptorbase-layout③\">layout</a></code> otherwise.</p>"
        },
        {
          "html": "<p>All of the requirements in the following steps <var>must</var> be met.\nIf any are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error①⑦\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate①③\" data-timeline=\"device\">invalidate</a> <var>pipeline</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ol>\n           <li data-md=\"\">\n            <p><var>layout</var> <var>must</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①⓪\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuprogrammablestage\" id=\"ref-for-abstract-opdef-validating-gpuprogrammablestage\" data-timeline=\"device\">validating GPUProgrammableStage</a>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-compute\" id=\"ref-for-dom-gpushaderstage-compute②\">COMPUTE</a></code>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepipelinedescriptor-compute\" id=\"ref-for-dom-gpucomputepipelinedescriptor-compute①\">compute</a></code>, <var>layout</var>) <var>must</var> succeed.</p>\n           </li><li data-md=\"\">\n            <p>Let <var>entryPoint</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-get-the-entry-point\" id=\"ref-for-abstract-opdef-get-the-entry-point③\" data-timeline=\"device\">get the entry point</a>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-compute\" id=\"ref-for-dom-gpushaderstage-compute③\">COMPUTE</a></code>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepipelinedescriptor-compute\" id=\"ref-for-dom-gpucomputepipelinedescriptor-compute②\">compute</a></code>).</p>\n            <p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert①②\">Assert</a> <var>entryPoint</var> is not <code>null</code>.</p>\n           </li><li data-md=\"\">\n            <p>Let <var>workgroupStorageUsed</var> be the sum of <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#roundup\" id=\"ref-for-roundup\">roundUp</a>(16, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#sizeof\" id=\"ref-for-sizeof①\">SizeOf</a>(<var>T</var>)) over each\ntype <var>T</var> of all variables with address space \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#address-spaces-workgroup\" id=\"ref-for-address-spaces-workgroup①\">workgroup</a>\" <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#statically-used\" id=\"ref-for-statically-used⑥\" data-timeline=\"const\">statically used</a> by <var>entryPoint</var>.</p>\n            <p><var>workgroupStorageUsed</var> <var>must</var> be ≤ <var>device</var>.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcomputeworkgroupstoragesize\" id=\"ref-for-dom-supported-limits-maxcomputeworkgroupstoragesize\">maxComputeWorkgroupStorageSize</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>entryPoint</var> <var>must</var> use ≤ <var>device</var>.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcomputeinvocationsperworkgroup\" id=\"ref-for-dom-supported-limits-maxcomputeinvocationsperworkgroup④\">maxComputeInvocationsPerWorkgroup</a></code> per\nworkgroup.</p>\n           </li><li data-md=\"\">\n            <p>Each component of <var>entryPoint</var>’s <code>workgroup_size</code> attribute <var>must</var> be ≤ the corresponding component in\n[<var>device</var>.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcomputeworkgroupsizex\" id=\"ref-for-dom-supported-limits-maxcomputeworkgroupsizex②\">maxComputeWorkgroupSizeX</a></code>, <var>device</var>.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcomputeworkgroupsizey\" id=\"ref-for-dom-supported-limits-maxcomputeworkgroupsizey②\">maxComputeWorkgroupSizeY</a></code>, <var>device</var>.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcomputeworkgroupsizez\" id=\"ref-for-dom-supported-limits-maxcomputeworkgroupsizez②\">maxComputeWorkgroupSizeZ</a></code>].</p>\n          </li></ol>\n         </div>",
          "ignored": [
            "layout must be valid to use with this. validating GPUProgrammableStage(COMPUTE, descriptor.compute, layout) must succeed. Let entryPoint be get the entry point(COMPUTE, descriptor.compute). Assert entryPoint is not null. Let workgroupStorageUsed be the sum of roundUp(16, SizeOf(T)) over each type T of all variables with address space \"workgroup\" statically used by entryPoint. workgroupStorageUsed must be ≤ device.limits.maxComputeWorkgroupStorageSize. entryPoint must use ≤ device.limits.maxComputeInvocationsPerWorkgroup per workgroup. Each component of entryPoint’s workgroup_size attribute must be ≤ the corresponding component in [device.limits.maxComputeWorkgroupSizeX, device.limits.maxComputeWorkgroupSizeY, device.limits.maxComputeWorkgroupSizeZ]."
          ]
        },
        {
          "html": "<p>If any <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#pipeline-creation-error\" id=\"ref-for-pipeline-creation-error①\">pipeline-creation</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#uncategorized-error\" id=\"ref-for-uncategorized-error①\">uncategorized errors</a> result from the implementation of pipeline creation, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-an-internal-error\" id=\"ref-for-abstract-opdef-generate-an-internal-error②\" data-timeline=\"device\">generate an internal error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate①④\" data-timeline=\"device\">invalidate</a> <var>pipeline</var>, and stop.</p>"
        },
        {
          "html": "<p>Set <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinebase-layout-slot\" id=\"ref-for-dom-gpupipelinebase-layout-slot③\">[[layout]]</a></code> to <var>layout</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createComputePipelineAsync",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createcomputepipelineasync-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑤⑤\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var data-timeline=\"content\">contentTimeline</var> be the current <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑤⑥\">Content timeline</a>.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise③\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑥⑦\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createComputePipelineAsync",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createcomputepipelineasync-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑥⑧\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>pipeline</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucomputepipeline\" id=\"ref-for-gpucomputepipeline②①\">GPUComputePipeline</a></code> created as if <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-createcomputepipeline\" id=\"ref-for-dom-gpudevice-createcomputepipeline⑧\">createComputePipeline()</a></code> was called with <var>descriptor</var>;</p>"
        },
        {
          "html": "When <var>pipeline</var> is ready to be used or has been <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate①⑤\" data-timeline=\"device\">invalidated</a>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>valid</var> be <var>pipeline</var>’s <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid\" id=\"ref-for-abstract-opdef-valid⑦\" data-timeline=\"device\">valid</a> state.</p>"
            },
            {
              "html": "<p>Issue the subsequent steps on <var data-timeline=\"content\">contentTimeline</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GPUDevice.createComputePipelineAsync",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createcomputepipelineasync-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑤⑦\">Content timeline</a> steps:",
      "rationale": "if",
      "steps": [
        {
          "html": "If <var>valid</var> is...",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "true",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve⑥\">Resolve</a> <var>promise</var> with <var>pipeline</var>.</p>"
                    }
                  ]
                },
                {
                  "case": "false due to an internal error",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject⑤\">Reject</a> <var>promise</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpupipelineerror\" id=\"ref-for-gpupipelineerror⑦\">GPUPipelineError</a></code> with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelineerrorinit-reason\" id=\"ref-for-dom-gpupipelineerrorinit-reason①\">reason</a></code> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelineerrorreason-internal\" id=\"ref-for-dom-gpupipelineerrorreason-internal①\">\"internal\"</a></code>.</p>"
                    }
                  ]
                },
                {
                  "case": "false due to a validation error",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject⑥\">Reject</a> <var>promise</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpupipelineerror\" id=\"ref-for-gpupipelineerror⑧\">GPUPipelineError</a></code> with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelineerrorinit-reason\" id=\"ref-for-dom-gpupipelineerrorinit-reason②\">reason</a></code> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelineerrorreason-validation\" id=\"ref-for-dom-gpupipelineerrorreason-validation①\">\"validation\"</a></code>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUDevice.createRenderPipeline",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createrenderpipeline-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑤⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment②\">fragment</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②⑦\">provided</a>:",
          "rationale": "for",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate\">For each</a> non-<code>null</code> <var>colorState</var> of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment③\">fragment</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpufragmentstate-targets\" id=\"ref-for-dom-gpufragmentstate-targets②\">targets</a></code>:</p>\n           <ol>\n            <li data-md=\"\">\n             <p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⑥\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features\" id=\"ref-for-abstract-opdef-validate-texture-format-required-features④\" data-timeline=\"content\">Validate texture format required features</a> of <var>colorState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucolortargetstate-format\" id=\"ref-for-dom-gpucolortargetstate-format\">format</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot②⑤\" data-timeline=\"const\">[[device]]</a></code>.</p>\n           </li></ol>",
              "ignored": [
                "? Validate texture format required features of colorState.format with this.[[device]]."
              ]
            }
          ]
        },
        {
          "html": "<p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-depthstencil\" id=\"ref-for-dom-gpurenderpipelinedescriptor-depthstencil①\">depthStencil</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②⑧\">provided</a>:</p>\n         <ol>\n          <li data-md=\"\">\n           <p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⑦\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features\" id=\"ref-for-abstract-opdef-validate-texture-format-required-features⑤\" data-timeline=\"content\">Validate texture format required features</a> of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-depthstencil\" id=\"ref-for-dom-gpurenderpipelinedescriptor-depthstencil②\">depthStencil</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-format\" id=\"ref-for-dom-gpudepthstencilstate-format\">format</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot②⑥\" data-timeline=\"const\">[[device]]</a></code>.</p>\n         </li></ol>",
          "ignored": [
            "? Validate texture format required features of descriptor.depthStencil.format with this.[[device]]."
          ]
        },
        {
          "html": "<p>Let <var>pipeline</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⑧\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object⑨\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpurenderpipeline\" id=\"ref-for-gpurenderpipeline①⑨\">GPURenderPipeline</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑥⑨\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>pipeline</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createRenderPipeline",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createrenderpipeline-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑦⓪\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>layout</var> be a new <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-default-pipeline-layout\" id=\"ref-for-abstract-opdef-default-pipeline-layout②\" data-timeline=\"device\">default pipeline layout</a> for <var>pipeline</var> if <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinedescriptorbase-layout\" id=\"ref-for-dom-gpupipelinedescriptorbase-layout④\">layout</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuautolayoutmode-auto\" id=\"ref-for-dom-gpuautolayoutmode-auto⑤\">\"auto\"</a></code>,\nand <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinedescriptorbase-layout\" id=\"ref-for-dom-gpupipelinedescriptorbase-layout⑤\">layout</a></code> otherwise.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied: <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error①⑨\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate①⑥\" data-timeline=\"device\">invalidate</a> <var>pipeline</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>layout</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①①\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpurenderpipelinedescriptor\" id=\"ref-for-abstract-opdef-validating-gpurenderpipelinedescriptor\" data-timeline=\"device\">validating GPURenderPipelineDescriptor</a>(<var>descriptor</var>, <var>layout</var>, <var>this</var>) succeeds.</p>\n           </li><li data-md=\"\">\n            <p><var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayout-bindgrouplayouts-slot\" id=\"ref-for-dom-gpupipelinelayout-bindgrouplayouts-slot⑨\">[[bindGroupLayouts]]</a></code>.length + <var>vertexBufferCount</var> is ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot②⑦\" data-timeline=\"const\">[[device]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot⑦\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxbindgroupsplusvertexbuffers\" id=\"ref-for-dom-supported-limits-maxbindgroupsplusvertexbuffers②\">maxBindGroupsPlusVertexBuffers</a></code>,\nwhere <var>vertexBufferCount</var> is the maximum index in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-vertex\" id=\"ref-for-dom-gpurenderpipelinedescriptor-vertex①\">vertex</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstate-buffers\" id=\"ref-for-dom-gpuvertexstate-buffers③\">buffers</a></code> that is not <code>undefined</code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>If any <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#pipeline-creation-error\" id=\"ref-for-pipeline-creation-error②\">pipeline-creation</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#uncategorized-error\" id=\"ref-for-uncategorized-error③\">uncategorized errors</a> result from the implementation of pipeline creation, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-an-internal-error\" id=\"ref-for-abstract-opdef-generate-an-internal-error④\" data-timeline=\"device\">generate an internal error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate①⑦\" data-timeline=\"device\">invalidate</a> <var>pipeline</var>, and stop.</p>"
        },
        {
          "html": "<p>Set <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-descriptor-slot\" id=\"ref-for-dom-gpurenderpipeline-descriptor-slot\">[[descriptor]]</a></code> to <var>descriptor</var>.</p>"
        },
        {
          "html": "<p>Set <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-writesdepth-slot\" id=\"ref-for-dom-gpurenderpipeline-writesdepth-slot\">[[writesDepth]]</a></code> to false.</p>"
        },
        {
          "html": "<p>Set <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-writesstencil-slot\" id=\"ref-for-dom-gpurenderpipeline-writesstencil-slot\">[[writesStencil]]</a></code> to false.</p>"
        },
        {
          "html": "<p>Let <var>depthStencil</var> be <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-depthstencil\" id=\"ref-for-dom-gpurenderpipelinedescriptor-depthstencil③\">depthStencil</a></code>.</p>"
        },
        {
          "html": "If <var>depthStencil</var> is not null:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>depthStencil</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthwriteenabled\" id=\"ref-for-dom-gpudepthstencilstate-depthwriteenabled\">depthWriteEnabled</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②⑨\">provided</a>:",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-writesdepth-slot\" id=\"ref-for-dom-gpurenderpipeline-writesdepth-slot①\">[[writesDepth]]</a></code> to <var>depthStencil</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthwriteenabled\" id=\"ref-for-dom-gpudepthstencilstate-depthwriteenabled①\">depthWriteEnabled</a></code>.</p>"
                }
              ]
            },
            {
              "html": "If <var>depthStencil</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-stencilwritemask\" id=\"ref-for-dom-gpudepthstencilstate-stencilwritemask\">stencilWriteMask</a></code> is not 0:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>stencilFront</var> be <var>depthStencil</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-stencilfront\" id=\"ref-for-dom-gpudepthstencilstate-stencilfront\">stencilFront</a></code>.</p>"
                },
                {
                  "html": "<p>Let <var>stencilBack</var> be <var>depthStencil</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-stencilback\" id=\"ref-for-dom-gpudepthstencilstate-stencilback\">stencilBack</a></code>.</p>"
                },
                {
                  "html": "<p>Let <var>cullMode</var> be <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-primitive\" id=\"ref-for-dom-gpurenderpipelinedescriptor-primitive①\">primitive</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-cullmode\" id=\"ref-for-dom-gpuprimitivestate-cullmode\">cullMode</a></code>.</p>"
                },
                {
                  "html": "If <var>cullMode</var> is not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucullmode-front\" id=\"ref-for-dom-gpucullmode-front\">\"front\"</a></code>, and any of <var>stencilFront</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustencilfacestate-passop\" id=\"ref-for-dom-gpustencilfacestate-passop\">passOp</a></code>, <var>stencilFront</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustencilfacestate-depthfailop\" id=\"ref-for-dom-gpustencilfacestate-depthfailop\">depthFailOp</a></code>, or <var>stencilFront</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustencilfacestate-failop\" id=\"ref-for-dom-gpustencilfacestate-failop\">failOp</a></code> is not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustenciloperation-keep\" id=\"ref-for-dom-gpustenciloperation-keep\">\"keep\"</a></code>:",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-writesstencil-slot\" id=\"ref-for-dom-gpurenderpipeline-writesstencil-slot①\">[[writesStencil]]</a></code> to true.</p>"
                    }
                  ]
                },
                {
                  "html": "If <var>cullMode</var> is not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucullmode-back\" id=\"ref-for-dom-gpucullmode-back\">\"back\"</a></code>, and any of <var>stencilBack</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustencilfacestate-passop\" id=\"ref-for-dom-gpustencilfacestate-passop①\">passOp</a></code>, <var>stencilBack</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustencilfacestate-depthfailop\" id=\"ref-for-dom-gpustencilfacestate-depthfailop①\">depthFailOp</a></code>, or <var>stencilBack</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustencilfacestate-failop\" id=\"ref-for-dom-gpustencilfacestate-failop①\">failOp</a></code> is not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustenciloperation-keep\" id=\"ref-for-dom-gpustenciloperation-keep①\">\"keep\"</a></code>:",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-writesstencil-slot\" id=\"ref-for-dom-gpurenderpipeline-writesstencil-slot②\">[[writesStencil]]</a></code> to true.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Set <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinebase-layout-slot\" id=\"ref-for-dom-gpupipelinebase-layout-slot④\">[[layout]]</a></code> to <var>layout</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createRenderPipelineAsync",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createrenderpipelineasync-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑤⑨\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var data-timeline=\"content\">contentTimeline</var> be the current <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑥⓪\">Content timeline</a>.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise④\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑦①\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createRenderPipelineAsync",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createrenderpipelineasync-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑦②\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>pipeline</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpurenderpipeline\" id=\"ref-for-gpurenderpipeline②③\">GPURenderPipeline</a></code> created as if <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-createrenderpipeline\" id=\"ref-for-dom-gpudevice-createrenderpipeline⑨\">createRenderPipeline()</a></code> was called with <var>descriptor</var>;</p>"
        },
        {
          "html": "When <var>pipeline</var> is ready to be used or has been <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate①⑧\" data-timeline=\"device\">invalidated</a>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>valid</var> be <var>pipeline</var>’s <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid\" id=\"ref-for-abstract-opdef-valid⑧\" data-timeline=\"device\">valid</a> state.</p>"
            },
            {
              "html": "<p>Issue the subsequent steps on <var data-timeline=\"content\">contentTimeline</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GPUDevice.createRenderPipelineAsync",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createrenderpipelineasync-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑥①\">Content timeline</a> steps:",
      "rationale": "if",
      "steps": [
        {
          "html": "If <var>valid</var> is...",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "true",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve⑦\">Resolve</a> <var>promise</var> with <var>pipeline</var>.</p>"
                    }
                  ]
                },
                {
                  "case": "false due to an internal error",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject⑦\">Reject</a> <var>promise</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpupipelineerror\" id=\"ref-for-gpupipelineerror①⓪\">GPUPipelineError</a></code> with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelineerrorinit-reason\" id=\"ref-for-dom-gpupipelineerrorinit-reason③\">reason</a></code> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelineerrorreason-internal\" id=\"ref-for-dom-gpupipelineerrorreason-internal②\">\"internal\"</a></code>.</p>"
                    }
                  ]
                },
                {
                  "case": "false due to a validation error",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject⑧\">Reject</a> <var>promise</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpupipelineerror\" id=\"ref-for-gpupipelineerror①①\">GPUPipelineError</a></code> with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelineerrorinit-reason\" id=\"ref-for-dom-gpupipelineerrorinit-reason④\">reason</a></code> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelineerrorreason-validation\" id=\"ref-for-dom-gpupipelineerrorreason-validation②\">\"validation\"</a></code>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "validating GPURenderPipelineDescriptor",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpurenderpipelinedescriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑦③\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <code>true</code> if all of the following conditions are satisfied:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuvertexstate\" id=\"ref-for-abstract-opdef-validating-gpuvertexstate\" data-timeline=\"device\">validating GPUVertexState</a>(<var>device</var>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-vertex\" id=\"ref-for-dom-gpurenderpipelinedescriptor-vertex②\">vertex</a></code>, <var>layout</var>) succeeds.</p>\n        </li><li data-md=\"\">\n         <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment④\">fragment</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③⓪\">provided</a>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpufragmentstate\" id=\"ref-for-abstract-opdef-validating-gpufragmentstate\" data-timeline=\"device\">validating GPUFragmentState</a>(<var>device</var>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment⑤\">fragment</a></code>, <var>layout</var>) succeeds.</p>\n          </li><li data-md=\"\">\n           <p>If the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values-sample_mask\" id=\"ref-for-built-in-values-sample_mask\">sample_mask</a> builtin is a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-stage-output\" id=\"ref-for-shader-stage-output\">shader stage output</a> of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment⑥\">fragment</a></code>:</p>\n           <ul>\n            <li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-multisample\" id=\"ref-for-dom-gpurenderpipelinedescriptor-multisample①\">multisample</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumultisamplestate-alphatocoverageenabled\" id=\"ref-for-dom-gpumultisamplestate-alphatocoverageenabled\">alphaToCoverageEnabled</a></code> is <code>false</code>.</p>\n           </li></ul>\n          </li><li data-md=\"\">\n           <p>If the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values-frag_depth\" id=\"ref-for-built-in-values-frag_depth\">frag_depth</a> builtin is a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-stage-output\" id=\"ref-for-shader-stage-output①\">shader stage output</a> of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment⑦\">fragment</a></code>:</p>\n           <ul>\n            <li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-depthstencil\" id=\"ref-for-dom-gpurenderpipelinedescriptor-depthstencil④\">depthStencil</a></code> must be <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③①\">provided</a>, and <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-depthstencil\" id=\"ref-for-dom-gpurenderpipelinedescriptor-depthstencil⑤\">depthStencil</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-format\" id=\"ref-for-dom-gpudepthstencilstate-format①\">format</a></code> must have a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-depth\" id=\"ref-for-aspect-depth②\">depth</a> aspect.</p>\n           </li></ul>\n         </li></ul>\n        </li><li data-md=\"\">\n         <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuprimitivestate\" id=\"ref-for-abstract-opdef-validating-gpuprimitivestate\" data-timeline=\"device\">validating GPUPrimitiveState</a>(<var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-primitive\" id=\"ref-for-dom-gpurenderpipelinedescriptor-primitive②\">primitive</a></code>, <var>device</var>) succeeds.</p>\n        </li><li data-md=\"\">\n         <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-depthstencil\" id=\"ref-for-dom-gpurenderpipelinedescriptor-depthstencil⑥\">depthStencil</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③②\">provided</a>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpudepthstencilstate\" id=\"ref-for-abstract-opdef-validating-gpudepthstencilstate\" data-timeline=\"device\">validating GPUDepthStencilState</a>(<var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-depthstencil\" id=\"ref-for-dom-gpurenderpipelinedescriptor-depthstencil⑦\">depthStencil</a></code>) succeeds.</p>\n         </li></ul>\n        </li><li data-md=\"\">\n         <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpumultisamplestate\" id=\"ref-for-abstract-opdef-validating-gpumultisamplestate\" data-timeline=\"device\">validating GPUMultisampleState</a>(<var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-multisample\" id=\"ref-for-dom-gpurenderpipelinedescriptor-multisample②\">multisample</a></code>) succeeds.</p>\n        </li><li data-md=\"\">\n         <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-multisample\" id=\"ref-for-dom-gpurenderpipelinedescriptor-multisample③\">multisample</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumultisamplestate-alphatocoverageenabled\" id=\"ref-for-dom-gpumultisamplestate-alphatocoverageenabled①\">alphaToCoverageEnabled</a></code> is true:</p>\n         <ol>\n          <li data-md=\"\">\n           <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment⑧\">fragment</a></code> must be <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③③\">provided</a>.</p>\n          </li><li data-md=\"\">\n           <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment⑨\">fragment</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpufragmentstate-targets\" id=\"ref-for-dom-gpufragmentstate-targets③\">targets</a></code>[0]\nmust <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-contain\" id=\"ref-for-list-contain②\">exist</a> and be non-null.</p>\n          </li><li data-md=\"\">\n           <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment①⓪\">fragment</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpufragmentstate-targets\" id=\"ref-for-dom-gpufragmentstate-targets④\">targets</a></code>[0].<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucolortargetstate-format\" id=\"ref-for-dom-gpucolortargetstate-format①\">format</a></code> must be a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat\" id=\"ref-for-enumdef-gputextureformat②⑥\">GPUTextureFormat</a></code> which is <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#blendable\" id=\"ref-for-blendable\">blendable</a> and has an alpha channel.</p>\n         </li></ol>\n        </li><li data-md=\"\">\n         <p>There must exist at least one attachment, either:</p>\n         <ul>\n          <li data-md=\"\">\n           <p>A non-<code>null</code> value in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment①①\">fragment</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpufragmentstate-targets\" id=\"ref-for-dom-gpufragmentstate-targets⑤\">targets</a></code>, or</p>\n          </li><li data-md=\"\">\n           <p>A <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-depthstencil\" id=\"ref-for-dom-gpurenderpipelinedescriptor-depthstencil⑧\">depthStencil</a></code>.</p>\n         </li></ul>\n        </li><li data-md=\"\">\n         <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-inter-stage-interfaces\" id=\"ref-for-abstract-opdef-validating-inter-stage-interfaces\" data-timeline=\"device\">validating inter-stage interfaces</a>(<var>device</var>, <var>descriptor</var>) returns <code>true</code>.</p>\n       </li></ul>\n      </div>",
          "ignored": [
            "descriptor.fragment must be provided. descriptor.fragment.targets[0] must exist and be non-null. descriptor.fragment.targets[0].format must be a GPUTextureFormat which is blendable and has an alpha channel."
          ]
        }
      ]
    },
    {
      "name": "validating inter-stage interfaces",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-inter-stage-interfaces",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑦④\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>maxVertexShaderOutputComponents</var> be <var>device</var>.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxinterstageshadercomponents\" id=\"ref-for-dom-supported-limits-maxinterstageshadercomponents\">maxInterStageShaderComponents</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>maxVertexShaderOutputVariables</var> be <var>device</var>.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxinterstageshadervariables\" id=\"ref-for-dom-supported-limits-maxinterstageshadervariables\">maxInterStageShaderVariables</a></code>.</p>"
        },
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-primitive\" id=\"ref-for-dom-gpurenderpipelinedescriptor-primitive③\">primitive</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-topology\" id=\"ref-for-dom-gpuprimitivestate-topology\">topology</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivetopology-point-list\" id=\"ref-for-dom-gpuprimitivetopology-point-list\">\"point-list\"</a></code>:",
          "rationale": "decrement",
          "steps": [
            {
              "html": "<p>Decrement <var>maxVertexShaderOutputComponents</var> by 1.</p>"
            }
          ]
        },
        {
          "html": "If <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values-clip_distances\" id=\"ref-for-built-in-values-clip_distances\">clip_distances</a> is declared in the output of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-vertex\" id=\"ref-for-dom-gpurenderpipelinedescriptor-vertex③\">vertex</a></code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>clipDistancesSize</var> be the array size of <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values-clip_distances\" id=\"ref-for-built-in-values-clip_distances①\">clip_distances</a>.",
              "rationale": "decrement",
              "steps": [
                {
                  "html": "<p>Decrement <var>maxVertexShaderOutputComponents</var> by <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#roundup\" id=\"ref-for-roundup①\">roundUp</a>(4, <var>clipDistancesSize</var>).</p>"
                },
                {
                  "html": "<p>Decrement <var>maxVertexShaderOutputVariables</var> by (<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#roundup\" id=\"ref-for-roundup②\">roundUp</a>(4, <var>clipDistancesSize</var>) / 4).</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <code>false</code> if any of the following requirements are unmet:</p>\n      <ul>\n       <li data-md=\"\">\n        <p>There must be no more than <var>maxVertexShaderOutputComponents</var> scalar\ncomponents across all user-defined outputs for <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-vertex\" id=\"ref-for-dom-gpurenderpipelinedescriptor-vertex④\">vertex</a></code>.\nEach user-defined output of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-vertex\" id=\"ref-for-dom-gpurenderpipelinedescriptor-vertex⑤\">vertex</a></code> consumes 4 scalar components.</p>\n       </li><li data-md=\"\">\n        <p>The <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#input-output-locations\" id=\"ref-for-input-output-locations\">location</a> of each user-defined output of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-vertex\" id=\"ref-for-dom-gpurenderpipelinedescriptor-vertex⑥\">vertex</a></code> must be\n&lt; <var>maxVertexShaderOutputVariables</var>.</p>\n      </li></ul>"
        },
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment①②\">fragment</a></code> <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③④\">is provided</a>:",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>maxFragmentShaderInputComponents</var> be <var>device</var>.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxinterstageshadercomponents\" id=\"ref-for-dom-supported-limits-maxinterstageshadercomponents①\">maxInterStageShaderComponents</a></code>.",
              "rationale": "if",
              "steps": [
                {
                  "html": "If the <code>front_facing</code> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values\" id=\"ref-for-built-in-values\">builtin</a> is an input of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment①③\">fragment</a></code>:",
                  "rationale": "decrement",
                  "steps": [
                    {
                      "html": "<p>Decrement <var>maxFragmentShaderInputComponents</var> by 1.</p>"
                    }
                  ]
                },
                {
                  "html": "If the <code>sample_index</code> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values\" id=\"ref-for-built-in-values①\">builtin</a> is an input of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment①④\">fragment</a></code>:",
                  "rationale": "decrement",
                  "steps": [
                    {
                      "html": "<p>Decrement <var>maxFragmentShaderInputComponents</var> by 1.</p>"
                    }
                  ]
                },
                {
                  "html": "If the <code>sample_mask</code> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values\" id=\"ref-for-built-in-values②\">builtin</a> is an input of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment①⑤\">fragment</a></code>:",
                  "rationale": "decrement",
                  "steps": [
                    {
                      "html": "<p>Decrement <var>maxFragmentShaderInputComponents</var> by 1.</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "<p>Return <code>false</code> if any of the following requirements are unmet:</p>\n        <ul>\n         <li data-md=\"\">\n          <p>There must be no more than <var>maxFragmentShaderInputComponents</var> scalar\ncomponents across all user-defined inputs for <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment①⑥\">fragment</a></code>.\nEach user-defined input of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment①⑦\">fragment</a></code> consumes 4 scalar components.</p>\n         </li><li data-md=\"\">\n          <p>For each user-defined input of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment①⑧\">fragment</a></code> there\nmust be a user-defined output of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-vertex\" id=\"ref-for-dom-gpurenderpipelinedescriptor-vertex⑦\">vertex</a></code> that <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#input-output-locations\" id=\"ref-for-input-output-locations①\">location</a>, type, and <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#interpolation\" id=\"ref-for-interpolation\">interpolation</a> of the input.</p>\n          \n        </li></ul>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert①③\">Assert</a> that the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#input-output-locations\" id=\"ref-for-input-output-locations②\">location</a> of each user-defined input of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment①⑨\">fragment</a></code> is less\nthan <var>device</var>.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxinterstageshadervariables\" id=\"ref-for-dom-supported-limits-maxinterstageshadervariables①\">maxInterStageShaderVariables</a></code> (resulting from the above rules).</p>"
            }
          ]
        },
        {
          "html": "<p>Return <code>true</code>.</p>"
        }
      ]
    },
    {
      "name": "validating GPUPrimitiveState",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuprimitivestate",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑦⑤\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <code>true</code> if all of the following conditions are satisfied:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-topology\" id=\"ref-for-dom-gpuprimitivestate-topology②\">topology</a></code> is not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivetopology-line-strip\" id=\"ref-for-dom-gpuprimitivetopology-line-strip①\">\"line-strip\"</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivetopology-triangle-strip\" id=\"ref-for-dom-gpuprimitivetopology-triangle-strip①\">\"triangle-strip\"</a></code>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-stripindexformat\" id=\"ref-for-dom-gpuprimitivestate-stripindexformat①\">stripIndexFormat</a></code> must not be <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③⑤\">provided</a>.</p>\n         </li></ul>\n        </li><li data-md=\"\">\n         <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-unclippeddepth\" id=\"ref-for-dom-gpuprimitivestate-unclippeddepth①\">unclippedDepth</a></code> is <code>true</code>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#depth-clip-control\" id=\"ref-for-depth-clip-control②\">\"depth-clip-control\"</a></code> must be <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#enabled-for\" id=\"ref-for-enabled-for\" data-timeline=\"const\">enabled for</a> <var>device</var>.</p>\n         </li></ul>\n       </li></ul>\n      </div>"
        }
      ]
    },
    {
      "name": "validating GPUMultisampleState",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpumultisamplestate",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑦⑥\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <code>true</code> if all of the following conditions are satisfied:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumultisamplestate-count\" id=\"ref-for-dom-gpumultisamplestate-count①\">count</a></code> must be either 1 or 4.</p>\n        </li><li data-md=\"\">\n         <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumultisamplestate-alphatocoverageenabled\" id=\"ref-for-dom-gpumultisamplestate-alphatocoverageenabled③\">alphaToCoverageEnabled</a></code> is <code>true</code>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumultisamplestate-count\" id=\"ref-for-dom-gpumultisamplestate-count②\">count</a></code> &gt; 1.</p>\n         </li></ul>\n       </li></ul>\n      </div>"
        }
      ]
    },
    {
      "name": "validating GPUFragmentState",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpufragmentstate",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑦⑦\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#enumdef-gputexturesampletype\" id=\"ref-for-enumdef-gputexturesampletype③\">GPUTextureSampleType</a></code>s for <var>colorState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucolortargetstate-format\" id=\"ref-for-dom-gpucolortargetstate-format⑤\">format</a></code> (defined in <a href=\"https://gpuweb.github.io/gpuweb/#texture-format-caps\">§ 26.1 Texture Format Capabilities</a>) are:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"float\" and/or \"unfilterable-float\"",
                  "steps": [
                    {
                      "html": "<p><var>output</var> must have a floating-point scalar type.</p>"
                    }
                  ]
                },
                {
                  "case": "\"sint\"",
                  "steps": [
                    {
                      "html": "<p><var>output</var> must have a signed integer scalar type.</p>"
                    }
                  ]
                },
                {
                  "case": "\"uint\"",
                  "steps": [
                    {
                      "html": "<p><var>output</var> must have an unsigned integer scalar type.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Validating GPUFragmentState’s color attachment bytes per sample",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpufragmentstates-color-attachment-bytes-per-sample",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑦⑧\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>formats</var> be an empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list⑥\">list</a>&lt;<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat\" id=\"ref-for-enumdef-gputextureformat②⑦\">GPUTextureFormat</a></code>?&gt;</p>"
        },
        {
          "html": "For each <var>target</var> in <var>targets</var>:",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>target</var> is <code>undefined</code>, continue.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append②\">Append</a> <var>target</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucolortargetstate-format\" id=\"ref-for-dom-gpucolortargetstate-format⑥\">format</a></code> to <var>formats</var>.</p>"
            }
          ]
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-calculating-color-attachment-bytes-per-sample\" id=\"ref-for-abstract-opdef-calculating-color-attachment-bytes-per-sample\" data-timeline=\"const\">Calculating color attachment bytes per sample</a>(<var>formats</var>) must be ≤ <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot⑨\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcolorattachmentbytespersample\" id=\"ref-for-dom-supported-limits-maxcolorattachmentbytespersample①\">maxColorAttachmentBytesPerSample</a></code>.</p>"
        }
      ]
    },
    {
      "name": "biased fragment depth",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-biased-fragment-depth",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-biased-fragment-depth\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">biased fragment depth</dfn> for a fragment being written to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-depthstencilattachment\" id=\"ref-for-dom-gpurenderpassdescriptor-depthstencilattachment⑧\">depthStencilAttachment</a></code> <var>attachment</var> when drawing using <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpudepthstencilstate\" id=\"ref-for-dictdef-gpudepthstencilstate⑧\">GPUDepthStencilState</a></code> <var>state</var> is calculated by running the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline①③\">queue timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>format</var> be <var>attachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-view\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-view①\">view</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format①③\">format</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>r</var> be the minimum positive representable value &gt; <code>0</code> in the <var>format</var> converted to a 32-bit float.</p>"
        },
        {
          "html": "<p>Let <var>maxDepthSlope</var> be the maximum of the horizontal and vertical slopes of the fragment’s depth value.</p>"
        },
        {
          "html": "If <var>format</var> is a <strong>unorm</strong> format:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>bias</var> be <code>(float)<var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthbias\" id=\"ref-for-dom-gpudepthstencilstate-depthbias①\">depthBias</a></code> * <var>r</var> + <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthbiasslopescale\" id=\"ref-for-dom-gpudepthstencilstate-depthbiasslopescale①\">depthBiasSlopeScale</a></code> * <var>maxDepthSlope</var></code>.</p>"
            }
          ]
        },
        {
          "html": "Otherwise, if <var>format</var> is a <strong>float</strong> format:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>bias</var> be <code>(float)<var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthbias\" id=\"ref-for-dom-gpudepthstencilstate-depthbias②\">depthBias</a></code> * 2^(exp(max depth in primitive) - <var>r</var>) + <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthbiasslopescale\" id=\"ref-for-dom-gpudepthstencilstate-depthbiasslopescale②\">depthBiasSlopeScale</a></code> * <var>maxDepthSlope</var></code>.</p>"
            }
          ]
        },
        {
          "html": "If <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthbiasclamp\" id=\"ref-for-dom-gpudepthstencilstate-depthbiasclamp①\">depthBiasClamp</a></code> &gt; <code>0</code>:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>bias</var> to <code>min(<var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthbiasclamp\" id=\"ref-for-dom-gpudepthstencilstate-depthbiasclamp②\">depthBiasClamp</a></code>, <var>bias</var>)</code>.</p>"
            }
          ]
        },
        {
          "html": "Otherwise if <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthbiasclamp\" id=\"ref-for-dom-gpudepthstencilstate-depthbiasclamp③\">depthBiasClamp</a></code> &lt; <code>0</code>:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>bias</var> to <code>max(<var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthbiasclamp\" id=\"ref-for-dom-gpudepthstencilstate-depthbiasclamp④\">depthBiasClamp</a></code>, <var>bias</var>)</code>.</p>"
            }
          ]
        },
        {
          "html": "If <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthbias\" id=\"ref-for-dom-gpudepthstencilstate-depthbias③\">depthBias</a></code> ≠ <code>0</code> or <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthbiasslopescale\" id=\"ref-for-dom-gpudepthstencilstate-depthbiasslopescale③\">depthBiasSlopeScale</a></code> ≠ <code>0</code>:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set the fragment depth value to <code>fragment depth value + <var>bias</var></code></p>"
            }
          ]
        }
      ]
    },
    {
      "name": "validating GPUDepthStencilState",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpudepthstencilstate",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑦⑨\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <code>true</code> if, and only if, all of the following conditions are satisfied:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-format\" id=\"ref-for-dom-gpudepthstencilstate-format③\">format</a></code> is a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#depth-or-stencil-format\" id=\"ref-for-depth-or-stencil-format⑦\">depth-or-stencil format</a>.</p>\n        </li><li data-md=\"\">\n         <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthwriteenabled\" id=\"ref-for-dom-gpudepthstencilstate-depthwriteenabled③\">depthWriteEnabled</a></code> is <code>true</code> or <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthcompare\" id=\"ref-for-dom-gpudepthstencilstate-depthcompare②\">depthCompare</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③⑧\">provided</a> and not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomparefunction-always\" id=\"ref-for-dom-gpucomparefunction-always①\">\"always\"</a></code>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-format\" id=\"ref-for-dom-gpudepthstencilstate-format④\">format</a></code> must have a depth component.</p>\n         </li></ul>\n        </li><li data-md=\"\">\n         <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-stencilfront\" id=\"ref-for-dom-gpudepthstencilstate-stencilfront②\">stencilFront</a></code> or <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-stencilback\" id=\"ref-for-dom-gpudepthstencilstate-stencilback②\">stencilBack</a></code> are not the default values:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-format\" id=\"ref-for-dom-gpudepthstencilstate-format⑤\">format</a></code> must have a stencil component.</p>\n         </li></ul>\n        </li><li data-md=\"\">\n         <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-format\" id=\"ref-for-dom-gpudepthstencilstate-format⑥\">format</a></code> has a depth component:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthwriteenabled\" id=\"ref-for-dom-gpudepthstencilstate-depthwriteenabled④\">depthWriteEnabled</a></code> must be <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③⑨\">provided</a>.</p>\n          </li><li data-md=\"\">\n           <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthcompare\" id=\"ref-for-dom-gpudepthstencilstate-depthcompare③\">depthCompare</a></code> must be <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④⓪\">provided</a> if:</p>\n           <ul>\n            <li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-depthwriteenabled\" id=\"ref-for-dom-gpudepthstencilstate-depthwriteenabled⑤\">depthWriteEnabled</a></code> is <code>true</code>, or</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-stencilfront\" id=\"ref-for-dom-gpudepthstencilstate-stencilfront③\">stencilFront</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustencilfacestate-depthfailop\" id=\"ref-for-dom-gpustencilfacestate-depthfailop②\">depthFailOp</a></code> is not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustenciloperation-keep\" id=\"ref-for-dom-gpustenciloperation-keep②\">\"keep\"</a></code>, or</p>\n            </li><li data-md=\"\">\n             <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-stencilback\" id=\"ref-for-dom-gpudepthstencilstate-stencilback③\">stencilBack</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustencilfacestate-depthfailop\" id=\"ref-for-dom-gpustencilfacestate-depthfailop③\">depthFailOp</a></code> is not <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustenciloperation-keep\" id=\"ref-for-dom-gpustenciloperation-keep③\">\"keep\"</a></code>.</p>\n           </li></ul>\n         </li></ul>\n       </li></ul>\n      </div>"
        }
      ]
    },
    {
      "name": "validating GPUVertexBufferLayout",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuvertexbufferlayout",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑧⓪\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "The type <var>T</var> of <var>var</var> is compatible with <var>attrib</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexattribute-format\" id=\"ref-for-dom-gpuvertexattribute-format⑤\">format</a></code>'s <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#vertex-data-type\" id=\"ref-for-vertex-data-type①\">vertex data type</a>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"unorm\", \"snorm\", or \"float\"",
                  "steps": [
                    {
                      "html": "<p><var>T</var> must be <code>f32</code> or <code>vecN&lt;f32&gt;</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"uint\"",
                  "steps": [
                    {
                      "html": "<p><var>T</var> must be <code>u32</code> or <code>vecN&lt;u32&gt;</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"sint\"",
                  "steps": [
                    {
                      "html": "<p><var>T</var> must be <code>i32</code> or <code>vecN&lt;i32&gt;</code>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "validating GPUVertexState",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuvertexstate",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑧①\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <code>true</code>, if and only if, all of the following conditions are satisfied:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuprogrammablestage\" id=\"ref-for-abstract-opdef-validating-gpuprogrammablestage②\" data-timeline=\"device\">validating GPUProgrammableStage</a>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-vertex\" id=\"ref-for-dom-gpushaderstage-vertex④\">VERTEX</a></code>, <var>descriptor</var>, <var>layout</var>) succeeds.</p>\n        </li><li data-md=\"\">\n         <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstate-buffers\" id=\"ref-for-dom-gpuvertexstate-buffers⑤\">buffers</a></code>.length is ≤ <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot③①\" data-timeline=\"const\">[[device]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot①③\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxvertexbuffers\" id=\"ref-for-dom-supported-limits-maxvertexbuffers①\">maxVertexBuffers</a></code>.</p>\n        </li><li data-md=\"\">\n         <p>Each <var>vertexBuffer</var> layout descriptor in the list <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstate-buffers\" id=\"ref-for-dom-gpuvertexstate-buffers⑥\">buffers</a></code> passes <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuvertexbufferlayout\" id=\"ref-for-abstract-opdef-validating-gpuvertexbufferlayout\" data-timeline=\"device\">validating GPUVertexBufferLayout</a>(<var>device</var>, <var>vertexBuffer</var>, <var>descriptor</var>)</p>\n        </li><li data-md=\"\">\n         <p>The sum of <var>vertexBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexbufferlayout-attributes\" id=\"ref-for-dom-gpuvertexbufferlayout-attributes⑤\">attributes</a></code>.length,\nover every <var>vertexBuffer</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstate-buffers\" id=\"ref-for-dom-gpuvertexstate-buffers⑦\">buffers</a></code>,\nis ≤ <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot③②\" data-timeline=\"const\">[[device]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot①④\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxvertexattributes\" id=\"ref-for-dom-supported-limits-maxvertexattributes①\">maxVertexAttributes</a></code>.</p>\n        </li><li data-md=\"\">\n         <p>Each <var>attrib</var> in the union of all <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpuvertexattribute\" id=\"ref-for-dictdef-gpuvertexattribute③\">GPUVertexAttribute</a></code> across <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstate-buffers\" id=\"ref-for-dom-gpuvertexstate-buffers⑧\">buffers</a></code> has a distinct <var>attrib</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexattribute-shaderlocation\" id=\"ref-for-dom-gpuvertexattribute-shaderlocation④\">shaderLocation</a></code> value.</p>\n       </li></ul>\n      </div>"
        }
      ]
    },
    {
      "name": "validating GPUImageCopyBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuimagecopybuffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑧②\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <code>true</code> if and only if all of the following conditions are satisfied:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p><var>imageCopyBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopybuffer-buffer\" id=\"ref-for-dom-gpuimagecopybuffer-buffer②\">buffer</a></code> must be a <a data-link-type=\"dfn\" href=\"https://w3c.github.io/i18n-glossary/#dfn-valid\" id=\"ref-for-dfn-valid\">valid</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer\" id=\"ref-for-gpubuffer⑥⓪\">GPUBuffer</a></code>.</p>\n        </li><li data-md=\"\">\n         <p><var>imageCopyBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-bytesperrow\" id=\"ref-for-dom-gpuimagedatalayout-bytesperrow②\">bytesPerRow</a></code> must be a multiple of 256.</p>\n       </li></ul>\n      </div>"
        }
      ]
    },
    {
      "name": "texture copy sub-region",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-texture-copy-sub-region",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-texture-copy-sub-region\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">texture copy sub-region</dfn> for depth slice or array layer <var>index</var> of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuimagecopytexture\" id=\"ref-for-gpuimagecopytexture②\">GPUImageCopyTexture</a></code> <var>copyTexture</var> is determined by running the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>texture</var> be <var>copyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture③\">texture</a></code>.</p>"
        },
        {
          "html": "If <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension①⓪\">dimension</a></code> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "1d",
                  "steps": [
                    {
                      "html": "<ol>\n         <li data-md=\"\">\n          <p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert①⑤\">Assert</a> <var>index</var> is <code>0</code></p>\n         </li><li data-md=\"\">\n          <p>Let <var>depthSliceOrLayer</var> be <var>texture</var></p>\n        </li></ol>",
                      "rationale": "assert",
                      "steps": [
                        {
                          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert①⑤\">Assert</a> <var>index</var> is <code>0</code></p>"
                        },
                        {
                          "html": "<p>Let <var>depthSliceOrLayer</var> be <var>texture</var></p>"
                        }
                      ]
                    }
                  ]
                },
                {
                  "case": "2d",
                  "steps": [
                    {
                      "html": "<p>Let <var>depthSliceOrLayer</var> be array layer <var>index</var> of <var>texture</var></p>"
                    }
                  ]
                },
                {
                  "case": "3d",
                  "steps": [
                    {
                      "html": "<p>Let <var>depthSliceOrLayer</var> be depth slice <var>index</var> of <var>texture</var></p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>textureMip</var> be mip level <var>copyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-miplevel\" id=\"ref-for-dom-gpuimagecopytexture-miplevel①\">mipLevel</a></code> of <var>depthSliceOrLayer</var>.</p>"
        },
        {
          "html": "<p>Return aspect <var>copyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-aspect\" id=\"ref-for-dom-gpuimagecopytexture-aspect①\">aspect</a></code> of <var>textureMip</var>.</p>"
        }
      ]
    },
    {
      "name": "texel block byte offset",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-texel-block-byte-offset",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-texel-block-byte-offset\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">texel block byte offset</dfn> of data described by <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuimagedatalayout\" id=\"ref-for-gpuimagedatalayout④\">GPUImageDataLayout</a></code> <var>dataLayout</var> corresponding to <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block①③\">texel block</a> <var>x</var>, <var>y</var> of depth slice or array layer <var>z</var> of a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputexture\" id=\"ref-for-gputexture③⑥\">GPUTexture</a></code> <var>texture</var> is\n    determined by running the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>blockBytes</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-copy-footprint\" id=\"ref-for-texel-block-copy-footprint\">texel block copy footprint</a> of <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format⑦\">format</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>imageOffset</var> be (<var>z</var> × <var>dataLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-rowsperimage\" id=\"ref-for-dom-gpuimagedatalayout-rowsperimage②\">rowsPerImage</a></code> × <var>dataLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-bytesperrow\" id=\"ref-for-dom-gpuimagedatalayout-bytesperrow③\">bytesPerRow</a></code>) + <var>dataLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-offset\" id=\"ref-for-dom-gpuimagedatalayout-offset①\">offset</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>rowOffset</var> be (<var>y</var> × <var>dataLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-bytesperrow\" id=\"ref-for-dom-gpuimagedatalayout-bytesperrow④\">bytesPerRow</a></code>) + <var>imageOffset</var>.</p>"
        },
        {
          "html": "<p>Let <var>blockOffset</var> be (<var>x</var> × <var>blockBytes</var>) + <var>rowOffset</var>.</p>"
        },
        {
          "html": "<p>Return <var>blockOffset</var>.</p>"
        }
      ]
    },
    {
      "name": "validating GPUImageCopyTexture",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuimagecopytexture",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑧③\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>blockWidth</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width⑥\">texel block width</a> of <var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture④\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format⑧\">format</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>blockHeight</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-height\" id=\"ref-for-texel-block-height⑤\">texel block height</a> of <var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture⑤\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format⑨\">format</a></code>.</p>"
        },
        {
          "html": "<p>Return <code>true</code> if and only if all of the following conditions apply:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-texture-copy-range\" id=\"ref-for-abstract-opdef-validating-texture-copy-range\" data-timeline=\"device\">validating texture copy range</a>(<var>imageCopyTexture</var>, <var>copySize</var>) returns <code>true</code>.</p>\n        </li><li data-md=\"\">\n         <p><var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture⑥\">texture</a></code> must be a <a data-link-type=\"dfn\" href=\"https://w3c.github.io/i18n-glossary/#dfn-valid\" id=\"ref-for-dfn-valid①\">valid</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputexture\" id=\"ref-for-gputexture③⑦\">GPUTexture</a></code>.</p>\n        </li><li data-md=\"\">\n         <p><var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-miplevel\" id=\"ref-for-dom-gpuimagecopytexture-miplevel②\">mipLevel</a></code> must be &lt; <var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture⑦\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-miplevelcount\" id=\"ref-for-dom-gputexture-miplevelcount④\">mipLevelCount</a></code>.</p>\n        </li><li data-md=\"\">\n         <p><var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①\">origin</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-x\" id=\"ref-for-gpuorigin3d-x\">x</a> must be a multiple of <var>blockWidth</var>.</p>\n        </li><li data-md=\"\">\n         <p><var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin②\">origin</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-y\" id=\"ref-for-gpuorigin3d-y\">y</a> must be a multiple of <var>blockHeight</var>.</p>\n        </li><li data-md=\"\">\n         <p>The <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#imagecopytexture-physical-subresource-size\" id=\"ref-for-imagecopytexture-physical-subresource-size\" data-timeline=\"const\">imageCopyTexture physical subresource size</a> of <var>imageCopyTexture</var> is equal to <var>copySize</var> if either of\nthe following conditions is true:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture⑧\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①⓪\">format</a></code> is a depth-stencil format.</p>\n          </li><li data-md=\"\">\n           <p><var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture⑨\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount③\">sampleCount</a></code> &gt; 1.</p>\n         </li></ul>\n       </li></ul>\n      </div>"
        }
      ]
    },
    {
      "name": "validating texture buffer copy",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-texture-buffer-copy",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑧④\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>texture</var> be <var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture①⓪\">texture</a></code></p>"
        },
        {
          "html": "<p>Let <var>aspectSpecificFormat</var> = <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①①\">format</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>offsetAlignment</var> = <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-copy-footprint\" id=\"ref-for-texel-block-copy-footprint①\">texel block copy footprint</a> of <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①②\">format</a></code>.</p>"
        },
        {
          "html": "<p>Return <code>true</code> if and only if all of the following conditions apply:</p>\n      <div class=\"validusage\">\n       <ol>\n        <li data-md=\"\">\n         <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuimagecopytexture\" id=\"ref-for-abstract-opdef-validating-gpuimagecopytexture\" data-timeline=\"device\">validating GPUImageCopyTexture</a>(<var>imageCopyTexture</var>, <var>copySize</var>) returns <code>true</code>.</p>\n        </li><li data-md=\"\">\n         <p><var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount④\">sampleCount</a></code> is 1.</p>\n        </li><li data-md=\"\">\n         <p><var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-usage\" id=\"ref-for-dom-gputexture-usage③\">usage</a></code> contains <var>textureUsage</var>.</p>\n        </li><li data-md=\"\">\n         <p>If <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①③\">format</a></code> is a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#depth-or-stencil-format\" id=\"ref-for-depth-or-stencil-format⑨\">depth-or-stencil format</a> format:</p>\n         <ol>\n          <li data-md=\"\">\n           <p><var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-aspect\" id=\"ref-for-dom-gpuimagecopytexture-aspect②\">aspect</a></code> must refer to a single aspect of <var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①④\">format</a></code>.</p>\n          </li><li data-md=\"\">\n           <p>If <var>textureUsage</var> is:</p>\n           <dl class=\"switch\">\n            <dt data-md=\"\"><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-copy_src\" id=\"ref-for-dom-gputextureusage-copy_src②\">COPY_SRC</a></code>\n            </dt><dd data-md=\"\">\n             <p>That aspect must be a valid image copy source according to <a href=\"https://gpuweb.github.io/gpuweb/#depth-formats\">§ 26.1.2 Depth-stencil formats</a>.</p>\n            </dd><dt data-md=\"\"><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-copy_dst\" id=\"ref-for-dom-gputextureusage-copy_dst②\">COPY_DST</a></code>\n            </dt><dd data-md=\"\">\n             <p>That aspect must be a valid image copy destination according to <a href=\"https://gpuweb.github.io/gpuweb/#depth-formats\">§ 26.1.2 Depth-stencil formats</a>.</p>\n           </dd></dl>\n          </li><li data-md=\"\">\n           <p>Set <var>aspectSpecificFormat</var> to the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-specific-format\" id=\"ref-for-aspect-specific-format①\">aspect-specific format</a> according to <a href=\"https://gpuweb.github.io/gpuweb/#depth-formats\">§ 26.1.2 Depth-stencil formats</a>.</p>\n          </li><li data-md=\"\">\n           <p>Set <var>offsetAlignment</var> to 4.</p>\n         </li></ol>\n        </li><li data-md=\"\">\n         <p>If <var>aligned</var> is <code>true</code>:</p>\n         <ol>\n          <li data-md=\"\">\n           <p><var>dataLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-offset\" id=\"ref-for-dom-gpuimagedatalayout-offset②\">offset</a></code> is a multiple of <var>offsetAlignment</var>.</p>\n         </li></ol>\n        </li><li data-md=\"\">\n         <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-linear-texture-data\" id=\"ref-for-abstract-opdef-validating-linear-texture-data\" data-timeline=\"device\">validating linear texture data</a>(<var>dataLayout</var>, <var>dataLength</var>, <var>aspectSpecificFormat</var>, <var>copySize</var>) succeeds.</p>\n       </li></ol>\n      </div>",
          "ignored": [
            "validating GPUImageCopyTexture(imageCopyTexture, copySize) returns true. texture.sampleCount is 1. texture.usage contains textureUsage. If texture.format is a depth-or-stencil format format: imageCopyTexture.aspect must refer to a single aspect of texture.format. If textureUsage is: COPY_SRC That aspect must be a valid image copy source according to § 26.1.2 Depth-stencil formats. COPY_DST That aspect must be a valid image copy destination according to § 26.1.2 Depth-stencil formats. Set aspectSpecificFormat to the aspect-specific format according to § 26.1.2 Depth-stencil formats. Set offsetAlignment to 4. If aligned is true: dataLayout.offset is a multiple of offsetAlignment. validating linear texture data(dataLayout, dataLength, aspectSpecificFormat, copySize) succeeds."
          ]
        }
      ]
    },
    {
      "name": "validating linear texture data",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-linear-texture-data",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑧⑤\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let:</p>\n      <ul>\n       <li data-md=\"\">\n        <p><var>widthInBlocks</var> be <var>copyExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width①⑨\">width</a> ÷ the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width⑦\">texel block width</a> of <var>format</var>. <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert①⑥\">Assert</a> this is an integer.</p>\n       </li><li data-md=\"\">\n        <p><var>heightInBlocks</var> be <var>copyExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height①⑥\">height</a> ÷ the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-height\" id=\"ref-for-texel-block-height⑥\">texel block height</a> of <var>format</var>. <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert①⑦\">Assert</a> this is an integer.</p>\n       </li><li data-md=\"\">\n        <p><var>bytesInLastRow</var> be <var>widthInBlocks</var> × the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-copy-footprint\" id=\"ref-for-texel-block-copy-footprint②\">texel block copy footprint</a> of <var>format</var>.</p>\n      </li></ul>"
        },
        {
          "html": "<p>Fail if the following input validation requirements are not met:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p>If <var>heightInBlocks</var> &gt; 1, <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-bytesperrow\" id=\"ref-for-dom-gpuimagedatalayout-bytesperrow⑤\">bytesPerRow</a></code> must be specified.</p>\n        </li><li data-md=\"\">\n         <p>If <var>copyExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers①④\">depthOrArrayLayers</a> &gt; 1, <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-bytesperrow\" id=\"ref-for-dom-gpuimagedatalayout-bytesperrow⑥\">bytesPerRow</a></code> and <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-rowsperimage\" id=\"ref-for-dom-gpuimagedatalayout-rowsperimage③\">rowsPerImage</a></code> must be specified.</p>\n        </li><li data-md=\"\">\n         <p>If specified, <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-bytesperrow\" id=\"ref-for-dom-gpuimagedatalayout-bytesperrow⑦\">bytesPerRow</a></code> must be ≥ <var>bytesInLastRow</var>.</p>\n        </li><li data-md=\"\">\n         <p>If specified, <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-rowsperimage\" id=\"ref-for-dom-gpuimagedatalayout-rowsperimage④\">rowsPerImage</a></code> must be ≥ <var>heightInBlocks</var>.</p>\n       </li></ul>\n      </div>"
        },
        {
          "html": "<p>Let:</p>\n      <ul>\n       <li data-md=\"\">\n        <p><var>bytesPerRow</var> be <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-bytesperrow\" id=\"ref-for-dom-gpuimagedatalayout-bytesperrow⑧\">bytesPerRow</a></code> ?? 0.</p>\n       </li><li data-md=\"\">\n        <p><var>rowsPerImage</var> be <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-rowsperimage\" id=\"ref-for-dom-gpuimagedatalayout-rowsperimage⑤\">rowsPerImage</a></code> ?? 0.</p>\n      </li></ul>"
        },
        {
          "html": "<p>Let <var>requiredBytesInCopy</var> be 0.</p>"
        },
        {
          "html": "If <var>copyExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers①⑤\">depthOrArrayLayers</a> &gt; 0:",
          "rationale": "increment",
          "steps": [
            {
              "html": "<p>Increment <var>requiredBytesInCopy</var> by <var>bytesPerRow</var> × <var>rowsPerImage</var> × (<var>copyExtent</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers①⑥\">depthOrArrayLayers</a> − 1).</p>"
            },
            {
              "html": "If <var>heightInBlocks</var> &gt; 0:",
              "rationale": "increment",
              "steps": [
                {
                  "html": "<p>Increment <var>requiredBytesInCopy</var> by <var>bytesPerRow</var> × (<var>heightInBlocks</var> − 1) + <var>bytesInLastRow</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Fail if the following condition is not satisfied:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p>The layout fits inside the linear data: <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagedatalayout-offset\" id=\"ref-for-dom-gpuimagedatalayout-offset③\">offset</a></code> + <var>requiredBytesInCopy</var> ≤ <var>byteSize</var>.</p>\n       </li></ul>\n      </div>"
        }
      ]
    },
    {
      "name": "validating texture copy range",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-texture-copy-range",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑧⑥\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>blockWidth</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width⑧\">texel block width</a> of <var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture①②\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①⑤\">format</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>blockHeight</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-height\" id=\"ref-for-texel-block-height⑦\">texel block height</a> of <var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture①③\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①⑥\">format</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>subresourceSize</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#imagecopytexture-physical-subresource-size\" id=\"ref-for-imagecopytexture-physical-subresource-size②\" data-timeline=\"const\">imageCopyTexture physical subresource size</a> of <var>imageCopyTexture</var>.</p>"
        },
        {
          "html": "<p>Return whether all the conditions below are satisfied:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p>(<var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin③\">origin</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-x\" id=\"ref-for-gpuorigin3d-x①\">x</a> + <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width②⓪\">width</a>) ≤ <var>subresourceSize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width②①\">width</a></p>\n        </li><li data-md=\"\">\n         <p>(<var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin④\">origin</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-y\" id=\"ref-for-gpuorigin3d-y①\">y</a> + <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height①⑦\">height</a>) ≤ <var>subresourceSize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height①⑧\">height</a></p>\n        </li><li data-md=\"\">\n         <p>(<var>imageCopyTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin⑤\">origin</a></code>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-z\" id=\"ref-for-gpuorigin3d-z\">z</a> + <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers①⑦\">depthOrArrayLayers</a>) ≤ <var>subresourceSize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers①⑧\">depthOrArrayLayers</a></p>\n        </li><li data-md=\"\">\n         <p><var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width②②\">width</a> must be a multiple of <var>blockWidth</var>.</p>\n        </li><li data-md=\"\">\n         <p><var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height①⑨\">height</a> must be a multiple of <var>blockHeight</var>.</p>\n       </li></ul>\n       \n      </div>"
        }
      ]
    },
    {
      "name": "Validate the encoder state",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-validate-the-encoder-state\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">Validate the encoder state</dfn> of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucommandsmixin\" id=\"ref-for-gpucommandsmixin③\">GPUCommandsMixin</a></code> <var>encoder</var> run the <br> following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑧⑦\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot\">[[state]]</a></code> is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"open\"",
                  "steps": [
                    {
                      "html": "<p>Return <code>true</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"locked\"",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate②①\" data-timeline=\"device\">Invalidate</a> <var>encoder</var> and return <code>false</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"ended\"",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error②②\" data-timeline=\"device\">Generate a validation error</a>, and return <code>false</code>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Enqueue a command",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-command",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-enqueue-a-command\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">Enqueue a command</dfn> on <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucommandsmixin\" id=\"ref-for-gpucommandsmixin④\">GPUCommandsMixin</a></code> <var>encoder</var> which issues the steps of a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpu-command\" id=\"ref-for-gpu-command⑥\">GPU Command</a> <var>command</var>, run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑧⑧\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append③\">Append</a> <var>command</var> to <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot\">[[commands]]</a></code>.</p>"
        },
        {
          "html": "When <var>command</var> is executed as part of a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucommandbuffer\" id=\"ref-for-gpucommandbuffer①①\">GPUCommandBuffer</a></code>:",
          "rationale": "issue",
          "steps": [
            {
              "html": "<p>Issue the steps of <var>command</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GPUDevice.createCommandEncoder",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createcommandencoder-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑥②\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>e</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⑨\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object①⓪\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucommandencoder\" id=\"ref-for-gpucommandencoder①⑦\">GPUCommandEncoder</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑧⑨\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>e</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createCommandEncoder",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createcommandencoder-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨⓪\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following conditions are unsatisfied <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error②③\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate②②\" data-timeline=\"device\">invalidate</a> <var>e</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must not be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalid\" id=\"ref-for-abstract-opdef-invalid①④\" data-timeline=\"device\">lost</a>.</p>\n          </li></ul>\n         </div>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.beginRenderPass",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-beginrenderpass-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑥③\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "For each non-<code>null</code> <var>colorAttachment</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments②\">colorAttachments</a></code>:",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-clearvalue\" id=\"ref-for-dom-gpurenderpasscolorattachment-clearvalue\">clearValue</a></code> is not <code>null</code>.</p>\n           <ol>\n            <li data-md=\"\">\n             <p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⓪\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpucolor-shape\" id=\"ref-for-abstract-opdef-validate-gpucolor-shape\" data-timeline=\"content\">validate GPUColor shape</a>(<var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-clearvalue\" id=\"ref-for-dom-gpurenderpasscolorattachment-clearvalue①\">clearValue</a></code>).</p>\n           </li></ol>",
              "ignored": [
                "? validate GPUColor shape(colorAttachment.clearValue)."
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>pass</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpurenderpassencoder\" id=\"ref-for-gpurenderpassencoder⑨\">GPURenderPassEncoder</a></code> object.</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨①\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>pass</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.beginRenderPass",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-beginrenderpass-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨②\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>.\nIf it returns false, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate②③\" data-timeline=\"device\">invalidate</a> <var>pass</var> and return.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot①\">[[state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-locked\" id=\"ref-for-encoder-state-locked①\">locked</a>\".</p>"
        },
        {
          "html": "<p>Let <var>attachmentRegions</var> be a <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①①\">list</a> of [<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texture-subresources\" id=\"ref-for-texture-subresources④\">texture subresource</a>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-depthslice\" id=\"ref-for-dom-gpurenderpasscolorattachment-depthslice\">depthSlice</a></code>?]\npairs, initially empty. Each pair describes the region of the texture to be rendered to, which\nincludes a single depth slice for <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-3d\" id=\"ref-for-dom-gputextureviewdimension-3d⑥\">\"3d\"</a></code> textures only.</p>"
        },
        {
          "html": "For each non-<code>null</code> <var>colorAttachment</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments③\">colorAttachments</a></code>:",
          "rationale": "add",
          "steps": [
            {
              "html": "<p>Add [<var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view②\">view</a></code>, <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-depthslice\" id=\"ref-for-dom-gpurenderpasscolorattachment-depthslice①\">depthSlice</a></code>] to <var>attachmentRegions</var>.</p>"
            },
            {
              "html": "If <var>colorAttachment</var>.{GPURenderPassColorAttachment/resolveTarget}} is not <code>null</code>:",
              "rationale": "add",
              "steps": [
                {
                  "html": "<p>Add [<var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-resolvetarget\" id=\"ref-for-dom-gpurenderpasscolorattachment-resolvetarget①\">resolveTarget</a></code>, <code>undefined</code>] to <var>attachmentRegions</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate②④\" data-timeline=\"device\">invalidate</a> <var>pass</var> and return.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>descriptor</var> must meet the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-gpurenderpassdescriptor-valid-usage\" id=\"ref-for-abstract-opdef-gpurenderpassdescriptor-valid-usage\" data-timeline=\"device\">Valid Usage</a> rules\ngiven device <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot③③\" data-timeline=\"const\">[[device]]</a></code>.</p>\n           </li><li data-md=\"\">\n            <p>The set of texture regions in <var>attachmentRegions</var> must be pairwise disjoint.\nThat is, no two texture regions may overlap.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Consider each <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texture-subresources\" id=\"ref-for-texture-subresources⑤\">texture subresource</a> in <var>attachmentRegions</var> to be used as\nan <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#internal-usage-attachment\" id=\"ref-for-internal-usage-attachment②\">attachment</a> for the duration of the render pass.</p>\n         <p>If a subresource is seen more than once, consider it used only once.\n(Attachments are already checked for overlaps in the validation rules above.)</p>"
        },
        {
          "html": "<p>Let <var>depthStencilAttachment</var> be <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-depthstencilattachment\" id=\"ref-for-dom-gpurenderpassdescriptor-depthstencilattachment①③\">depthStencilAttachment</a></code>,\nor <code>null</code> if not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④①\">provided</a>.</p>"
        },
        {
          "html": "If <var>depthStencilAttachment</var> is not <code>null</code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>depthStencilView</var> be <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-view\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-view②\">view</a></code>.</p>"
            },
            {
              "html": "<p>Consider the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-depth\" id=\"ref-for-aspect-depth③\">depth</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources\">subresource</a> of <var>depthStencilView</var> (if any) used for the duration of the render pass, as <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#internal-usage-attachment-read\" id=\"ref-for-internal-usage-attachment-read①\">attachment-read</a> if <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-depthreadonly\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-depthreadonly\">depthReadOnly</a></code> is true,\nor as <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#internal-usage-attachment\" id=\"ref-for-internal-usage-attachment③\">attachment</a> otherwise.</p>"
            },
            {
              "html": "<p>Consider the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-stencil\" id=\"ref-for-aspect-stencil②\">stencil</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources①\">subresource</a> of <var>depthStencilView</var> (if any) used for the duration of the render pass, as <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#internal-usage-attachment-read\" id=\"ref-for-internal-usage-attachment-read②\">attachment-read</a> if <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-stencilreadonly\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-stencilreadonly\">stencilReadOnly</a></code> is true,\nor as <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#internal-usage-attachment\" id=\"ref-for-internal-usage-attachment④\">attachment</a> otherwise.</p>"
            },
            {
              "html": "<p>Set <var>pass</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-depthreadonly-slot\" id=\"ref-for-dom-gpurendercommandsmixin-depthreadonly-slot\">[[depthReadOnly]]</a></code> to <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-depthreadonly\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-depthreadonly①\">depthReadOnly</a></code>.</p>"
            },
            {
              "html": "<p>Set <var>pass</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-stencilreadonly-slot\" id=\"ref-for-dom-gpurendercommandsmixin-stencilreadonly-slot\">[[stencilReadOnly]]</a></code> to <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-stencilreadonly\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-stencilreadonly①\">stencilReadOnly</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>pass</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-layout-slot\" id=\"ref-for-dom-gpurendercommandsmixin-layout-slot\">[[layout]]</a></code> to <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-derive-render-targets-layout-from-pass\" id=\"ref-for-abstract-opdef-derive-render-targets-layout-from-pass\" data-timeline=\"device\">derive render targets layout from pass</a>(<var>descriptor</var>).</p>"
        },
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-timestampwrites\" id=\"ref-for-dom-gpurenderpassdescriptor-timestampwrites\">timestampWrites</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④②\">provided</a>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>timestampWrites</var> be <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-timestampwrites\" id=\"ref-for-dom-gpurenderpassdescriptor-timestampwrites①\">timestampWrites</a></code>.</p>"
            },
            {
              "html": "<p>If <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasstimestampwrites-beginningofpasswriteindex\" id=\"ref-for-dom-gpurenderpasstimestampwrites-beginningofpasswriteindex\">beginningOfPassWriteIndex</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④③\">provided</a>, <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append④\">append</a> a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpu-command\" id=\"ref-for-gpu-command⑦\">GPU command</a> to <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot①\">[[commands]]</a></code> with the following steps:</p>\n           <div data-timeline=\"queue\">\n            <ol>\n             <li data-md=\"\">\n              <p>Before the pass commands begin executing,\nwrite the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-current-queue-timestamp\" id=\"ref-for-abstract-opdef-current-queue-timestamp①\" data-timeline=\"queue\">current queue timestamp</a> into index <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasstimestampwrites-beginningofpasswriteindex\" id=\"ref-for-dom-gpurenderpasstimestampwrites-beginningofpasswriteindex①\">beginningOfPassWriteIndex</a></code> of <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasstimestampwrites-queryset\" id=\"ref-for-dom-gpurenderpasstimestampwrites-queryset\">querySet</a></code>.</p>\n            </li></ol>\n           </div>",
              "ignored": [
                "Before the pass commands begin executing, write the current queue timestamp into index timestampWrites.beginningOfPassWriteIndex of timestampWrites.querySet."
              ]
            },
            {
              "html": "<p>If <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasstimestampwrites-endofpasswriteindex\" id=\"ref-for-dom-gpurenderpasstimestampwrites-endofpasswriteindex\">endOfPassWriteIndex</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④④\">provided</a>, set <var>pass</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-endtimestampwrite-slot\" id=\"ref-for-dom-gpurenderpassencoder-endtimestampwrite-slot\">[[endTimestampWrite]]</a></code> to a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpu-command\" id=\"ref-for-gpu-command⑧\">GPU command</a> with the following steps:</p>\n           <div data-timeline=\"queue\">\n            <ol>\n             <li data-md=\"\">\n              <p>After the pass commands finish executing,\nwrite the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-current-queue-timestamp\" id=\"ref-for-abstract-opdef-current-queue-timestamp②\" data-timeline=\"queue\">current queue timestamp</a> into index <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasstimestampwrites-endofpasswriteindex\" id=\"ref-for-dom-gpurenderpasstimestampwrites-endofpasswriteindex①\">endOfPassWriteIndex</a></code> of <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasstimestampwrites-queryset\" id=\"ref-for-dom-gpurenderpasstimestampwrites-queryset①\">querySet</a></code>.</p>\n            </li></ol>\n           </div>",
              "ignored": [
                "After the pass commands finish executing, write the current queue timestamp into index timestampWrites.endOfPassWriteIndex of timestampWrites.querySet."
              ]
            }
          ]
        },
        {
          "html": "<p>Set <var>pass</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawcount-slot\" id=\"ref-for-dom-gpurendercommandsmixin-drawcount-slot\">[[drawCount]]</a></code> to 0.</p>"
        },
        {
          "html": "<p>Set <var>pass</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-maxdrawcount-slot\" id=\"ref-for-dom-gpurenderpassencoder-maxdrawcount-slot\">[[maxDrawCount]]</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-maxdrawcount\" id=\"ref-for-dom-gpurenderpassdescriptor-maxdrawcount\">maxDrawCount</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>pass</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-maxdrawcount-slot\" id=\"ref-for-dom-gpurenderpassencoder-maxdrawcount-slot①\">[[maxDrawCount]]</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-maxdrawcount\" id=\"ref-for-dom-gpurenderpassdescriptor-maxdrawcount①\">maxDrawCount</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-command\" id=\"ref-for-abstract-opdef-enqueue-a-command\" data-timeline=\"device\">Enqueue a command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline①⑥\">Queue timeline</a> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.beginRenderPass",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-beginrenderpass-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline①⑦\">Queue timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandbuffer-renderstate-slot\" id=\"ref-for-dom-gpucommandbuffer-renderstate-slot\">[[renderState]]</a></code> of the currently executing <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucommandbuffer\" id=\"ref-for-gpucommandbuffer①④\">GPUCommandBuffer</a></code> be a new <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#renderstate\" id=\"ref-for-renderstate①\">RenderState</a>.</p>"
        },
        {
          "html": "<p>Set <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandbuffer-renderstate-slot\" id=\"ref-for-dom-gpucommandbuffer-renderstate-slot①\">[[renderState]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-colorattachments-slot\" id=\"ref-for-dom-renderstate-colorattachments-slot\">[[colorAttachments]]</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments④\">colorAttachments</a></code>.</p>"
        },
        {
          "html": "<p>Set <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandbuffer-renderstate-slot\" id=\"ref-for-dom-gpucommandbuffer-renderstate-slot②\">[[renderState]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-depthstencilattachment-slot\" id=\"ref-for-dom-renderstate-depthstencilattachment-slot\">[[depthStencilAttachment]]</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-depthstencilattachment\" id=\"ref-for-dom-gpurenderpassdescriptor-depthstencilattachment①④\">depthStencilAttachment</a></code>.</p>"
        },
        {
          "html": "For each non-<code>null</code> <var>colorAttachment</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments⑤\">colorAttachments</a></code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>colorView</var> be <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view③\">view</a></code>.</p>"
            },
            {
              "html": "If <var>colorView</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot④\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension①⑤\">dimension</a></code> is:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "\"3d\"",
                      "steps": [
                        {
                          "html": "<p>Let <var>colorSubregion</var> be <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-depthslice\" id=\"ref-for-dom-gpurenderpasscolorattachment-depthslice②\">depthSlice</a></code> of <var>colorView</var>.</p>"
                        }
                      ]
                    },
                    {
                      "case": "Otherwise",
                      "steps": [
                        {
                          "html": "<p>Let <var>colorSubregion</var> be <var>colorView</var>.</p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "html": "If <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-loadop\" id=\"ref-for-dom-gpurenderpasscolorattachment-loadop\">loadOp</a></code> is:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "\"load\"",
                      "steps": [
                        {
                          "html": "<p>Ensure the contents of <var>colorSubregion</var> are loaded into the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory\">framebuffer memory</a> associated with <var>colorSubregion</var>.</p>"
                        }
                      ]
                    },
                    {
                      "case": "\"clear\"",
                      "steps": [
                        {
                          "html": "<p>Set every <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block①④\">texel</a> of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory①\">framebuffer memory</a> associated with <var>colorSubregion</var> to <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-clearvalue\" id=\"ref-for-dom-gpurenderpasscolorattachment-clearvalue②\">clearValue</a></code>.</p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "If <var>depthStencilAttachment</var> is not <code>null</code>:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-depthloadop\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-depthloadop\">depthLoadOp</a></code> is:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "Not provided",
                      "steps": [
                        {
                          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert①⑧\">Assert</a> that <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-depthreadonly\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-depthreadonly②\">depthReadOnly</a></code> is <code>true</code> and ensure the contents of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-depth\" id=\"ref-for-aspect-depth④\">depth</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources②\">subresource</a> of <var>depthStencilView</var> are loaded into the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory②\">framebuffer memory</a> associated with <var>depthStencilView</var>.</p>"
                        }
                      ]
                    },
                    {
                      "case": "\"load\"",
                      "steps": [
                        {
                          "html": "<p>Ensure the contents of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-depth\" id=\"ref-for-aspect-depth⑤\">depth</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources③\">subresource</a> of <var>depthStencilView</var> are loaded into the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory③\">framebuffer memory</a> associated with <var>depthStencilView</var>.</p>"
                        }
                      ]
                    },
                    {
                      "case": "\"clear\"",
                      "steps": [
                        {
                          "html": "<p>Set every <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block①⑤\">texel</a> of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory④\">framebuffer memory</a> associated with the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-depth\" id=\"ref-for-aspect-depth⑥\">depth</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources④\">subresource</a> of <var>depthStencilView</var> to <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-depthclearvalue\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-depthclearvalue①\">depthClearValue</a></code>.</p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "html": "If <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-stencilloadop\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-stencilloadop\">stencilLoadOp</a></code> is:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "Not provided",
                      "steps": [
                        {
                          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert①⑨\">Assert</a> that <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-stencilreadonly\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-stencilreadonly②\">stencilReadOnly</a></code> is <code>true</code> and ensure the contents of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-stencil\" id=\"ref-for-aspect-stencil③\">stencil</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources⑤\">subresource</a> of <var>depthStencilView</var> are loaded into the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory⑤\">framebuffer memory</a> associated with <var>depthStencilView</var>.</p>"
                        }
                      ]
                    },
                    {
                      "case": "\"load\"",
                      "steps": [
                        {
                          "html": "<p>Ensure the contents of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-stencil\" id=\"ref-for-aspect-stencil④\">stencil</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources⑥\">subresource</a> of <var>depthStencilView</var> are loaded into the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory⑥\">framebuffer memory</a> associated with <var>depthStencilView</var>.</p>"
                        }
                      ]
                    },
                    {
                      "case": "\"clear\"",
                      "steps": [
                        {
                          "html": "<p>Set every <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block①⑥\">texel</a> of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory⑦\">framebuffer memory</a> associated with the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-stencil\" id=\"ref-for-aspect-stencil⑤\">stencil</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources⑦\">subresource</a> <var>depthStencilView</var> to <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-stencilclearvalue\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-stencilclearvalue\">stencilClearValue</a></code>.</p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.beginComputePass",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-begincomputepass-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑥④\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>pass</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucomputepassencoder\" id=\"ref-for-gpucomputepassencoder⑦\">GPUComputePassEncoder</a></code> object.</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨③\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>pass</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.beginComputePass",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-begincomputepass-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨④\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>.\nIf it returns false, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate②⑤\" data-timeline=\"device\">invalidate</a> <var>pass</var> and return.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot②\">[[state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-locked\" id=\"ref-for-encoder-state-locked②\">locked</a>\".</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate②⑥\" data-timeline=\"device\">invalidate</a> <var>pass</var> and return.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassdescriptor-timestampwrites\" id=\"ref-for-dom-gpucomputepassdescriptor-timestampwrites\">timestampWrites</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④⑦\">provided</a>:</p>\n            <ul>\n             <li data-md=\"\">\n              <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-timestampwrites\" id=\"ref-for-abstract-opdef-validate-timestampwrites\" data-timeline=\"device\">Validate timestampWrites</a>(<var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot③④\" data-timeline=\"const\">[[device]]</a></code>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassdescriptor-timestampwrites\" id=\"ref-for-dom-gpucomputepassdescriptor-timestampwrites①\">timestampWrites</a></code>)\nmust return true.</p>\n            </li></ul>\n          </li></ul>\n         </div>"
        },
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassdescriptor-timestampwrites\" id=\"ref-for-dom-gpucomputepassdescriptor-timestampwrites②\">timestampWrites</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④⑧\">provided</a>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>timestampWrites</var> be <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassdescriptor-timestampwrites\" id=\"ref-for-dom-gpucomputepassdescriptor-timestampwrites③\">timestampWrites</a></code>.</p>"
            },
            {
              "html": "<p>If <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepasstimestampwrites-beginningofpasswriteindex\" id=\"ref-for-dom-gpucomputepasstimestampwrites-beginningofpasswriteindex\">beginningOfPassWriteIndex</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④⑨\">provided</a>, <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑤\">append</a> a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpu-command\" id=\"ref-for-gpu-command⑨\">GPU command</a> to <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot②\">[[commands]]</a></code> with the following steps:</p>\n           <div data-timeline=\"queue\">\n            <ol>\n             <li data-md=\"\">\n              <p>Before the pass commands begin executing,\nwrite the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-current-queue-timestamp\" id=\"ref-for-abstract-opdef-current-queue-timestamp③\" data-timeline=\"queue\">current queue timestamp</a> into index <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepasstimestampwrites-beginningofpasswriteindex\" id=\"ref-for-dom-gpucomputepasstimestampwrites-beginningofpasswriteindex①\">beginningOfPassWriteIndex</a></code> of <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepasstimestampwrites-queryset\" id=\"ref-for-dom-gpucomputepasstimestampwrites-queryset\">querySet</a></code>.</p>\n            </li></ol>\n           </div>",
              "ignored": [
                "Before the pass commands begin executing, write the current queue timestamp into index timestampWrites.beginningOfPassWriteIndex of timestampWrites.querySet."
              ]
            },
            {
              "html": "<p>If <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepasstimestampwrites-endofpasswriteindex\" id=\"ref-for-dom-gpucomputepasstimestampwrites-endofpasswriteindex\">endOfPassWriteIndex</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑤⓪\">provided</a>, set <var>pass</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-endtimestampwrite-slot\" id=\"ref-for-dom-gpucomputepassencoder-endtimestampwrite-slot\">[[endTimestampWrite]]</a></code> to a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpu-command\" id=\"ref-for-gpu-command①⓪\">GPU command</a> with the following steps:</p>\n           <div data-timeline=\"queue\">\n            <ol>\n             <li data-md=\"\">\n              <p>After the pass commands finish executing,\nwrite the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-current-queue-timestamp\" id=\"ref-for-abstract-opdef-current-queue-timestamp④\" data-timeline=\"queue\">current queue timestamp</a> into index <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepasstimestampwrites-endofpasswriteindex\" id=\"ref-for-dom-gpucomputepasstimestampwrites-endofpasswriteindex①\">endOfPassWriteIndex</a></code> of <var>timestampWrites</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepasstimestampwrites-queryset\" id=\"ref-for-dom-gpucomputepasstimestampwrites-queryset①\">querySet</a></code>.</p>\n            </li></ol>\n           </div>",
              "ignored": [
                "After the pass commands finish executing, write the current queue timestamp into index timestampWrites.endOfPassWriteIndex of timestampWrites.querySet."
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyBufferToBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copybuffertobuffer-source-sourceoffset-destination-destinationoffset-size-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑥⑤\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨⑤\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot③⑤\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyBufferToBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copybuffertobuffer-source-sourceoffset-destination-destinationoffset-size-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨⑥\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state②\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate②⑦\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>source</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①②\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>destination</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①③\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage④\" data-timeline=\"const\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-copy_src\" id=\"ref-for-dom-gpubufferusage-copy_src⑤\">COPY_SRC</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage⑤\" data-timeline=\"const\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-copy_dst\" id=\"ref-for-dom-gpubufferusage-copy_dst④\">COPY_DST</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>size</var> is a multiple of 4.</p>\n           </li><li data-md=\"\">\n            <p><var>sourceOffset</var> is a multiple of 4.</p>\n           </li><li data-md=\"\">\n            <p><var>destinationOffset</var> is a multiple of 4.</p>\n           </li><li data-md=\"\">\n            <p><var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size⑥\" data-timeline=\"const\">size</a></code> ≥ (<var>sourceOffset</var> + <var>size</var>).</p>\n           </li><li data-md=\"\">\n            <p><var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size⑦\" data-timeline=\"const\">size</a></code> ≥ (<var>destinationOffset</var> + <var>size</var>).</p>\n           </li><li data-md=\"\">\n            <p><var>source</var> and <var>destination</var> are not the same <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer\" id=\"ref-for-gpubuffer⑦①\">GPUBuffer</a></code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-command\" id=\"ref-for-abstract-opdef-enqueue-a-command①\" data-timeline=\"device\">Enqueue a command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline①⑧\">Queue timeline</a> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyBufferToBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copybuffertobuffer-source-sourceoffset-destination-destinationoffset-size-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline①⑨\">Queue timeline</a> steps:",
      "rationale": "copy",
      "steps": [
        {
          "html": "<p>Copy <var>size</var> bytes of <var>source</var>, beginning at <var>sourceOffset</var>, into <var>destination</var>,\nbeginning at <var>destinationOffset</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.clearBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-clearbuffer-buffer-offset-size-buffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑥⑥\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨⑦\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot③⑥\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.clearBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-clearbuffer-buffer-offset-size-buffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨⑧\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state③\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If <var>size</var> is missing, set <var>size</var> to <code>max(0, |buffer|.{{GPUBuffer/size}} - |offset|)</code>.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate②⑧\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>buffer</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①④\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>buffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage⑥\" data-timeline=\"const\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-copy_dst\" id=\"ref-for-dom-gpubufferusage-copy_dst⑤\">COPY_DST</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>size</var> is a multiple of 4.</p>\n           </li><li data-md=\"\">\n            <p><var>offset</var> is a multiple of 4.</p>\n           </li><li data-md=\"\">\n            <p><var>buffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size⑧\" data-timeline=\"const\">size</a></code> ≥ (<var>offset</var> + <var>size</var>).</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-command\" id=\"ref-for-abstract-opdef-enqueue-a-command②\" data-timeline=\"device\">Enqueue a command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline②⓪\">Queue timeline</a> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.clearBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-clearbuffer-buffer-offset-size-buffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline②①\">Queue timeline</a> steps:",
      "rationale": "set",
      "steps": [
        {
          "html": "<p>Set <var>size</var> bytes of <var>buffer</var> to <code>0</code> starting at <var>offset</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyBufferToTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copybuffertotexture-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑥⑦\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③①\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuorigin3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuorigin3d-shape\" data-timeline=\"content\">validate GPUOrigin3D shape</a>(<var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin⑧\">origin</a></code>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③②\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuextent3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuextent3d-shape①\" data-timeline=\"content\">validate GPUExtent3D shape</a>(<var>copySize</var>).</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline⑨⑨\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot③⑦\" data-timeline=\"const\">[[device]]</a></code>:</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyBufferToTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copybuffertotexture-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⓪⓪\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state④\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>Let <var>aligned</var> be <code>true</code>.</p>"
        },
        {
          "html": "<p>Let <var>dataLength</var> be <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopybuffer-buffer\" id=\"ref-for-dom-gpuimagecopybuffer-buffer③\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size⑨\" data-timeline=\"const\">size</a></code>.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate②⑨\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuimagecopybuffer\" id=\"ref-for-abstract-opdef-validating-gpuimagecopybuffer\" data-timeline=\"device\">validating GPUImageCopyBuffer</a>(<var>source</var>) returns <code>true</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopybuffer-buffer\" id=\"ref-for-dom-gpuimagecopybuffer-buffer④\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage⑦\" data-timeline=\"const\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-copy_src\" id=\"ref-for-dom-gpubufferusage-copy_src⑥\">COPY_SRC</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-texture-buffer-copy\" id=\"ref-for-abstract-opdef-validating-texture-buffer-copy\" data-timeline=\"device\">validating texture buffer copy</a>(<var>destination</var>, <var>source</var>, <var>dataLength</var>, <var>copySize</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-copy_dst\" id=\"ref-for-dom-gputextureusage-copy_dst③\">COPY_DST</a></code>, <var>aligned</var>) returns <code>true</code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-command\" id=\"ref-for-abstract-opdef-enqueue-a-command③\" data-timeline=\"device\">Enqueue a command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline②②\">Queue timeline</a> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyBufferToTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copybuffertotexture-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline②③\">Queue timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>blockWidth</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width⑨\">texel block width</a> of <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture①⑤\">texture</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>blockHeight</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-height\" id=\"ref-for-texel-block-height⑧\">texel block height</a> of <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture①⑥\">texture</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>dstOrigin</var> be <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin⑨\">origin</a></code>;</p>"
        },
        {
          "html": "<p>Let <var>dstBlockOriginX</var> be (<var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-x\" id=\"ref-for-gpuorigin3d-x②\">x</a> ÷ <var>blockWidth</var>).</p>"
        },
        {
          "html": "<p>Let <var>dstBlockOriginY</var> be (<var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-y\" id=\"ref-for-gpuorigin3d-y②\">y</a> ÷ <var>blockHeight</var>).</p>"
        },
        {
          "html": "<p>Let <var>blockColumns</var> be (<var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width②③\">width</a> ÷ <var>blockWidth</var>).</p>"
        },
        {
          "html": "<p>Let <var>blockRows</var> be (<var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height②⓪\">height</a> ÷ <var>blockHeight</var>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert②⓪\">Assert</a> that <var>dstBlockOriginX</var>, <var>dstBlockOriginY</var>, <var>blockColumns</var>, and <var>blockRows</var> are integers.</p>"
        },
        {
          "html": "For each <var>z</var> in the range [0, <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers②⓪\">depthOrArrayLayers</a> − 1]:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>dstSubregion</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-texture-copy-sub-region\" id=\"ref-for-abstract-opdef-texture-copy-sub-region\" data-timeline=\"const\">texture copy sub-region</a> (<var>z</var> + <var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-z\" id=\"ref-for-gpuorigin3d-z③\">z</a>) of <var>destination</var>.</p>"
            },
            {
              "html": "For each <var>y</var> in the range [0, <var>blockRows</var> − 1]:",
              "rationale": "for",
              "steps": [
                {
                  "html": "For each <var>x</var> in the range [0, <var>blockColumns</var> − 1]:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>blockOffset</var> be the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-texel-block-byte-offset\" id=\"ref-for-abstract-opdef-texel-block-byte-offset\" data-timeline=\"const\">texel block byte offset</a> of <var>source</var> for (<var>x</var>, <var>y</var>, <var>z</var>) of <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture①⑦\">texture</a></code>.</p>"
                    },
                    {
                      "html": "<p>Set <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block①⑦\">texel block</a> (<var>dstBlockOriginX</var> + <var>x</var>, <var>dstBlockOriginY</var> + <var>y</var>) of <var>dstSubregion</var> to be an <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#equivalent-texel-representation\" id=\"ref-for-equivalent-texel-representation\">equivalent texel representation</a> to the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block①⑧\">texel block</a> described by <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopybuffer-buffer\" id=\"ref-for-dom-gpuimagecopybuffer-buffer⑤\">buffer</a></code> at offset <var>blockOffset</var>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyTextureToBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copytexturetobuffer-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑥⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③③\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuorigin3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuorigin3d-shape①\" data-timeline=\"content\">validate GPUOrigin3D shape</a>(<var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①⓪\">origin</a></code>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③④\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuextent3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuextent3d-shape②\" data-timeline=\"content\">validate GPUExtent3D shape</a>(<var>copySize</var>).</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⓪①\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot③⑧\" data-timeline=\"const\">[[device]]</a></code>:</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyTextureToBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copytexturetobuffer-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⓪②\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state⑤\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>Let <var>aligned</var> be <code>true</code>.</p>"
        },
        {
          "html": "<p>Let <var>dataLength</var> be <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopybuffer-buffer\" id=\"ref-for-dom-gpuimagecopybuffer-buffer⑥\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①⓪\" data-timeline=\"const\">size</a></code>.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③⓪\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuimagecopybuffer\" id=\"ref-for-abstract-opdef-validating-gpuimagecopybuffer①\" data-timeline=\"device\">validating GPUImageCopyBuffer</a>(<var>destination</var>) returns <code>true</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopybuffer-buffer\" id=\"ref-for-dom-gpuimagecopybuffer-buffer⑦\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage⑧\" data-timeline=\"const\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-copy_dst\" id=\"ref-for-dom-gpubufferusage-copy_dst⑥\">COPY_DST</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-texture-buffer-copy\" id=\"ref-for-abstract-opdef-validating-texture-buffer-copy①\" data-timeline=\"device\">validating texture buffer copy</a>(<var>source</var>, <var>destination</var>, <var>dataLength</var>, <var>copySize</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-copy_src\" id=\"ref-for-dom-gputextureusage-copy_src③\">COPY_SRC</a></code>, <var>aligned</var>) returns <code>true</code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-command\" id=\"ref-for-abstract-opdef-enqueue-a-command④\" data-timeline=\"device\">Enqueue a command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline②④\">Queue timeline</a> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyTextureToBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copytexturetobuffer-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline②⑤\">Queue timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>blockWidth</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width①⓪\">texel block width</a> of <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture①⑧\">texture</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>blockHeight</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-height\" id=\"ref-for-texel-block-height⑨\">texel block height</a> of <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture①⑨\">texture</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>srcOrigin</var> be <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①①\">origin</a></code>;</p>"
        },
        {
          "html": "<p>Let <var>srcBlockOriginX</var> be (<var>srcOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-x\" id=\"ref-for-gpuorigin3d-x③\">x</a> ÷ <var>blockWidth</var>).</p>"
        },
        {
          "html": "<p>Let <var>srcBlockOriginY</var> be (<var>srcOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-y\" id=\"ref-for-gpuorigin3d-y③\">y</a> ÷ <var>blockHeight</var>).</p>"
        },
        {
          "html": "<p>Let <var>blockColumns</var> be (<var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width②④\">width</a> ÷ <var>blockWidth</var>).</p>"
        },
        {
          "html": "<p>Let <var>blockRows</var> be (<var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height②①\">height</a> ÷ <var>blockHeight</var>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert②①\">Assert</a> that <var>srcBlockOriginX</var>, <var>srcBlockOriginY</var>, <var>blockColumns</var>, and <var>blockRows</var> are integers.</p>"
        },
        {
          "html": "For each <var>z</var> in the range [0, <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers②①\">depthOrArrayLayers</a> − 1]:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>srcSubregion</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-texture-copy-sub-region\" id=\"ref-for-abstract-opdef-texture-copy-sub-region①\" data-timeline=\"const\">texture copy sub-region</a> (<var>z</var> + <var>srcOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-z\" id=\"ref-for-gpuorigin3d-z④\">z</a>) of <var>source</var>.</p>"
            },
            {
              "html": "For each <var>y</var> in the range [0, <var>blockRows</var> − 1]:",
              "rationale": "for",
              "steps": [
                {
                  "html": "For each <var>x</var> in the range [0, <var>blockColumns</var> − 1]:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>blockOffset</var> be the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-texel-block-byte-offset\" id=\"ref-for-abstract-opdef-texel-block-byte-offset①\" data-timeline=\"const\">texel block byte offset</a> of <var>destination</var> for (<var>x</var>, <var>y</var>, <var>z</var>) of <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture②⓪\">texture</a></code>.</p>"
                    },
                    {
                      "html": "<p>Set <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopybuffer-buffer\" id=\"ref-for-dom-gpuimagecopybuffer-buffer⑧\">buffer</a></code> at offset <var>blockOffset</var> to be an <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#equivalent-texel-representation\" id=\"ref-for-equivalent-texel-representation①\">equivalent texel representation</a> to <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block①⑨\">texel block</a> (<var>srcBlockOriginX</var> + <var>x</var>, <var>srcBlockOriginY</var> + <var>y</var>) of <var>srcSubregion</var>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyTextureToTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copytexturetotexture-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑥⑨\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⑤\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuorigin3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuorigin3d-shape②\" data-timeline=\"content\">validate GPUOrigin3D shape</a>(<var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①②\">origin</a></code>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⑥\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuorigin3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuorigin3d-shape③\" data-timeline=\"content\">validate GPUOrigin3D shape</a>(<var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①③\">origin</a></code>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⑦\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuextent3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuextent3d-shape③\" data-timeline=\"content\">validate GPUExtent3D shape</a>(<var>copySize</var>).</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⓪③\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot③⑨\" data-timeline=\"const\">[[device]]</a></code>:</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyTextureToTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copytexturetotexture-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⓪④\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state⑥\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③①\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p>Let <var>srcTexture</var> be <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture②①\">texture</a></code>.</p>\n           </li><li data-md=\"\">\n            <p>Let <var>dstTexture</var> be <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture②②\">texture</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuimagecopytexture\" id=\"ref-for-abstract-opdef-validating-gpuimagecopytexture①\" data-timeline=\"device\">validating GPUImageCopyTexture</a>(<var>source</var>, <var>copySize</var>) returns <code>true</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>srcTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-usage\" id=\"ref-for-dom-gputexture-usage④\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-copy_src\" id=\"ref-for-dom-gputextureusage-copy_src④\">COPY_SRC</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuimagecopytexture\" id=\"ref-for-abstract-opdef-validating-gpuimagecopytexture②\" data-timeline=\"device\">validating GPUImageCopyTexture</a>(<var>destination</var>, <var>copySize</var>) returns <code>true</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>dstTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-usage\" id=\"ref-for-dom-gputexture-usage⑤\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-copy_dst\" id=\"ref-for-dom-gputextureusage-copy_dst④\">COPY_DST</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>srcTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount⑤\">sampleCount</a></code> is equal to <var>dstTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount⑥\">sampleCount</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>srcTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①⑦\">format</a></code> and <var>dstTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①⑧\">format</a></code> must be <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#copy-compatible\" id=\"ref-for-copy-compatible\" data-timeline=\"const\">copy-compatible</a>.</p>\n           </li><li data-md=\"\">\n            <p>If <var>srcTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format①⑨\">format</a></code> is a depth-stencil format:</p>\n            <ul>\n             <li data-md=\"\">\n              <p><var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-aspect\" id=\"ref-for-dom-gpuimagecopytexture-aspect④\">aspect</a></code> and <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-aspect\" id=\"ref-for-dom-gpuimagecopytexture-aspect⑤\">aspect</a></code> must both refer to all aspects of <var>srcTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format②⓪\">format</a></code> and <var>dstTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format②①\">format</a></code>, respectively.</p>\n            </li></ul>\n           </li><li data-md=\"\">\n            <p>The <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-set-of-subresources-for-texture-copy\" id=\"ref-for-abstract-opdef-set-of-subresources-for-texture-copy\" data-timeline=\"const\">set of subresources for texture copy</a>(<var>source</var>, <var>copySize</var>) and\nthe <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-set-of-subresources-for-texture-copy\" id=\"ref-for-abstract-opdef-set-of-subresources-for-texture-copy①\" data-timeline=\"const\">set of subresources for texture copy</a>(<var>destination</var>, <var>copySize</var>) are disjoint.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-command\" id=\"ref-for-abstract-opdef-enqueue-a-command⑤\" data-timeline=\"device\">Enqueue a command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline②⑥\">Queue timeline</a> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.copyTextureToTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-copytexturetotexture-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline②⑦\">Queue timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>blockWidth</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width①①\">texel block width</a> of <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture②③\">texture</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>blockHeight</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-height\" id=\"ref-for-texel-block-height①⓪\">texel block height</a> of <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture②④\">texture</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>srcOrigin</var> be <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①④\">origin</a></code>;</p>"
        },
        {
          "html": "<p>Let <var>srcBlockOriginX</var> be (<var>srcOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-x\" id=\"ref-for-gpuorigin3d-x④\">x</a> ÷ <var>blockWidth</var>).</p>"
        },
        {
          "html": "<p>Let <var>srcBlockOriginY</var> be (<var>srcOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-y\" id=\"ref-for-gpuorigin3d-y④\">y</a> ÷ <var>blockHeight</var>).</p>"
        },
        {
          "html": "<p>Let <var>dstOrigin</var> be <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①⑤\">origin</a></code>;</p>"
        },
        {
          "html": "<p>Let <var>dstBlockOriginX</var> be (<var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-x\" id=\"ref-for-gpuorigin3d-x⑤\">x</a> ÷ <var>blockWidth</var>).</p>"
        },
        {
          "html": "<p>Let <var>dstBlockOriginY</var> be (<var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-y\" id=\"ref-for-gpuorigin3d-y⑤\">y</a> ÷ <var>blockHeight</var>).</p>"
        },
        {
          "html": "<p>Let <var>blockColumns</var> be (<var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width②⑤\">width</a> ÷ <var>blockWidth</var>).</p>"
        },
        {
          "html": "<p>Let <var>blockRows</var> be (<var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height②②\">height</a> ÷ <var>blockHeight</var>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert②②\">Assert</a> that <var>srcBlockOriginX</var>, <var>srcBlockOriginY</var>, <var>dstBlockOriginX</var>, <var>dstBlockOriginY</var>, <var>blockColumns</var>, and <var>blockRows</var> are integers.</p>"
        },
        {
          "html": "For each <var>z</var> in the range [0, <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers②②\">depthOrArrayLayers</a> − 1]:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>srcSubregion</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-texture-copy-sub-region\" id=\"ref-for-abstract-opdef-texture-copy-sub-region②\" data-timeline=\"const\">texture copy sub-region</a> (<var>z</var> + <var>srcOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-z\" id=\"ref-for-gpuorigin3d-z⑤\">z</a>) of <var>source</var>.</p>"
            },
            {
              "html": "<p>Let <var>dstSubregion</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-texture-copy-sub-region\" id=\"ref-for-abstract-opdef-texture-copy-sub-region③\" data-timeline=\"const\">texture copy sub-region</a> (<var>z</var> + <var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-z\" id=\"ref-for-gpuorigin3d-z⑥\">z</a>) of <var>destination</var>.</p>"
            },
            {
              "html": "For each <var>y</var> in the range [0, <var>blockRows</var> − 1]:",
              "rationale": "for",
              "steps": [
                {
                  "html": "For each <var>x</var> in the range [0, <var>blockColumns</var> − 1]:",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block②⓪\">texel block</a> (<var>dstBlockOriginX</var> + <var>x</var>, <var>dstBlockOriginY</var> + <var>y</var>) of <var>dstSubregion</var> to be an <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#equivalent-texel-representation\" id=\"ref-for-equivalent-texel-representation②\">equivalent texel representation</a> to <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block②①\">texel block</a> (<var>srcBlockOriginX</var> + <var>x</var>, <var>srcBlockOriginY</var> + <var>y</var>) of <var>srcSubregion</var>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.resolveQuerySet",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-resolvequeryset-queryset-firstquery-querycount-destination-destinationoffset-queryset",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑦⓪\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⓪⑤\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot④⓪\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.resolveQuerySet",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-resolvequeryset-queryset-firstquery-querycount-destination-destinationoffset-queryset",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⓪⑥\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state⑦\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③②\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>querySet</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①⑤\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>destination</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①⑥\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage⑨\" data-timeline=\"const\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-query_resolve\" id=\"ref-for-dom-gpubufferusage-query_resolve②\">QUERY_RESOLVE</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>firstQuery</var> &lt; the number of queries in <var>querySet</var>.</p>\n           </li><li data-md=\"\">\n            <p>(<var>firstQuery</var> + <var>queryCount</var>) ≤ the number of queries in <var>querySet</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>destinationOffset</var> is a multiple of 256.</p>\n           </li><li data-md=\"\">\n            <p><var>destinationOffset</var> + 8 × <var>queryCount</var> ≤ <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①①\" data-timeline=\"const\">size</a></code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-command\" id=\"ref-for-abstract-opdef-enqueue-a-command⑥\" data-timeline=\"device\">Enqueue a command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline②⑧\">Queue timeline</a> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.resolveQuerySet",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-resolvequeryset-queryset-firstquery-querycount-destination-destinationoffset-queryset",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline②⑨\">Queue timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>queryIndex</var> be <var>firstQuery</var>.</p>"
        },
        {
          "html": "<p>Let <var>offset</var> be <var>destinationOffset</var>.</p>"
        },
        {
          "html": "While <var>queryIndex</var> &lt; <var>firstQuery</var> + <var>queryCount</var>:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set 8 bytes of <var>destination</var>, beginning at <var>offset</var>, to be the value of <var>querySet</var> at <var>queryIndex</var>.</p>"
            },
            {
              "html": "<p>Set <var>queryIndex</var> to be <var>queryIndex</var> + 1.</p>"
            },
            {
              "html": "<p>Set <var>offset</var> to be <var>offset</var> + 8.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.finish",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-finish-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑦①\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>commandBuffer</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucommandbuffer\" id=\"ref-for-gpucommandbuffer①⑧\">GPUCommandBuffer</a></code>.</p>"
        },
        {
          "html": "<p>Issue the <var>finish steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⓪⑦\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot④①\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p>Return <var>commandBuffer</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUCommandEncoder.finish",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-finish-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⓪⑧\">Device timeline</a> <var>finish steps</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>validationSucceeded</var> be <code>true</code> if all of the following requirements are met, and <code>false</code> otherwise.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid\" id=\"ref-for-abstract-opdef-valid⑨\" data-timeline=\"device\">valid</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot③\">[[state]]</a></code> must be \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-open\" id=\"ref-for-encoder-state-open③\">open</a>\".</p>\n           </li><li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-debug_group_stack-slot\" id=\"ref-for-dom-gpudebugcommandsmixin-debug_group_stack-slot\">[[debug_group_stack]]</a></code> must <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty\">be empty</a>.</p>\n           </li><li data-md=\"\">\n            <p>Every <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#usage-scopes\" id=\"ref-for-usage-scopes①⓪\">usage scope</a> contained in <var>this</var> must satisfy the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#usage-scope-validation\" id=\"ref-for-usage-scope-validation①\">usage scope validation</a>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot④\">[[state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-ended\" id=\"ref-for-encoder-state-ended①\">ended</a>\".</p>"
        },
        {
          "html": "If <var>validationSucceeded</var> is <code>false</code>, then:",
          "rationale": "generate",
          "steps": [
            {
              "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error②④\" data-timeline=\"device\">Generate a validation error</a>.</p>"
            },
            {
              "html": "<p>Return an <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③③\" data-timeline=\"device\">invalidated</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucommandbuffer\" id=\"ref-for-gpucommandbuffer①⑨\">GPUCommandBuffer</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>commandBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandbuffer-command_list-slot\" id=\"ref-for-dom-gpucommandbuffer-command_list-slot\">[[command_list]]</a></code> to <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot③\">[[commands]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUBindingCommandsMixin.setBindGroup",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-setbindgroup-index-bindgroup-dynamicoffsets-index",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑦②\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⓪⑨\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot④②\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUBindingCommandsMixin.setBindGroup",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-setbindgroup-index-bindgroup-dynamicoffsets-index",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①①⓪\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state⑧\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>Let <var>dynamicOffsetCount</var> be 0 if <code>bindGroup</code> is <code>null</code>, or <var>bindGroup</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-layout-slot\" id=\"ref-for-dom-gpubindgroup-layout-slot②\">[[layout]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayout-dynamicoffsetcount-slot\" id=\"ref-for-dom-gpubindgrouplayout-dynamicoffsetcount-slot①\">[[dynamicOffsetCount]]</a></code> if not.</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③④\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>index</var> must be &lt; <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot④③\" data-timeline=\"const\">[[device]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot①⑤\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxbindgroups\" id=\"ref-for-dom-supported-limits-maxbindgroups③\">maxBindGroups</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>dynamicOffsets</var>.length must equal <var>dynamicOffsetCount</var>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "If <var>bindGroup</var> is <code>null</code>:",
          "rationale": "remove",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-remove\" id=\"ref-for-map-remove\">Remove</a> <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-bind_groups-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-bind_groups-slot①\">[[bind_groups]]</a></code>[<var>index</var>].</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-remove\" id=\"ref-for-map-remove①\">Remove</a> <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-dynamic_offsets-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-dynamic_offsets-slot\">[[dynamic_offsets]]</a></code>[<var>index</var>].</p>"
            }
          ],
          "additional": [
            {
              "html": "Otherwise:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③⑤\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n           <div class=\"validusage\">\n            <ul>\n             <li data-md=\"\">\n              <p><var>bindGroup</var> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①⑦\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n             </li><li data-md=\"\">\n              <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-iterate-over-each-dynamic-binding-offset\" id=\"ref-for-abstract-opdef-iterate-over-each-dynamic-binding-offset\" data-timeline=\"device\">For each dynamic binding</a> (<var>bufferBinding</var>, <var>bufferLayout</var>, <var>dynamicOffsetIndex</var>) in <var>bindGroup</var>:</p>\n              <ul>\n               <li data-md=\"\">\n                <p><var>bufferBinding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-offset\" id=\"ref-for-dom-gpubufferbinding-offset①①\">offset</a></code> + <var>dynamicOffsets</var>[<var>dynamicOffsetIndex</var>] + <var>bufferLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-minbindingsize\" id=\"ref-for-dom-gpubufferbindinglayout-minbindingsize①⓪\">minBindingSize</a></code> must be ≤ <var>bufferBinding</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbinding-buffer\" id=\"ref-for-dom-gpubufferbinding-buffer⑨\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①②\" data-timeline=\"const\">size</a></code>.</p>\n               </li><li data-md=\"\">\n                <p>If <var>bufferLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-type\" id=\"ref-for-dom-gpubufferbindinglayout-type①⑦\">type</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindingtype-uniform\" id=\"ref-for-dom-gpubufferbindingtype-uniform⑨\">\"uniform\"</a></code>:</p>\n                <ul>\n                 <li data-md=\"\">\n                  <p><var>dynamicOffset</var> must be a multiple of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-minuniformbufferoffsetalignment\" id=\"ref-for-dom-supported-limits-minuniformbufferoffsetalignment②\">minUniformBufferOffsetAlignment</a></code>.</p>\n                </li></ul>\n               </li><li data-md=\"\">\n                <p>If <var>bufferLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-type\" id=\"ref-for-dom-gpubufferbindinglayout-type①⑧\">type</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindingtype-storage\" id=\"ref-for-dom-gpubufferbindingtype-storage①②\">\"storage\"</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindingtype-read-only-storage\" id=\"ref-for-dom-gpubufferbindingtype-read-only-storage⑨\">\"read-only-storage\"</a></code>:</p>\n                <ul>\n                 <li data-md=\"\">\n                  <p><var>dynamicOffset</var> must be a multiple of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-minstoragebufferoffsetalignment\" id=\"ref-for-dom-supported-limits-minstoragebufferoffsetalignment②\">minStorageBufferOffsetAlignment</a></code>.</p>\n                </li></ul>\n              </li></ul>\n            </li></ul>\n           </div>"
                },
                {
                  "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-bind_groups-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-bind_groups-slot②\">[[bind_groups]]</a></code>[<var>index</var>] to be <var>bindGroup</var>.</p>"
                },
                {
                  "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-dynamic_offsets-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-dynamic_offsets-slot①\">[[dynamic_offsets]]</a></code>[<var>index</var>] to be a copy of <var>dynamicOffsets</var>.</p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUBindingCommandsMixin.setBindGroup2",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-setbindgroup-index-bindgroup-dynamicoffsetsdata-dynamicoffsetsdatastart-dynamicoffsetsdatalength-index",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑦③\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If any of the following requirements are unmet, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror④\">RangeError</a></code> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>dynamicOffsetsDataStart</var> must be ≥ 0.</p>\n           </li><li data-md=\"\">\n            <p><var>dynamicOffsetsDataStart</var> + <var>dynamicOffsetsDataLength</var> must be ≤ <var>dynamicOffsetsData</var>.<code>length</code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Let <var>dynamicOffsets</var> be a <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①③\">list</a> containing the range, starting at index <var>dynamicOffsetsDataStart</var>, of <var>dynamicOffsetsDataLength</var> elements of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy\" id=\"ref-for-dfn-get-buffer-source-copy\">a copy of</a> <var>dynamicOffsetsData</var>.</p>"
        },
        {
          "html": "<p>Call <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-setbindgroup\" id=\"ref-for-dom-gpubindingcommandsmixin-setbindgroup①\">setBindGroup</a></code>(<var>index</var>, <var>bindGroup</var>, <var>dynamicOffsets</var>).</p>"
        }
      ]
    },
    {
      "name": "Iterate over each dynamic binding offset",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-iterate-over-each-dynamic-binding-offset",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-iterate-over-each-dynamic-binding-offset\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">Iterate over each dynamic binding offset</dfn> in a given <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubindgroup\" id=\"ref-for-gpubindgroup③④\">GPUBindGroup</a></code> <var>bindGroup</var> with a given list of <var>steps</var> to be executed for each dynamic offset, run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①①①\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>dynamicOffsetIndex</var> be <code>0</code>.</p>"
        },
        {
          "html": "<p>Let <var>layout</var> be <var>bindGroup</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-layout-slot\" id=\"ref-for-dom-gpubindgroup-layout-slot③\">[[layout]]</a></code>.</p>"
        },
        {
          "html": "For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgroupentry\" id=\"ref-for-dictdef-gpubindgroupentry①⓪\">GPUBindGroupEntry</a></code> <var>entry</var> in <var>bindGroup</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-entries-slot\" id=\"ref-for-dom-gpubindgroup-entries-slot②\">[[entries]]</a></code> ordered in increasing values of <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupentry-binding\" id=\"ref-for-dom-gpubindgroupentry-binding⑤\">binding</a></code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>bindingDescriptor</var> be the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry④⓪\">GPUBindGroupLayoutEntry</a></code> at <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayout-entrymap-slot\" id=\"ref-for-dom-gpubindgrouplayout-entrymap-slot⑥\">[[entryMap]]</a></code>[<var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupentry-binding\" id=\"ref-for-dom-gpubindgroupentry-binding⑥\">binding</a></code>]:</p>"
            },
            {
              "html": "If <var>bindingDescriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer③⑦\">buffer</a></code>?.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-hasdynamicoffset\" id=\"ref-for-dom-gpubufferbindinglayout-hasdynamicoffset⑦\">hasDynamicOffset</a></code> is <code>true</code>:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>bufferBinding</var> be <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupentry-resource\" id=\"ref-for-dom-gpubindgroupentry-resource③\">resource</a></code>.</p>"
                },
                {
                  "html": "<p>Let <var>bufferLayout</var> be <var>bindingDescriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer③⑧\">buffer</a></code>.</p>"
                },
                {
                  "html": "<p>Call <var>steps</var> with <var>bufferBinding</var>, <var>bufferLayout</var>, and <var>dynamicOffsetIndex</var>.</p>"
                },
                {
                  "html": "<p>Let <var>dynamicOffsetIndex</var> be <var>dynamicOffsetIndex</var> + <code>1</code></p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Validate encoder bind groups",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-encoder-bind-groups",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①①②\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If any of the following conditions are unsatisfied, return <code>false</code>:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p><var>pipeline</var> must not be <code>null</code>.</p>\n        </li><li data-md=\"\">\n         <p>All bind groups used by the pipeline must be set and compatible with the pipeline layout:\nFor each pair of (<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#typedefdef-gpuindex32\" id=\"ref-for-typedefdef-gpuindex32①②\">GPUIndex32</a></code> <var>index</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubindgrouplayout\" id=\"ref-for-gpubindgrouplayout④④\">GPUBindGroupLayout</a></code> <var>bindGroupLayout</var>) in <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinebase-layout-slot\" id=\"ref-for-dom-gpupipelinebase-layout-slot⑤\">[[layout]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayout-bindgrouplayouts-slot\" id=\"ref-for-dom-gpupipelinelayout-bindgrouplayouts-slot①⓪\">[[bindGroupLayouts]]</a></code>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p>Let <var>bindGroup</var> be <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-bind_groups-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-bind_groups-slot③\">[[bind_groups]]</a></code>[<var>index</var>].</p>\n          </li><li data-md=\"\">\n           <p><var>bindGroup</var> must not be <code>null</code>.</p>\n          </li><li data-md=\"\">\n           <p><var>bindGroup</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-layout-slot\" id=\"ref-for-dom-gpubindgroup-layout-slot④\">[[layout]]</a></code> must be <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#group-equivalent\" id=\"ref-for-group-equivalent②\" data-timeline=\"device\">group-equivalent</a> with <var>bindGroupLayout</var>.</p>\n          </li><li data-md=\"\">\n           <p>For each <var>entry</var> of <var>bindGroup</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroup-entries-slot\" id=\"ref-for-dom-gpubindgroup-entries-slot③\">[[entries]]</a></code>:</p>\n           <ul>\n            <li data-md=\"\">\n             <p>If <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupentry-prevalidatedsize-slot\" id=\"ref-for-dom-gpubindgroupentry-prevalidatedsize-slot①\">[[prevalidatedSize]]</a></code> is <code>false</code>:</p>\n             <ul>\n              <li data-md=\"\">\n               <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-effective-buffer-binding-size\" id=\"ref-for-abstract-opdef-effective-buffer-binding-size④\" data-timeline=\"device\">effective buffer binding size</a>(<var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgroupentry-resource\" id=\"ref-for-dom-gpubindgroupentry-resource④\">resource</a></code>) must be ≥ <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#minimum-buffer-binding-size\" id=\"ref-for-minimum-buffer-binding-size④\" data-timeline=\"const\">minimum buffer binding size</a> of the binding variable in <var>pipeline</var>’s shader that corresponds to <var>entry</var>.</p>\n             </li></ul>\n           </li></ul>\n         </li></ul>\n        </li><li data-md=\"\">\n         <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-encoder-bind-groups-alias-a-writable-resource\" id=\"ref-for-abstract-opdef-encoder-bind-groups-alias-a-writable-resource\" data-timeline=\"device\">Encoder bind groups alias a writable resource</a>(<var>encoder</var>, <var>pipeline</var>) must be <code>false</code>.</p>\n       </li></ul>\n      </div>"
        }
      ]
    },
    {
      "name": "Encoder bind groups alias a writable resource",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-encoder-bind-groups-alias-a-writable-resource",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①①③\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "For each <var>stage</var> in [<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-vertex\" id=\"ref-for-dom-gpushaderstage-vertex⑤\">VERTEX</a></code>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-fragment\" id=\"ref-for-dom-gpushaderstage-fragment④\">FRAGMENT</a></code>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-compute\" id=\"ref-for-dom-gpushaderstage-compute④\">COMPUTE</a></code>]:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>bufferBindings</var> be a <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①④\">list</a> of (<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubufferbinding\" id=\"ref-for-dictdef-gpubufferbinding①⑤\">GPUBufferBinding</a></code>, <code>boolean</code>) pairs,\nwhere the latter indicates whether the resource was used as writable.</p>"
            },
            {
              "html": "<p>Let <var>textureViews</var> be a <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①⑤\">list</a> of (<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview\" id=\"ref-for-gputextureview②④\">GPUTextureView</a></code>, <code>boolean</code>) pairs,\nwhere the latter indicates whether the resource was used as writable.</p>"
            },
            {
              "html": "For each pair of (<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#typedefdef-gpuindex32\" id=\"ref-for-typedefdef-gpuindex32①③\">GPUIndex32</a></code> <var>bindGroupIndex</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubindgrouplayout\" id=\"ref-for-gpubindgrouplayout④⑤\">GPUBindGroupLayout</a></code> <var>bindGroupLayout</var>) in <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinebase-layout-slot\" id=\"ref-for-dom-gpupipelinebase-layout-slot⑥\">[[layout]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpupipelinelayout-bindgrouplayouts-slot\" id=\"ref-for-dom-gpupipelinelayout-bindgrouplayouts-slot①①\">[[bindGroupLayouts]]</a></code>:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>bindGroup</var> be <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-bind_groups-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-bind_groups-slot④\">[[bind_groups]]</a></code>[<var>bindGroupIndex</var>].</p>"
                },
                {
                  "html": "<p>Let <var>bindGroupLayoutEntries</var> be <var>bindGroupLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayout-descriptor-slot\" id=\"ref-for-dom-gpubindgrouplayout-descriptor-slot②\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutdescriptor-entries\" id=\"ref-for-dom-gpubindgrouplayoutdescriptor-entries⑨\">entries</a></code>.</p>"
                },
                {
                  "html": "<p>Let <var>bufferRanges</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpubindgroup-bound-buffer-ranges\" id=\"ref-for-gpubindgroup-bound-buffer-ranges\" data-timeline=\"device\">bound buffer ranges</a> of <var>bindGroup</var>,\ngiven dynamic offsets <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-dynamic_offsets-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-dynamic_offsets-slot②\">[[dynamic_offsets]]</a></code>[<var>bindGroupIndex</var>]</p>"
                },
                {
                  "html": "For each (<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry④①\">GPUBindGroupLayoutEntry</a></code> <var>bindGroupLayoutEntry</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubufferbinding\" id=\"ref-for-dictdef-gpubufferbinding①⑥\">GPUBufferBinding</a></code> <var>resource</var>) in <var>bufferRanges</var>, in which <var>bindGroupLayoutEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-visibility\" id=\"ref-for-dom-gpubindgrouplayoutentry-visibility⑧\">visibility</a></code> contains <var>stage</var>:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>resourceWritable</var> be (<var>bindGroupLayoutEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-buffer\" id=\"ref-for-dom-gpubindgrouplayoutentry-buffer③⑨\">buffer</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindinglayout-type\" id=\"ref-for-dom-gpubufferbindinglayout-type①⑨\">type</a></code> == <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindingtype-storage\" id=\"ref-for-dom-gpubufferbindingtype-storage①③\">\"storage\"</a></code>).</p>"
                    },
                    {
                      "html": "For each pair (<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubufferbinding\" id=\"ref-for-dictdef-gpubufferbinding①⑦\">GPUBufferBinding</a></code> <var>pastResource</var>, <code>boolean</code> <var>pastResourceWritable</var>) in <var>bufferBindings</var>:",
                      "rationale": "if",
                      "steps": [
                        {
                          "html": "<p>If (<var>resourceWritable</var> or <var>pastResourceWritable</var>) is true, and <var>pastResource</var> and <var>resource</var> are <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#buffer-binding-aliasing\" id=\"ref-for-buffer-binding-aliasing\" data-timeline=\"device\">buffer-binding-aliasing</a>, return <code>true</code>.</p>"
                        }
                      ]
                    },
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑥\">Append</a> (<var>resource</var>, <var>resourceWritable</var>) to <var>bufferBindings</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry④②\">GPUBindGroupLayoutEntry</a></code> <var>bindGroupLayoutEntry</var> in <var>bindGroupLayoutEntries</var>, and corresponding <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview\" id=\"ref-for-gputextureview②⑤\">GPUTextureView</a></code> <var>resource</var> in <var>bindGroup</var>, in which <var>bindGroupLayoutEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-visibility\" id=\"ref-for-dom-gpubindgrouplayoutentry-visibility⑨\">visibility</a></code> contains <var>stage</var>:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>resourceWritable</var> be whether <var>bindGroupLayoutEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture②②\">storageTexture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpustoragetexturebindinglayout-access\" id=\"ref-for-dom-gpustoragetexturebindinglayout-access①①\">access</a></code> is a writable access mode.</p>"
                    },
                    {
                      "html": "<p>If <var>bindGroupLayoutEntry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-storagetexture\" id=\"ref-for-dom-gpubindgrouplayoutentry-storagetexture②③\">storageTexture</a></code> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑤①\">provided</a>, <strong>continue</strong>.</p>"
                    },
                    {
                      "html": "For each pair (<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview\" id=\"ref-for-gputextureview②⑥\">GPUTextureView</a></code> <var>pastResource</var>, <code>boolean</code> <var>pastResourceWritable</var>) in <var>textureViews</var>,",
                      "rationale": "if",
                      "steps": [
                        {
                          "html": "<p>If (<var>resourceWritable</var> or <var>pastResourceWritable</var>) is true, and <var>pastResource</var> and <var>resource</var> is <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texture-view-aliasing\" id=\"ref-for-texture-view-aliasing\">texture-view-aliasing</a>, return <code>true</code>.</p>"
                        }
                      ]
                    },
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑦\">Append</a> (<var>resource</var>, <var>resourceWritable</var>) to <var>textureViews</var>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <code>false</code>.</p>"
        }
      ]
    },
    {
      "name": "GPUDebugCommandsMixin.pushDebugGroup",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-pushdebuggroup-grouplabel-grouplabel",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑦④\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①①④\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot④④\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUDebugCommandsMixin.pushDebugGroup",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-pushdebuggroup-grouplabel-grouplabel",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①①⑤\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state⑨\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#stack-push\" id=\"ref-for-stack-push\">Push</a> <var>groupLabel</var> onto <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-debug_group_stack-slot\" id=\"ref-for-dom-gpudebugcommandsmixin-debug_group_stack-slot①\">[[debug_group_stack]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUDebugCommandsMixin.popDebugGroup",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑦⑤\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①①⑥\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot④⑤\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUDebugCommandsMixin.popDebugGroup",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①①⑦\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①⓪\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③⑥\" data-timeline=\"device\">invalidate</a> <var>this</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-debug_group_stack-slot\" id=\"ref-for-dom-gpudebugcommandsmixin-debug_group_stack-slot②\">[[debug_group_stack]]</a></code> must not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①\">be empty</a>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#stack-pop\" id=\"ref-for-stack-pop\">Pop</a> an entry off of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-debug_group_stack-slot\" id=\"ref-for-dom-gpudebugcommandsmixin-debug_group_stack-slot③\">[[debug_group_stack]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUDebugCommandsMixin.insertDebugMarker",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-insertdebugmarker-markerlabel-markerlabel",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑦⑥\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①①⑧\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot④⑥\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUDebugCommandsMixin.insertDebugMarker",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-insertdebugmarker-markerlabel-markerlabel",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①①⑨\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①①\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        }
      ]
    },
    {
      "name": "GPUComputePassEncoder.setPipeline",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-setpipeline-pipeline-pipeline",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑦⑦\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①②⓪\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot④⑦\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUComputePassEncoder.setPipeline",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-setpipeline-pipeline-pipeline",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①②①\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①②\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③⑦\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>pipeline</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①⑧\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-pipeline-slot\" id=\"ref-for-dom-gpucomputepassencoder-pipeline-slot\">[[pipeline]]</a></code> to be <var>pipeline</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUComputePassEncoder.dispatch",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-dispatchworkgroups-workgroupcountx-workgroupcounty-workgroupcountz-workgroupcountx",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑦⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①②②\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot④⑧\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUComputePassEncoder.dispatch",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-dispatchworkgroups-workgroupcountx-workgroupcounty-workgroupcountz-workgroupcountx",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①②③\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①③\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③⑧\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-encoder-bind-groups\" id=\"ref-for-abstract-opdef-validate-encoder-bind-groups①\" data-timeline=\"device\">Validate encoder bind groups</a>(<var>this</var>, <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-pipeline-slot\" id=\"ref-for-dom-gpucomputepassencoder-pipeline-slot①\">[[pipeline]]</a></code>)\nis <code>true</code>.</p>\n           </li><li data-md=\"\">\n            <p>all of <var>workgroupCountX</var>, <var>workgroupCountY</var> and <var>workgroupCountZ</var> are ≤ <var>this</var>.device.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcomputeworkgroupsperdimension\" id=\"ref-for-dom-supported-limits-maxcomputeworkgroupsperdimension\">maxComputeWorkgroupsPerDimension</a></code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Let <var>bindingState</var> be a snapshot of <var>this</var>’s current state.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-command\" id=\"ref-for-abstract-opdef-enqueue-a-command⑦\" data-timeline=\"device\">Enqueue a command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline③⓪\">Queue timeline</a>.</p>"
        }
      ]
    },
    {
      "name": "GPUComputePassEncoder.dispatch",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-dispatchworkgroups-workgroupcountx-workgroupcounty-workgroupcountz-workgroupcountx",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline③①\">Queue timeline</a> steps:",
      "rationale": "execute",
      "steps": [
        {
          "html": "<p>Execute a grid of workgroups with dimensions [<var>workgroupCountX</var>, <var>workgroupCountY</var>, <var>workgroupCountZ</var>] with <var>bindingState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-pipeline-slot\" id=\"ref-for-dom-gpucomputepassencoder-pipeline-slot②\">[[pipeline]]</a></code> using <var>bindingState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-bind_groups-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-bind_groups-slot⑤\">[[bind_groups]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUComputePassEncoder.dispatchIndirect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-dispatchworkgroupsindirect-indirectbuffer-indirectoffset-indirectbuffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑦⑨\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①②④\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot④⑨\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUComputePassEncoder.dispatchIndirect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-dispatchworkgroupsindirect-indirectbuffer-indirectoffset-indirectbuffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①②⑤\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①④\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate③⑨\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-encoder-bind-groups\" id=\"ref-for-abstract-opdef-validate-encoder-bind-groups②\" data-timeline=\"device\">Validate encoder bind groups</a>(<var>this</var>, <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-pipeline-slot\" id=\"ref-for-dom-gpucomputepassencoder-pipeline-slot③\">[[pipeline]]</a></code>)\nis <code>true</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectBuffer</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with①⑨\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage①⓪\" data-timeline=\"const\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-indirect\" id=\"ref-for-dom-gpubufferusage-indirect③\">INDIRECT</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectOffset</var> + sizeof(<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#indirect-dispatch-parameters\" id=\"ref-for-indirect-dispatch-parameters①\">indirect dispatch parameters</a>) ≤ <var>indirectBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①③\" data-timeline=\"const\">size</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectOffset</var> is a multiple of 4.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Add <var>indirectBuffer</var> to the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#usage-scopes\" id=\"ref-for-usage-scopes①①\">usage scope</a> as <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#internal-usage-input\" id=\"ref-for-internal-usage-input②\">input</a>.</p>"
        },
        {
          "html": "<p>Let <var>bindingState</var> be a snapshot of <var>this</var>’s current state.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-command\" id=\"ref-for-abstract-opdef-enqueue-a-command⑧\" data-timeline=\"device\">Enqueue a command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline③②\">Queue timeline</a>.</p>"
        }
      ]
    },
    {
      "name": "GPUComputePassEncoder.dispatchIndirect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-dispatchworkgroupsindirect-indirectbuffer-indirectoffset-indirectbuffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline③③\">Queue timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>workgroupCountX</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at <var>indirectOffset</var> bytes.</p>"
        },
        {
          "html": "<p>Let <var>workgroupCountY</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at\n(<var>indirectOffset</var> + 4) bytes.</p>"
        },
        {
          "html": "<p>Let <var>workgroupCountZ</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at\n(<var>indirectOffset</var> + 8) bytes.</p>"
        },
        {
          "html": "<p>If <var>workgroupCountX</var>, <var>workgroupCountY</var>, or <var>workgroupCountZ</var> is greater than <var>this</var>.device.limits.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcomputeworkgroupsperdimension\" id=\"ref-for-dom-supported-limits-maxcomputeworkgroupsperdimension①\">maxComputeWorkgroupsPerDimension</a></code>,\nstop.</p>"
        },
        {
          "html": "<p>Execute a grid of workgroups with dimensions [<var>workgroupCountX</var>, <var>workgroupCountY</var>, <var>workgroupCountZ</var>] with <var>bindingState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-pipeline-slot\" id=\"ref-for-dom-gpucomputepassencoder-pipeline-slot④\">[[pipeline]]</a></code> using <var>bindingState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-bind_groups-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-bind_groups-slot⑥\">[[bind_groups]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUComputePassEncoder.end",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑧⓪\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①②⑥\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑤⓪\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUComputePassEncoder.end",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①②⑦\">Device timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>parentEncoder</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-command_encoder-slot\" id=\"ref-for-dom-gpurenderpassencoder-command_encoder-slot\">[[command_encoder]]</a></code>.</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error②⑤\" data-timeline=\"device\">generate a validation error</a> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot⑤\">[[state]]</a></code> must be \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-open\" id=\"ref-for-encoder-state-open④\">open</a>\".</p>\n           </li><li data-md=\"\">\n            <p><var>parentEncoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot⑥\">[[state]]</a></code> must be \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-locked\" id=\"ref-for-encoder-state-locked③\">locked</a>\".</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot⑦\">[[state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-ended\" id=\"ref-for-encoder-state-ended②\">ended</a>\".</p>"
        },
        {
          "html": "<p>Set <var>parentEncoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot⑧\">[[state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-open\" id=\"ref-for-encoder-state-open⑤\">open</a>\".</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④⓪\" data-timeline=\"device\">invalidate</a> <var>parentEncoder</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid\" id=\"ref-for-abstract-opdef-valid①⓪\" data-timeline=\"device\">valid</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-debug_group_stack-slot\" id=\"ref-for-dom-gpudebugcommandsmixin-debug_group_stack-slot④\">[[debug_group_stack]]</a></code> must <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty②\">be empty</a>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-extend\" id=\"ref-for-list-extend\">Extend</a> <var>parentEncoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot④\">[[commands]]</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot⑤\">[[commands]]</a></code>.</p>"
        },
        {
          "html": "If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-endtimestampwrite-slot\" id=\"ref-for-dom-gpucomputepassencoder-endtimestampwrite-slot①\">[[endTimestampWrite]]</a></code> is not <code>null</code>:",
          "rationale": "extend",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-extend\" id=\"ref-for-list-extend①\">Extend</a> <var>parentEncoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot⑥\">[[commands]]</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-endtimestampwrite-slot\" id=\"ref-for-dom-gpucomputepassencoder-endtimestampwrite-slot②\">[[endTimestampWrite]]</a></code>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Valid Usage",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-gpurenderpassdescriptor-valid-usage",
      "html": "Given a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpudevice\" id=\"ref-for-gpudevice⑥①\">GPUDevice</a></code> <var>device</var> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpassdescriptor\" id=\"ref-for-dictdef-gpurenderpassdescriptor⑤\">GPURenderPassDescriptor</a></code> <var>this</var>, the following validation rules apply:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments⑦\">colorAttachments</a></code>.length must be ≤ <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot①⑥\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcolorattachments\" id=\"ref-for-dom-supported-limits-maxcolorattachments①\">maxColorAttachments</a></code>.</p>"
        },
        {
          "html": "<p>For each non-<code>null</code> <var>colorAttachment</var> in <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments⑧\">colorAttachments</a></code>:</p>\n      <ol>\n       <li data-md=\"\">\n        <p><var>colorAttachment</var> must meet the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-gpurenderpasscolorattachment-gpurenderpasscolorattachment-valid-usage\" id=\"ref-for-abstract-opdef-gpurenderpasscolorattachment-gpurenderpasscolorattachment-valid-usage\" data-timeline=\"device\">GPURenderPassColorAttachment Valid Usage</a> rules.</p>\n      </li></ol>",
          "ignored": [
            "colorAttachment must meet the GPURenderPassColorAttachment Valid Usage rules."
          ]
        },
        {
          "html": "<p>If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-depthstencilattachment\" id=\"ref-for-dom-gpurenderpassdescriptor-depthstencilattachment①⑥\">depthStencilAttachment</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑤②\">provided</a>:</p>\n      <ol>\n       <li data-md=\"\">\n        <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-depthstencilattachment\" id=\"ref-for-dom-gpurenderpassdescriptor-depthstencilattachment①⑦\">depthStencilAttachment</a></code> must meet the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-gpurenderpassdepthstencilattachment-gpurenderpassdepthstencilattachment-valid-usage\" id=\"ref-for-abstract-opdef-gpurenderpassdepthstencilattachment-gpurenderpassdepthstencilattachment-valid-usage①\" data-timeline=\"device\">GPURenderPassDepthStencilAttachment Valid Usage</a> rules.</p>\n      </li></ol>",
          "ignored": [
            "this.depthStencilAttachment must meet the GPURenderPassDepthStencilAttachment Valid Usage rules."
          ]
        },
        {
          "html": "<p>There must exist at least one attachment, either:</p>\n      <ul>\n       <li data-md=\"\">\n        <p>A non-<code>null</code> value in <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments⑨\">colorAttachments</a></code>, or</p>\n       </li><li data-md=\"\">\n        <p>A <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-depthstencilattachment\" id=\"ref-for-dom-gpurenderpassdescriptor-depthstencilattachment①⑧\">depthStencilAttachment</a></code>.</p>\n      </li></ul>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpurenderpassdescriptors-color-attachment-bytes-per-sample\" id=\"ref-for-abstract-opdef-validating-gpurenderpassdescriptors-color-attachment-bytes-per-sample\" data-timeline=\"device\">Validating GPURenderPassDescriptor’s color attachment bytes per sample</a>(<var>device</var>, <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments①⓪\">colorAttachments</a></code>) succeeds.</p>"
        },
        {
          "html": "<p>All <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view④\">view</a></code>s in non-<code>null</code> members of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments①①\">colorAttachments</a></code>,\nand <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-depthstencilattachment\" id=\"ref-for-dom-gpurenderpassdescriptor-depthstencilattachment①⑨\">depthStencilAttachment</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-view\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-view③\">view</a></code> if present, must have equal <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount⑦\">sampleCount</a></code>s.</p>"
        },
        {
          "html": "<p>For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view⑤\">view</a></code> in non-<code>null</code> members of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments①②\">colorAttachments</a></code> and <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-depthstencilattachment\" id=\"ref-for-dom-gpurenderpassdescriptor-depthstencilattachment②⓪\">depthStencilAttachment</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-view\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-view④\">view</a></code>,\nif present, the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-renderextent-slot\" id=\"ref-for-dom-gputextureview-renderextent-slot①\">[[renderExtent]]</a></code> must match.</p>"
        },
        {
          "html": "<p>If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-occlusionqueryset\" id=\"ref-for-dom-gpurenderpassdescriptor-occlusionqueryset②\">occlusionQuerySet</a></code> is not <code>null</code>:</p>\n      <ol>\n       <li data-md=\"\">\n        <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-occlusionqueryset\" id=\"ref-for-dom-gpurenderpassdescriptor-occlusionqueryset③\">occlusionQuerySet</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuqueryset-type\" id=\"ref-for-dom-gpuqueryset-type\">type</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuquerytype-occlusion\" id=\"ref-for-dom-gpuquerytype-occlusion\">occlusion</a></code>.</p>\n      </li></ol>",
          "ignored": [
            "this.occlusionQuerySet.type must be occlusion."
          ]
        },
        {
          "html": "<p>If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-timestampwrites\" id=\"ref-for-dom-gpurenderpassdescriptor-timestampwrites③\">timestampWrites</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑤③\">provided</a>:</p>\n      <ul>\n       <li data-md=\"\">\n        <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-timestampwrites\" id=\"ref-for-abstract-opdef-validate-timestampwrites①\" data-timeline=\"device\">Validate timestampWrites</a>(<var>device</var>, <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-timestampwrites\" id=\"ref-for-dom-gpurenderpassdescriptor-timestampwrites④\">timestampWrites</a></code>)\nmust return true.</p>\n      </li></ul>"
        }
      ]
    },
    {
      "name": "Validating GPURenderPassDescriptor’s color attachment bytes per sample",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpurenderpassdescriptors-color-attachment-bytes-per-sample",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①②⑧\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>formats</var> be an empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①⑥\">list</a>&lt;<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat\" id=\"ref-for-enumdef-gputextureformat③⑥\">GPUTextureFormat</a></code>?&gt;</p>"
        },
        {
          "html": "For each <var>colorAttachment</var> in <var>colorAttachments</var>:",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>colorAttachment</var> is <code>undefined</code>, continue.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑧\">Append</a> <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view⑥\">view</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot⑤\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format①④\">format</a></code> to <var>formats</var>.</p>"
            }
          ]
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-calculating-color-attachment-bytes-per-sample\" id=\"ref-for-abstract-opdef-calculating-color-attachment-bytes-per-sample①\" data-timeline=\"const\">Calculating color attachment bytes per sample</a>(<var>formats</var>) must be ≤ <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot①⑦\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcolorattachmentbytespersample\" id=\"ref-for-dom-supported-limits-maxcolorattachmentbytespersample②\">maxColorAttachmentBytesPerSample</a></code>.</p>"
        }
      ]
    },
    {
      "html": "Given a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpasscolorattachment\" id=\"ref-for-dictdef-gpurenderpasscolorattachment⑤\">GPURenderPassColorAttachment</a></code> <var>this</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>renderViewDescriptor</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view①③\">view</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot⑥\">[[descriptor]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>resolveViewDescriptor</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-resolvetarget\" id=\"ref-for-dom-gpurenderpasscolorattachment-resolvetarget③\">resolveTarget</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot⑦\">[[descriptor]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>renderTexture</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view①④\">view</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-texture-slot\" id=\"ref-for-dom-gputextureview-texture-slot④\">[[texture]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>resolveTexture</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-resolvetarget\" id=\"ref-for-dom-gpurenderpasscolorattachment-resolvetarget④\">resolveTarget</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-texture-slot\" id=\"ref-for-dom-gputextureview-texture-slot⑤\">[[texture]]</a></code>.</p>"
        },
        {
          "html": "<p>The following validation rules apply:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p><var>renderViewDescriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format①⑤\">format</a></code> must be a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#color-renderable-format\" id=\"ref-for-color-renderable-format\">color renderable format</a>.</p>\n        </li><li data-md=\"\">\n         <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view①⑤\">view</a></code> must be a <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-renderable-texture-view\" id=\"ref-for-abstract-opdef-renderable-texture-view\" data-timeline=\"device\">renderable texture view</a>.</p>\n        </li><li data-md=\"\">\n         <p>If <var>renderViewDescriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension①⑥\">dimension</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-3d\" id=\"ref-for-dom-gputextureviewdimension-3d⑨\">\"3d\"</a></code>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-depthslice\" id=\"ref-for-dom-gpurenderpasscolorattachment-depthslice④\">depthSlice</a></code> must <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑤⑤\">be provided</a> and must\nbe &lt; the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers②③\">depthOrArrayLayers</a> of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#logical-miplevel-specific-texture-extent\" id=\"ref-for-logical-miplevel-specific-texture-extent②\">logical miplevel-specific texture extent</a> of the <var>renderTexture</var> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#subresource\" id=\"ref-for-subresource①⑥\">subresource</a> at <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#mipmap-level\" id=\"ref-for-mipmap-level④\">mipmap level</a> <var>renderViewDescriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-basemiplevel\" id=\"ref-for-dom-gputextureviewdescriptor-basemiplevel⑧\">baseMipLevel</a></code>.</p>\n         </li></ul>\n         <p>Otherwise:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-depthslice\" id=\"ref-for-dom-gpurenderpasscolorattachment-depthslice⑤\">depthSlice</a></code> must not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑤⑥\">be provided</a>.</p>\n         </li></ul>\n        </li><li data-md=\"\">\n         <p>If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-loadop\" id=\"ref-for-dom-gpurenderpasscolorattachment-loadop③\">loadOp</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuloadop-clear\" id=\"ref-for-dom-gpuloadop-clear⑥\">\"clear\"</a></code>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p>Converting the IDL value <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-clearvalue\" id=\"ref-for-dom-gpurenderpasscolorattachment-clearvalue⑤\">clearValue</a></code> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-to-a-texel-value-of-texture-format\" id=\"ref-for-abstract-opdef-to-a-texel-value-of-texture-format①\" data-timeline=\"device\">to a texel value of texture format</a> <var>renderViewDescriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format①⑥\">format</a></code> must not throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror①①\">TypeError</a></code>.</p>\n           \n         </li></ul>\n        </li><li data-md=\"\">\n         <p>If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-resolvetarget\" id=\"ref-for-dom-gpurenderpasscolorattachment-resolvetarget⑤\">resolveTarget</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑤⑦\">provided</a>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><var>renderTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount⑧\">sampleCount</a></code> must be &gt; 1.</p>\n          </li><li data-md=\"\">\n           <p><var>resolveTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount⑨\">sampleCount</a></code> must be 1.</p>\n          </li><li data-md=\"\">\n           <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-resolvetarget\" id=\"ref-for-dom-gpurenderpasscolorattachment-resolvetarget⑥\">resolveTarget</a></code> must be a non-3d <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-renderable-texture-view\" id=\"ref-for-abstract-opdef-renderable-texture-view①\" data-timeline=\"device\">renderable texture view</a>.</p>\n          </li><li data-md=\"\">\n           <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-resolvetarget\" id=\"ref-for-dom-gpurenderpasscolorattachment-resolvetarget⑦\">resolveTarget</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-renderextent-slot\" id=\"ref-for-dom-gputextureview-renderextent-slot②\">[[renderExtent]]</a></code> and <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view①⑥\">view</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-renderextent-slot\" id=\"ref-for-dom-gputextureview-renderextent-slot③\">[[renderExtent]]</a></code> must match.</p>\n          </li><li data-md=\"\">\n           <p><var>resolveViewDescriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format①⑦\">format</a></code> must equal <var>renderViewDescriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format①⑧\">format</a></code>.</p>\n          </li><li data-md=\"\">\n           <p><var>resolveTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-format\" id=\"ref-for-dom-gputexturedescriptor-format①②\">format</a></code> must equal <var>renderTexture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-format\" id=\"ref-for-dom-gputexturedescriptor-format①③\">format</a></code>.</p>\n          </li><li data-md=\"\">\n           <p><var>resolveViewDescriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format①⑨\">format</a></code> must support resolve according to <a href=\"https://gpuweb.github.io/gpuweb/#plain-color-formats\">§ 26.1.1 Plain color formats</a>.</p>\n         </li></ul>\n       </li></ul>\n      </div>"
        }
      ]
    },
    {
      "name": "renderable texture view",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-renderable-texture-view",
      "html": "",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>descriptor</var> be <var>view</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot⑧\">[[descriptor]]</a></code>.</p>"
        },
        {
          "html": "<p><var>view</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-texture-slot\" id=\"ref-for-dom-gputextureview-texture-slot⑥\">[[texture]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-usage\" id=\"ref-for-dom-gputexture-usage⑥\">usage</a></code> must contain <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-render_attachment\" id=\"ref-for-dom-gputextureusage-render_attachment⑨\">RENDER_ATTACHMENT</a></code>.</p>"
        },
        {
          "html": "<p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension①⑦\">dimension</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-2d\" id=\"ref-for-dom-gputextureviewdimension-2d⑧\">\"2d\"</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-2d-array\" id=\"ref-for-dom-gputextureviewdimension-2d-array⑦\">\"2d-array\"</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdimension-3d\" id=\"ref-for-dom-gputextureviewdimension-3d①⓪\">\"3d\"</a></code>.</p>"
        },
        {
          "html": "<p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-miplevelcount\" id=\"ref-for-dom-gputextureviewdescriptor-miplevelcount⑦\">mipLevelCount</a></code> must be 1.</p>"
        },
        {
          "html": "<p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-arraylayercount\" id=\"ref-for-dom-gputextureviewdescriptor-arraylayercount①④\">arrayLayerCount</a></code> must be 1.</p>"
        },
        {
          "html": "<p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-aspect\" id=\"ref-for-dom-gputextureviewdescriptor-aspect⑥\">aspect</a></code> must refer to all <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect\" id=\"ref-for-aspect⑤\">aspects</a> of <var>view</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-texture-slot\" id=\"ref-for-dom-gputextureview-texture-slot⑦\">[[texture]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "Calculating color attachment bytes per sample",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-calculating-color-attachment-bytes-per-sample",
      "html": "<strong>Returns:</strong> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#typedefdef-gpusize32\" id=\"ref-for-typedefdef-gpusize32⑥④\">GPUSize32</a></code>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>total</var> be 0.</p>"
        },
        {
          "html": "For each non-null <var>format</var> in <var>formats</var>",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert②③\">Assert</a>: <var>format</var> is a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#color-renderable-format\" id=\"ref-for-color-renderable-format①\">color renderable format</a>.</p>"
            },
            {
              "html": "<p>Let <var>renderTargetPixelByteCost</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#render-target-pixel-byte-cost\" id=\"ref-for-render-target-pixel-byte-cost\">render target pixel byte cost</a> of <var>format</var>.</p>"
            },
            {
              "html": "<p>Let <var>renderTargetComponentAlignment</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#render-target-component-alignment\" id=\"ref-for-render-target-component-alignment\">render target component alignment</a> of <var>format</var>.</p>"
            },
            {
              "html": "<p>Round <var>total</var> up to the smallest multiple of <var>renderTargetComponentAlignment</var> greater than or equal to <var>total</var>.</p>"
            },
            {
              "html": "<p>Add <var>renderTargetPixelByteCost</var> to <var>total</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>total</var>.</p>"
        }
      ]
    },
    {
      "name": "derive render targets layout from pass",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-derive-render-targets-layout-from-pass",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①③⓪\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>layout</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpasslayout\" id=\"ref-for-dictdef-gpurenderpasslayout④\">GPURenderPassLayout</a></code> object.</p>"
        },
        {
          "html": "For each <var>colorAttachment</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-colorattachments\" id=\"ref-for-dom-gpurenderpassdescriptor-colorattachments①③\">colorAttachments</a></code>:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>colorAttachment</var> is not <code>null</code>:",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-samplecount\" id=\"ref-for-dom-gpurenderpasslayout-samplecount②\">sampleCount</a></code> to <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view①⑦\">view</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-texture-slot\" id=\"ref-for-dom-gputextureview-texture-slot⑧\">[[texture]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount①⓪\">sampleCount</a></code>.</p>"
                },
                {
                  "html": "<p>Append <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view①⑧\">view</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot①⓪\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format②①\">format</a></code> to <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-colorformats\" id=\"ref-for-dom-gpurenderpasslayout-colorformats③\">colorFormats</a></code>.</p>"
                }
              ]
            },
            {
              "html": "Otherwise:",
              "rationale": "append",
              "steps": [
                {
                  "html": "<p>Append <code>null</code> to <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-colorformats\" id=\"ref-for-dom-gpurenderpasslayout-colorformats④\">colorFormats</a></code>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>depthStencilAttachment</var> be <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-depthstencilattachment\" id=\"ref-for-dom-gpurenderpassdescriptor-depthstencilattachment②①\">depthStencilAttachment</a></code>,\nor <code>null</code> if not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑥⑦\">provided</a>.</p>"
        },
        {
          "html": "If <var>depthStencilAttachment</var> is not <code>null</code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>view</var> be <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-view\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-view①⑦\">view</a></code>.</p>"
            },
            {
              "html": "<p>Set <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-samplecount\" id=\"ref-for-dom-gpurenderpasslayout-samplecount③\">sampleCount</a></code> to <var>view</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-texture-slot\" id=\"ref-for-dom-gputextureview-texture-slot⑨\">[[texture]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount①①\">sampleCount</a></code>.</p>"
            },
            {
              "html": "<p>Set <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-depthstencilformat\" id=\"ref-for-dom-gpurenderpasslayout-depthstencilformat②\">depthStencilFormat</a></code> to <var>view</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot①①\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-format\" id=\"ref-for-dom-gputextureviewdescriptor-format②②\">format</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>layout</var>.</p>"
        }
      ]
    },
    {
      "name": "derive render targets layout from pipeline",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-derive-render-targets-layout-from-pipeline",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①③①\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>layout</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpasslayout\" id=\"ref-for-dictdef-gpurenderpasslayout⑥\">GPURenderPassLayout</a></code> object.</p>"
        },
        {
          "html": "<p>Set <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-samplecount\" id=\"ref-for-dom-gpurenderpasslayout-samplecount④\">sampleCount</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-multisample\" id=\"ref-for-dom-gpurenderpipelinedescriptor-multisample④\">multisample</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumultisamplestate-count\" id=\"ref-for-dom-gpumultisamplestate-count③\">count</a></code>.</p>"
        },
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-depthstencil\" id=\"ref-for-dom-gpurenderpipelinedescriptor-depthstencil⑨\">depthStencil</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑥⑧\">provided</a>:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-depthstencilformat\" id=\"ref-for-dom-gpurenderpasslayout-depthstencilformat③\">depthStencilFormat</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-depthstencil\" id=\"ref-for-dom-gpurenderpipelinedescriptor-depthstencil①⓪\">depthStencil</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudepthstencilstate-format\" id=\"ref-for-dom-gpudepthstencilstate-format⑦\">format</a></code>.</p>"
            }
          ]
        },
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment②⓪\">fragment</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑥⑨\">provided</a>:",
          "rationale": "for",
          "steps": [
            {
              "html": "For each <var>colorTarget</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment②①\">fragment</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpufragmentstate-targets\" id=\"ref-for-dom-gpufragmentstate-targets①②\">targets</a></code>:",
              "rationale": "append",
              "steps": [
                {
                  "html": "<p>Append <var>colorTarget</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucolortargetstate-format\" id=\"ref-for-dom-gpucolortargetstate-format⑧\">format</a></code> to <var>layout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-colorformats\" id=\"ref-for-dom-gpurenderpasslayout-colorformats⑤\">colorFormats</a></code> if <var>colorTarget</var> is not <code>null</code>, or append <code>null</code> otherwise.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>layout</var>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.end",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑧①\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①③②\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑤①\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.end",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①③③\">Device timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>parentEncoder</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-command_encoder-slot\" id=\"ref-for-dom-gpurenderpassencoder-command_encoder-slot①\">[[command_encoder]]</a></code>.</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error②⑥\" data-timeline=\"device\">generate a validation error</a> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot⑨\">[[state]]</a></code> must be \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-open\" id=\"ref-for-encoder-state-open⑥\">open</a>\".</p>\n           </li><li data-md=\"\">\n            <p><var>parentEncoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot①⓪\">[[state]]</a></code> must be \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-locked\" id=\"ref-for-encoder-state-locked④\">locked</a>\".</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot①①\">[[state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-ended\" id=\"ref-for-encoder-state-ended③\">ended</a>\".</p>"
        },
        {
          "html": "<p>Set <var>parentEncoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot①②\">[[state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-open\" id=\"ref-for-encoder-state-open⑦\">open</a>\".</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④①\" data-timeline=\"device\">invalidate</a> <var>parentEncoder</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid\" id=\"ref-for-abstract-opdef-valid①①\" data-timeline=\"device\">valid</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-debug_group_stack-slot\" id=\"ref-for-dom-gpudebugcommandsmixin-debug_group_stack-slot⑤\">[[debug_group_stack]]</a></code> must <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty③\">be empty</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-occlusion_query_active-slot\" id=\"ref-for-dom-gpurenderpassencoder-occlusion_query_active-slot\">[[occlusion_query_active]]</a></code> must be <code>false</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawcount-slot\" id=\"ref-for-dom-gpurendercommandsmixin-drawcount-slot①\">[[drawCount]]</a></code> must be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-maxdrawcount-slot\" id=\"ref-for-dom-gpurenderpassencoder-maxdrawcount-slot②\">[[maxDrawCount]]</a></code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-extend\" id=\"ref-for-list-extend②\">Extend</a> <var>parentEncoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot⑦\">[[commands]]</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot⑧\">[[commands]]</a></code>.</p>"
        },
        {
          "html": "If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-endtimestampwrite-slot\" id=\"ref-for-dom-gpurenderpassencoder-endtimestampwrite-slot①\">[[endTimestampWrite]]</a></code> is not <code>null</code>:",
          "rationale": "extend",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-extend\" id=\"ref-for-list-extend③\">Extend</a> <var>parentEncoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot⑨\">[[commands]]</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-endtimestampwrite-slot\" id=\"ref-for-dom-gpurenderpassencoder-endtimestampwrite-slot②\">[[endTimestampWrite]]</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline③④\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.end",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline③⑤\">Queue timeline</a> steps:",
      "rationale": "for",
      "steps": [
        {
          "html": "For each non-<code>null</code> <var>colorAttachment</var> in <var>renderState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-colorattachments-slot\" id=\"ref-for-dom-renderstate-colorattachments-slot①\">[[colorAttachments]]</a></code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>colorView</var> be <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-view\" id=\"ref-for-dom-gpurenderpasscolorattachment-view①⑨\">view</a></code>.</p>"
            },
            {
              "html": "If <var>colorView</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureview-descriptor-slot\" id=\"ref-for-dom-gputextureview-descriptor-slot①②\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureviewdescriptor-dimension\" id=\"ref-for-dom-gputextureviewdescriptor-dimension①⑧\">dimension</a></code> is:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "\"3d\"",
                      "steps": [
                        {
                          "html": "<p>Let <var>colorSubregion</var> be <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-depthslice\" id=\"ref-for-dom-gpurenderpasscolorattachment-depthslice⑥\">depthSlice</a></code> of <var>colorView</var>.</p>"
                        }
                      ]
                    },
                    {
                      "case": "Otherwise",
                      "steps": [
                        {
                          "html": "<p>Let <var>colorSubregion</var> be <var>colorView</var>.</p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "html": "If <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-resolvetarget\" id=\"ref-for-dom-gpurenderpasscolorattachment-resolvetarget⑧\">resolveTarget</a></code> is not <code>null</code>:",
              "rationale": "resolve",
              "steps": [
                {
                  "html": "<p>Resolve the multiple samples of every <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block②④\">texel</a> of <var>colorSubregion</var> to a single\nsample and copy to <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-resolvetarget\" id=\"ref-for-dom-gpurenderpasscolorattachment-resolvetarget⑨\">resolveTarget</a></code>.</p>"
                }
              ]
            },
            {
              "html": "If <var>colorAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasscolorattachment-loadop\" id=\"ref-for-dom-gpurenderpasscolorattachment-loadop④\">loadOp</a></code> is:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "\"store\"",
                      "steps": [
                        {
                          "html": "<p>Ensure the contents of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory⑨\">framebuffer memory</a> associated with <var>colorSubregion</var> are stored in <var>colorSubregion</var>.</p>"
                        }
                      ]
                    },
                    {
                      "case": "\"discard\"",
                      "steps": [
                        {
                          "html": "<p>Set every <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block②⑤\">texel</a> of <var>colorSubregion</var> to zero.</p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>depthStencilAttachment</var> be <var>renderState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-depthstencilattachment-slot\" id=\"ref-for-dom-renderstate-depthstencilattachment-slot①\">[[depthStencilAttachment]]</a></code>.</p>"
        },
        {
          "html": "If <var>depthStencilAttachment</var> is not <code>null</code>:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-depthloadop\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-depthloadop⑥\">depthLoadOp</a></code> is:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "Not provided",
                      "steps": [
                        {
                          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert②④\">Assert</a> that <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-depthreadonly\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-depthreadonly⑤\">depthReadOnly</a></code> is <code>true</code> and leave the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-depth\" id=\"ref-for-aspect-depth⑦\">depth</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources⑧\">subresource</a> of <var>depthStencilView</var> unchanged.</p>"
                        }
                      ]
                    },
                    {
                      "case": "\"store\"",
                      "steps": [
                        {
                          "html": "<p>Ensure the contents of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory①⓪\">framebuffer memory</a> associated with the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-depth\" id=\"ref-for-aspect-depth⑧\">depth</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources⑨\">subresource</a> of <var>depthStencilView</var> are stored in <var>depthStencilView</var>.</p>"
                        }
                      ]
                    },
                    {
                      "case": "\"discard\"",
                      "steps": [
                        {
                          "html": "<p>Set every <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block②⑥\">texel</a> in the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-depth\" id=\"ref-for-aspect-depth⑨\">depth</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources①⓪\">subresource</a> of <var>depthStencilView</var> to zero.</p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "html": "If <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-stencilloadop\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-stencilloadop⑤\">stencilLoadOp</a></code> is:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "Not provided",
                      "steps": [
                        {
                          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert②⑤\">Assert</a> that <var>depthStencilAttachment</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdepthstencilattachment-stencilreadonly\" id=\"ref-for-dom-gpurenderpassdepthstencilattachment-stencilreadonly⑤\">stencilReadOnly</a></code> is <code>true</code> and leave the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-stencil\" id=\"ref-for-aspect-stencil⑥\">stencil</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources①①\">subresource</a> of <var>depthStencilView</var> unchanged.</p>"
                        }
                      ]
                    },
                    {
                      "case": "\"store\"",
                      "steps": [
                        {
                          "html": "<p>Ensure the contents of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer-memory\" id=\"ref-for-framebuffer-memory①①\">framebuffer memory</a> associated with the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-stencil\" id=\"ref-for-aspect-stencil⑦\">stencil</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources①②\">subresource</a> of <var>depthStencilView</var> are stored in <var>depthStencilView</var>.</p>"
                        }
                      ]
                    },
                    {
                      "case": "\"discard\"",
                      "steps": [
                        {
                          "html": "<p>Set every <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block②⑦\">texel</a> in the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#aspect-stencil\" id=\"ref-for-aspect-stencil⑧\">stencil</a> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gputextureview-subresources\" id=\"ref-for-gputextureview-subresources①③\">subresource</a> <var>depthStencilView</var> to zero.</p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>renderState</var> be <code>null</code>.</p>"
        }
      ]
    },
    {
      "name": "Enqueue a render command",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-enqueue-a-render-command\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">Enqueue a render command</dfn> on <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpurendercommandsmixin\" id=\"ref-for-gpurendercommandsmixin⑥\">GPURenderCommandsMixin</a></code> <var>encoder</var> which\n    issues the steps of a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpu-command\" id=\"ref-for-gpu-command①⑤\">GPU Command</a> <var>command</var> with <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#renderstate\" id=\"ref-for-renderstate③\">RenderState</a> <var>renderState</var>, run the\n    following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①③④\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑨\">Append</a> <var>command</var> to <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot①⓪\">[[commands]]</a></code>.</p>"
        },
        {
          "html": "When <var>command</var> is executed as part of a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucommandbuffer\" id=\"ref-for-gpucommandbuffer②①\">GPUCommandBuffer</a></code> <var>commandBuffer</var>:",
          "rationale": "issue",
          "steps": [
            {
              "html": "<p>Issue the steps of <var>command</var> with <var>commandBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandbuffer-renderstate-slot\" id=\"ref-for-dom-gpucommandbuffer-renderstate-slot③\">[[renderState]]</a></code> as <var>renderState</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.setPipeline",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-setpipeline-pipeline-pipeline",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑧②\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①③⑤\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑤②\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.setPipeline",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-setpipeline-pipeline-pipeline",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①③⑥\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①⑤\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>Let <var>pipelineTargetsLayout</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-derive-render-targets-layout-from-pipeline\" id=\"ref-for-abstract-opdef-derive-render-targets-layout-from-pipeline①\" data-timeline=\"device\">derive render targets layout from pipeline</a>(<var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-descriptor-slot\" id=\"ref-for-dom-gpurenderpipeline-descriptor-slot①\">[[descriptor]]</a></code>).</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④②\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>pipeline</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with②⓪\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-layout-slot\" id=\"ref-for-dom-gpurendercommandsmixin-layout-slot①\">[[layout]]</a></code> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#render-pass-layout-equals\" id=\"ref-for-render-pass-layout-equals\">equals</a> <var>pipelineTargetsLayout</var>.</p>\n           </li><li data-md=\"\">\n            <p>If <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-writesdepth-slot\" id=\"ref-for-dom-gpurenderpipeline-writesdepth-slot②\">[[writesDepth]]</a></code>: <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-depthreadonly-slot\" id=\"ref-for-dom-gpurendercommandsmixin-depthreadonly-slot①\">[[depthReadOnly]]</a></code> must be <code>false</code>.</p>\n           </li><li data-md=\"\">\n            <p>If <var>pipeline</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-writesstencil-slot\" id=\"ref-for-dom-gpurenderpipeline-writesstencil-slot③\">[[writesStencil]]</a></code>: <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-stencilreadonly-slot\" id=\"ref-for-dom-gpurendercommandsmixin-stencilreadonly-slot①\">[[stencilReadOnly]]</a></code> must be <code>false</code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-pipeline-slot\" id=\"ref-for-dom-gpurendercommandsmixin-pipeline-slot\">[[pipeline]]</a></code> to be <var>pipeline</var>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.setIndexBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-setindexbuffer-buffer-indexformat-offset-size-buffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑧③\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①③⑦\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑤③\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.setIndexBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-setindexbuffer-buffer-indexformat-offset-size-buffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①③⑧\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①⑥\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If <var>size</var> is missing, set <var>size</var> to max(0, <var>buffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①④\" data-timeline=\"const\">size</a></code> - <var>offset</var>).</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④③\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>buffer</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with②①\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>buffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage①①\" data-timeline=\"const\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-index\" id=\"ref-for-dom-gpubufferusage-index③\">INDEX</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>offset</var> is a multiple of <var>indexFormat</var>’s byte size.</p>\n           </li><li data-md=\"\">\n            <p><var>offset</var> + <var>size</var> ≤ <var>buffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①⑤\" data-timeline=\"const\">size</a></code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Add <var>buffer</var> to the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#usage-scopes\" id=\"ref-for-usage-scopes①②\">usage scope</a> as <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#internal-usage-input\" id=\"ref-for-internal-usage-input③\">input</a>.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer-slot③\">[[index_buffer]]</a></code> to be <var>buffer</var>.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_format-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_format-slot\">[[index_format]]</a></code> to be <var>indexFormat</var>.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer_offset-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer_offset-slot\">[[index_buffer_offset]]</a></code> to be <var>offset</var>.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer_size-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer_size-slot\">[[index_buffer_size]]</a></code> to be <var>size</var>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.setVertexBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-setvertexbuffer-slot-buffer-offset-size-slot",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑧④\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①③⑨\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑤④\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.setVertexBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-setvertexbuffer-slot-buffer-offset-size-slot",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④⓪\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①⑦\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>Let <var>bufferSize</var> be 0 if <var>buffer</var> is <code>null</code>, or <var>buffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①⑥\" data-timeline=\"const\">size</a></code> if not.</p>"
        },
        {
          "html": "<p>If <var>size</var> is missing, set <var>size</var> to max(0, <var>bufferSize</var> - <var>offset</var>).</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④④\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>slot</var> must be &lt; <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑤⑤\" data-timeline=\"const\">[[device]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot①⑧\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxvertexbuffers\" id=\"ref-for-dom-supported-limits-maxvertexbuffers②\">maxVertexBuffers</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>offset</var> must be a multiple of 4.</p>\n           </li><li data-md=\"\">\n            <p><var>offset</var> + <var>size</var> must be ≤ <var>bufferSize</var>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "If <var>buffer</var> is <code>null</code>:",
          "rationale": "remove",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-remove\" id=\"ref-for-map-remove②\">Remove</a> <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-vertex_buffers-slot\" id=\"ref-for-dom-gpurendercommandsmixin-vertex_buffers-slot\">[[vertex_buffers]]</a></code>[<var>slot</var>].</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-remove\" id=\"ref-for-map-remove③\">Remove</a> <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-vertex_buffer_sizes-slot\" id=\"ref-for-dom-gpurendercommandsmixin-vertex_buffer_sizes-slot\">[[vertex_buffer_sizes]]</a></code>[<var>slot</var>].</p>"
            }
          ],
          "additional": [
            {
              "html": "Otherwise:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④⑤\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n           <div class=\"validusage\">\n            <ul>\n             <li data-md=\"\">\n              <p><var>buffer</var> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with②②\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n             </li><li data-md=\"\">\n              <p><var>buffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage①②\" data-timeline=\"const\">usage</a></code> must contain <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-vertex\" id=\"ref-for-dom-gpubufferusage-vertex③\">VERTEX</a></code>.</p>\n            </li></ul>\n           </div>"
                },
                {
                  "html": "<p>Add <var>buffer</var> to the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#usage-scopes\" id=\"ref-for-usage-scopes①③\">usage scope</a> as <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#internal-usage-input\" id=\"ref-for-internal-usage-input④\">input</a>.</p>"
                },
                {
                  "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-vertex_buffers-slot\" id=\"ref-for-dom-gpurendercommandsmixin-vertex_buffers-slot①\">[[vertex_buffers]]</a></code>[<var>slot</var>] to be <var>buffer</var>.</p>"
                },
                {
                  "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-vertex_buffer_sizes-slot\" id=\"ref-for-dom-gpurendercommandsmixin-vertex_buffer_sizes-slot①\">[[vertex_buffer_sizes]]</a></code>[<var>slot</var>] to be <var>size</var>.</p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.draw",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-draw-vertexcount-instancecount-firstvertex-firstinstance-vertexcount",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑧⑤\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④①\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑤⑥\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.draw",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-draw-vertexcount-instancecount-firstvertex-firstinstance-vertexcount",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④②\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①⑧\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>All of the requirements in the following steps <var>must</var> be met.\nIf any are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④⑥\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ol>\n           <li data-md=\"\">\n            <p>It <var>must</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-draw\" id=\"ref-for-abstract-opdef-valid-to-draw①\" data-timeline=\"device\">valid to draw</a> with <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p>Let <var>buffers</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-pipeline-slot\" id=\"ref-for-dom-gpurendercommandsmixin-pipeline-slot①\">[[pipeline]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-descriptor-slot\" id=\"ref-for-dom-gpurenderpipeline-descriptor-slot②\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-vertex\" id=\"ref-for-dom-gpurenderpipelinedescriptor-vertex⑨\">vertex</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstate-buffers\" id=\"ref-for-dom-gpuvertexstate-buffers⑨\">buffers</a></code>.</p>\n           </li><li data-md=\"\">\n            <p>For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#typedefdef-gpuindex32\" id=\"ref-for-typedefdef-gpuindex32①⑥\">GPUIndex32</a></code> <var>slot</var> from <code>0</code> to <var>buffers</var>.length (non-inclusive):</p>\n            <ol>\n             <li data-md=\"\">\n              <p>If <var>buffers</var>[<var>slot</var>] is <code>null</code>, <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-continue\" id=\"ref-for-iteration-continue\">continue</a>.</p>\n             </li><li data-md=\"\">\n              <p>Let <var>bufferSize</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-vertex_buffer_sizes-slot\" id=\"ref-for-dom-gpurendercommandsmixin-vertex_buffer_sizes-slot②\">[[vertex_buffer_sizes]]</a></code>[<var>slot</var>].</p>\n             </li><li data-md=\"\">\n              <p>Let <var>stride</var> be <var>buffers</var>[<var>slot</var>].<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexbufferlayout-arraystride\" id=\"ref-for-dom-gpuvertexbufferlayout-arraystride⑨\">arrayStride</a></code>.</p>\n             </li><li data-md=\"\">\n              <p>Let <var>attributes</var> be <var>buffers</var>[<var>slot</var>].<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexbufferlayout-attributes\" id=\"ref-for-dom-gpuvertexbufferlayout-attributes⑥\">attributes</a></code></p>\n             </li><li data-md=\"\">\n              <p>Let <var>lastStride</var> be the maximum value of\n(<var>attribute</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexattribute-offset\" id=\"ref-for-dom-gpuvertexattribute-offset⑤\">offset</a></code> + sizeof(<var>attribute</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexattribute-format\" id=\"ref-for-dom-gpuvertexattribute-format⑥\">format</a></code>))\nover each <var>attribute</var> in <var>attributes</var>, or 0 if <var>attributes</var> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-empty\" id=\"ref-for-list-empty\">empty</a>.</p>\n             </li><li data-md=\"\">\n              <p>Let <var>strideCount</var> be computed based on <var>buffers</var>[<var>slot</var>].<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexbufferlayout-stepmode\" id=\"ref-for-dom-gpuvertexbufferlayout-stepmode①\">stepMode</a></code>:</p>\n              <dl class=\"switch\">\n               <dt data-md=\"\"><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstepmode-vertex\" id=\"ref-for-dom-gpuvertexstepmode-vertex①\">\"vertex\"</a></code>\n               </dt><dd data-md=\"\">\n                <p><var>firstVertex</var> + <var>vertexCount</var></p>\n               </dd><dt data-md=\"\"><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstepmode-instance\" id=\"ref-for-dom-gpuvertexstepmode-instance①\">\"instance\"</a></code>\n               </dt><dd data-md=\"\">\n                <p><var>firstInstance</var> + <var>instanceCount</var></p>\n              </dd></dl>\n             </li><li data-md=\"\">\n              <p>If <var>strideCount</var> ≠ <code>0</code>:</p>\n              <ol>\n               <li data-md=\"\">\n                <p>(<var>strideCount</var> − <code>1</code>) × <var>stride</var> + <var>lastStride</var> <var>must</var> be ≤ <var>bufferSize</var>.</p>\n              </li></ol>\n            </li></ol>\n          </li></ol>\n         </div>",
          "ignored": [
            "It must be valid to draw with this. Let buffers be this.[[pipeline]].[[descriptor]].vertex.buffers. For each GPUIndex32 slot from 0 to buffers.length (non-inclusive): If buffers[slot] is null, continue. Let bufferSize be this.[[vertex_buffer_sizes]][slot]. Let stride be buffers[slot].arrayStride. Let attributes be buffers[slot].attributes Let lastStride be the maximum value of (attribute.offset + sizeof(attribute.format)) over each attribute in attributes, or 0 if attributes is empty. Let strideCount be computed based on buffers[slot].stepMode: \"vertex\" firstVertex + vertexCount \"instance\" firstInstance + instanceCount If strideCount ≠ 0: (strideCount − 1) × stride + lastStride must be ≤ bufferSize."
          ]
        },
        {
          "html": "<p>Increment <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawcount-slot\" id=\"ref-for-dom-gpurendercommandsmixin-drawcount-slot②\">[[drawCount]]</a></code> by 1.</p>"
        },
        {
          "html": "<p>Let <var>bindingState</var> be a snapshot of <var>this</var>’s current state.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command①\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline③⑥\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.drawIndexed",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawindexed-indexcount-instancecount-firstindex-basevertex-firstinstance-indexcount",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑧⑥\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④③\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑤⑦\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.drawIndexed",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawindexed-indexcount-instancecount-firstindex-basevertex-firstinstance-indexcount",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④④\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state①⑨\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④⑦\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p>It is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-draw-indexed\" id=\"ref-for-abstract-opdef-valid-to-draw-indexed\" data-timeline=\"device\">valid to draw indexed</a> with <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>firstIndex</var> + <var>indexCount</var> ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer_size-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer_size-slot①\">[[index_buffer_size]]</a></code> ÷ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_format-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_format-slot①\">[[index_format]]</a></code>'s byte size;</p>\n           </li><li data-md=\"\">\n            <p>Let <var>buffers</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-pipeline-slot\" id=\"ref-for-dom-gpurendercommandsmixin-pipeline-slot②\">[[pipeline]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-descriptor-slot\" id=\"ref-for-dom-gpurenderpipeline-descriptor-slot③\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-vertex\" id=\"ref-for-dom-gpurenderpipelinedescriptor-vertex①⓪\">vertex</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstate-buffers\" id=\"ref-for-dom-gpuvertexstate-buffers①⓪\">buffers</a></code>.</p>\n           </li><li data-md=\"\">\n            <p>For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#typedefdef-gpuindex32\" id=\"ref-for-typedefdef-gpuindex32①⑦\">GPUIndex32</a></code> <var>slot</var> from <code>0</code> to <var>buffers</var>.length (non-inclusive):</p>\n            <ul>\n             <li data-md=\"\">\n              <p>If <var>buffers</var>[<var>slot</var>] is <code>null</code>, <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-continue\" id=\"ref-for-iteration-continue①\">continue</a>.</p>\n             </li><li data-md=\"\">\n              <p>Let <var>bufferSize</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-vertex_buffer_sizes-slot\" id=\"ref-for-dom-gpurendercommandsmixin-vertex_buffer_sizes-slot③\">[[vertex_buffer_sizes]]</a></code>[<var>slot</var>].</p>\n             </li><li data-md=\"\">\n              <p>Let <var>stride</var> be <var>buffers</var>[<var>slot</var>].<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexbufferlayout-arraystride\" id=\"ref-for-dom-gpuvertexbufferlayout-arraystride①⓪\">arrayStride</a></code>.</p>\n             </li><li data-md=\"\">\n              <p>Let <var>lastStride</var> be max(<var>attribute</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexattribute-offset\" id=\"ref-for-dom-gpuvertexattribute-offset⑥\">offset</a></code> + sizeof(<var>attribute</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexattribute-format\" id=\"ref-for-dom-gpuvertexattribute-format⑦\">format</a></code>))\nfor each <var>attribute</var> in <var>buffers</var>[<var>slot</var>].<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexbufferlayout-attributes\" id=\"ref-for-dom-gpuvertexbufferlayout-attributes⑦\">attributes</a></code>.</p>\n             </li><li data-md=\"\">\n              <p>Let <var>strideCount</var> be <var>firstInstance</var> + <var>instanceCount</var>.</p>\n             </li><li data-md=\"\">\n              <p>If <var>buffers</var>[<var>slot</var>].<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexbufferlayout-stepmode\" id=\"ref-for-dom-gpuvertexbufferlayout-stepmode②\">stepMode</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstepmode-instance\" id=\"ref-for-dom-gpuvertexstepmode-instance②\">\"instance\"</a></code> and <var>strideCount</var> ≠ <code>0</code>:</p>\n              <ul>\n               <li data-md=\"\">\n                <p>Ensure (<var>strideCount</var> − <code>1</code>) × <var>stride</var> + <var>lastStride</var> ≤ <var>bufferSize</var>.</p>\n              </li></ul>\n            </li></ul>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Increment <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawcount-slot\" id=\"ref-for-dom-gpurendercommandsmixin-drawcount-slot③\">[[drawCount]]</a></code> by 1.</p>"
        },
        {
          "html": "<p>Let <var>bindingState</var> be a snapshot of <var>this</var>’s current state.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command②\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline③⑧\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.drawIndirect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawindirect-indirectbuffer-indirectoffset-indirectbuffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑧⑦\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④⑤\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑤⑧\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.drawIndirect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawindirect-indirectbuffer-indirectoffset-indirectbuffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④⑥\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state②⓪\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④⑧\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p>It is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-draw\" id=\"ref-for-abstract-opdef-valid-to-draw②\" data-timeline=\"device\">valid to draw</a> with <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectBuffer</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with②③\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage①③\" data-timeline=\"const\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-indirect\" id=\"ref-for-dom-gpubufferusage-indirect④\">INDIRECT</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectOffset</var> + sizeof(<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#indirect-draw-parameters\" id=\"ref-for-indirect-draw-parameters①\">indirect draw parameters</a>) ≤ <var>indirectBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①⑦\" data-timeline=\"const\">size</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectOffset</var> is a multiple of 4.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Add <var>indirectBuffer</var> to the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#usage-scopes\" id=\"ref-for-usage-scopes①④\">usage scope</a> as <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#internal-usage-input\" id=\"ref-for-internal-usage-input⑤\">input</a>.</p>"
        },
        {
          "html": "<p>Increment <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawcount-slot\" id=\"ref-for-dom-gpurendercommandsmixin-drawcount-slot④\">[[drawCount]]</a></code> by 1.</p>"
        },
        {
          "html": "<p>Let <var>bindingState</var> be a snapshot of <var>this</var>’s current state.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command③\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline④⓪\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.drawIndirect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawindirect-indirectbuffer-indirectoffset-indirectbuffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline④①\">Queue timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>vertexCount</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at <var>indirectOffset</var> bytes.</p>"
        },
        {
          "html": "<p>Let <var>instanceCount</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at\n(<var>indirectOffset</var> + 4) bytes.</p>"
        },
        {
          "html": "<p>Let <var>firstVertex</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at\n(<var>indirectOffset</var> + 8) bytes.</p>"
        },
        {
          "html": "<p>Let <var>firstInstance</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at\n(<var>indirectOffset</var> + 12) bytes.</p>"
        },
        {
          "html": "<p>Draw <var>instanceCount</var> instances, starting with instance <var>firstInstance</var>, of\nprimitives consisting of <var>vertexCount</var> verticies, starting with vertex <var>firstVertex</var>,\nwith the states from <var>bindingState</var> and <var>renderState</var>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.drawIndexedIndirect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawindexedindirect-indirectbuffer-indirectoffset-indirectbuffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑧⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④⑦\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑤⑨\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.drawIndexedIndirect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawindexedindirect-indirectbuffer-indirectoffset-indirectbuffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④⑧\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state②①\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate④⑨\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p>It is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-draw-indexed\" id=\"ref-for-abstract-opdef-valid-to-draw-indexed①\" data-timeline=\"device\">valid to draw indexed</a> with <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectBuffer</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with②④\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage①④\" data-timeline=\"const\">usage</a></code> contains <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-indirect\" id=\"ref-for-dom-gpubufferusage-indirect⑤\">INDIRECT</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectOffset</var> + sizeof(<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#indirect-drawindexed-parameters\" id=\"ref-for-indirect-drawindexed-parameters①\">indirect drawIndexed parameters</a>) ≤ <var>indirectBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①⑧\" data-timeline=\"const\">size</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>indirectOffset</var> is a multiple of 4.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Add <var>indirectBuffer</var> to the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#usage-scopes\" id=\"ref-for-usage-scopes①⑤\">usage scope</a> as <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#internal-usage-input\" id=\"ref-for-internal-usage-input⑥\">input</a>.</p>"
        },
        {
          "html": "<p>Increment <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawcount-slot\" id=\"ref-for-dom-gpurendercommandsmixin-drawcount-slot⑤\">[[drawCount]]</a></code> by 1.</p>"
        },
        {
          "html": "<p>Let <var>bindingState</var> be a snapshot of <var>this</var>’s current state.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command④\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline④②\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderCommandsMixin.drawIndexedIndirect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawindexedindirect-indirectbuffer-indirectoffset-indirectbuffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline④③\">Queue timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>indexCount</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at <var>indirectOffset</var> bytes.</p>"
        },
        {
          "html": "<p>Let <var>instanceCount</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at\n(<var>indirectOffset</var> + 4) bytes.</p>"
        },
        {
          "html": "<p>Let <var>firstIndex</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at\n(<var>indirectOffset</var> + 8) bytes.</p>"
        },
        {
          "html": "<p>Let <var>baseVertex</var> be a signed 32-bit integer read from <var>indirectBuffer</var> at\n(<var>indirectOffset</var> + 12) bytes.</p>"
        },
        {
          "html": "<p>Let <var>firstInstance</var> be an unsigned 32-bit integer read from <var>indirectBuffer</var> at\n(<var>indirectOffset</var> + 16) bytes.</p>"
        },
        {
          "html": "<p>Draw <var>instanceCount</var> instances, starting with instance <var>firstInstance</var>, of\nprimitives consisting of <var>indexCount</var> indexed verticies, starting with index <var>firstIndex</var> from vertex <var>baseVertex</var>,\nwith the states from <var>bindingState</var> and <var>renderState</var>.</p>"
        }
      ]
    },
    {
      "name": "valid to draw",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-draw",
      "html": "To determine if it’s <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-valid-to-draw\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">valid to draw</dfn> with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpurendercommandsmixin\" id=\"ref-for-gpurendercommandsmixin①④\">GPURenderCommandsMixin</a></code> <var>encoder</var>,\n    run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①④⑨\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Validate <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxbindgroupsplusvertexbuffers\" id=\"ref-for-dom-supported-limits-maxbindgroupsplusvertexbuffers③\">maxBindGroupsPlusVertexBuffers</a></code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>bindGroupSpaceUsed</var> be\n(the maximum key in <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-bind_groups-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-bind_groups-slot⑦\">[[bind_groups]]</a></code>) + 1.</p>"
            },
            {
              "html": "<p>Let <var>vertexBufferSpaceUsed</var> be\n(the maximum key in <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-vertex_buffers-slot\" id=\"ref-for-dom-gpurendercommandsmixin-vertex_buffers-slot③\">[[vertex_buffers]]</a></code>) + 1.</p>"
            },
            {
              "html": "<p><var>bindGroupSpaceUsed</var> + <var>vertexBufferSpaceUsed</var> must be ≤ <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑥⓪\" data-timeline=\"const\">[[device]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot①⑨\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxbindgroupsplusvertexbuffers\" id=\"ref-for-dom-supported-limits-maxbindgroupsplusvertexbuffers④\">maxBindGroupsPlusVertexBuffers</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Otherwise return <code>true</code>.</p>"
        }
      ]
    },
    {
      "name": "valid to draw indexed",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-draw-indexed",
      "html": "To determine if it’s <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-valid-to-draw-indexed\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">valid to draw indexed</dfn> with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpurendercommandsmixin\" id=\"ref-for-gpurendercommandsmixin①⑤\">GPURenderCommandsMixin</a></code> <var>encoder</var>,\n    run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑤⓪\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If any of the following conditions are unsatisfied, return <code>false</code>:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p>It must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-draw\" id=\"ref-for-abstract-opdef-valid-to-draw③\" data-timeline=\"device\">valid to draw</a> with <var>encoder</var>.</p>\n        </li><li data-md=\"\">\n         <p><var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer-slot④\">[[index_buffer]]</a></code> must not be <code>null</code>.</p>\n        </li><li data-md=\"\">\n         <p>Let <var>topology</var> be <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-pipeline-slot\" id=\"ref-for-dom-gpurendercommandsmixin-pipeline-slot⑤\">[[pipeline]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-descriptor-slot\" id=\"ref-for-dom-gpurenderpipeline-descriptor-slot⑤\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-primitive\" id=\"ref-for-dom-gpurenderpipelinedescriptor-primitive④\">primitive</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-topology\" id=\"ref-for-dom-gpuprimitivestate-topology③\">topology</a></code>.</p>\n        </li><li data-md=\"\">\n         <p>If <var>topology</var> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivetopology-line-strip\" id=\"ref-for-dom-gpuprimitivetopology-line-strip⑤\">\"line-strip\"</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivetopology-triangle-strip\" id=\"ref-for-dom-gpuprimitivetopology-triangle-strip④\">\"triangle-strip\"</a></code>:</p>\n         <ul>\n          <li data-md=\"\">\n           <p><var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_format-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_format-slot②\">[[index_format]]</a></code> must equal <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-pipeline-slot\" id=\"ref-for-dom-gpurendercommandsmixin-pipeline-slot⑥\">[[pipeline]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipeline-descriptor-slot\" id=\"ref-for-dom-gpurenderpipeline-descriptor-slot⑥\">[[descriptor]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-primitive\" id=\"ref-for-dom-gpurenderpipelinedescriptor-primitive⑤\">primitive</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-stripindexformat\" id=\"ref-for-dom-gpuprimitivestate-stripindexformat③\">stripIndexFormat</a></code>.</p>\n         </li></ul>\n       </li></ul>\n      </div>"
        },
        {
          "html": "<p>Otherwise return <code>true</code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setViewport",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setviewport-x-y-width-height-mindepth-maxdepth-x",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑧⑨\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑤①\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑥①\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setViewport",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setviewport-x-y-width-height-mindepth-maxdepth-x",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑤②\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state②②\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑤⓪\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>x</var> ≥ <code>0</code></p>\n           </li><li data-md=\"\">\n            <p><var>y</var> ≥ <code>0</code></p>\n           </li><li data-md=\"\">\n            <p><var>width</var> ≥ <code>0</code></p>\n           </li><li data-md=\"\">\n            <p><var>height</var> ≥ <code>0</code></p>\n           </li><li data-md=\"\">\n            <p><var>x</var> + <var>width</var> ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-attachment_size-slot\" id=\"ref-for-dom-gpurenderpassencoder-attachment_size-slot\">[[attachment_size]]</a></code>.width</p>\n           </li><li data-md=\"\">\n            <p><var>y</var> + <var>height</var> ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-attachment_size-slot\" id=\"ref-for-dom-gpurenderpassencoder-attachment_size-slot①\">[[attachment_size]]</a></code>.height</p>\n           </li><li data-md=\"\">\n            <p>0.0 ≤ <var>minDepth</var> ≤ 1.0</p>\n           </li><li data-md=\"\">\n            <p>0.0 ≤ <var>maxDepth</var> ≤ 1.0</p>\n           </li><li data-md=\"\">\n            <p><var>minDepth</var> ≤ <var>maxDepth</var></p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command⑤\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline④④\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setScissorRect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setscissorrect-x-y-width-height-x",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑨⓪\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑤③\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑥②\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setScissorRect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setscissorrect-x-y-width-height-x",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑤④\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state②③\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑤①\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>x</var>+<var>width</var> ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-attachment_size-slot\" id=\"ref-for-dom-gpurenderpassencoder-attachment_size-slot②\">[[attachment_size]]</a></code>.width.</p>\n           </li><li data-md=\"\">\n            <p><var>y</var>+<var>height</var> ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-attachment_size-slot\" id=\"ref-for-dom-gpurenderpassencoder-attachment_size-slot③\">[[attachment_size]]</a></code>.height.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command⑥\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline④⑥\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setScissorRect",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setscissorrect-x-y-width-height-x",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline④⑦\">Queue timeline</a> steps:",
      "rationale": "set",
      "steps": [
        {
          "html": "<p>Set <var>renderState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-scissorrect-slot\" id=\"ref-for-dom-renderstate-scissorrect-slot\">[[scissorRect]]</a></code> to the extents <var>x</var>, <var>y</var>, <var>width</var>, and <var>height</var>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setBlendConstant",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setblendconstant-color-color",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑨①\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⑧\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpucolor-shape\" id=\"ref-for-abstract-opdef-validate-gpucolor-shape①\" data-timeline=\"content\">validate GPUColor shape</a>(<var>color</var>).</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑤⑤\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑥③\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setBlendConstant",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setblendconstant-color-color",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑤⑥\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state②④\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command⑦\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline④⑧\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setBlendConstant",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setblendconstant-color-color",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline④⑨\">Queue timeline</a> steps:",
      "rationale": "set",
      "steps": [
        {
          "html": "<p>Set <var>renderState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-blendconstant-slot\" id=\"ref-for-dom-renderstate-blendconstant-slot①\">[[blendConstant]]</a></code> to <var>color</var>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setStencilReference",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setstencilreference-reference-reference",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑨②\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑤⑦\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑥④\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setStencilReference",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setstencilreference-reference-reference",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑤⑧\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state②⑤\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command⑧\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑤⓪\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.setStencilReference",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-setstencilreference-reference-reference",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑤①\">Queue timeline</a> steps:",
      "rationale": "set",
      "steps": [
        {
          "html": "<p>Set <var>renderState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-stencilreference-slot\" id=\"ref-for-dom-renderstate-stencilreference-slot②\">[[stencilReference]]</a></code> to <var>reference</var>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.beginOcclusionQuery",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-beginocclusionquery-queryindex-queryindex",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑨③\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑤⑨\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑥⑤\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.beginOcclusionQuery",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-beginocclusionquery-queryindex-queryindex",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑥⓪\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state②⑥\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑤②\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-occlusion_query_set-slot\" id=\"ref-for-dom-gpurenderpassencoder-occlusion_query_set-slot②\">[[occlusion_query_set]]</a></code> is not <code>null</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>queryIndex</var> &lt; <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-occlusion_query_set-slot\" id=\"ref-for-dom-gpurenderpassencoder-occlusion_query_set-slot③\">[[occlusion_query_set]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuqueryset-count\" id=\"ref-for-dom-gpuqueryset-count\">count</a></code>.</p>\n           </li><li data-md=\"\">\n            <p>The query at same <var>queryIndex</var> must not have been previously written to in this pass.</p>\n           </li><li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-occlusion_query_active-slot\" id=\"ref-for-dom-gpurenderpassencoder-occlusion_query_active-slot①\">[[occlusion_query_active]]</a></code> is <code>false</code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-occlusion_query_active-slot\" id=\"ref-for-dom-gpurenderpassencoder-occlusion_query_active-slot②\">[[occlusion_query_active]]</a></code> to <code>true</code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command⑨\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑤②\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.beginOcclusionQuery",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-beginocclusionquery-queryindex-queryindex",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑤③\">Queue timeline</a> steps:",
      "rationale": "set",
      "steps": [
        {
          "html": "<p>Set <var>renderState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-occlusionqueryindex-slot\" id=\"ref-for-dom-renderstate-occlusionqueryindex-slot\">[[occlusionQueryIndex]]</a></code> to <var>queryIndex</var>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.endOcclusionQuery",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑨④\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑥①\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑥⑥\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.endOcclusionQuery",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑥②\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state②⑦\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑤③\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-occlusion_query_active-slot\" id=\"ref-for-dom-gpurenderpassencoder-occlusion_query_active-slot③\">[[occlusion_query_active]]</a></code> is <code>true</code>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-occlusion_query_active-slot\" id=\"ref-for-dom-gpurenderpassencoder-occlusion_query_active-slot④\">[[occlusion_query_active]]</a></code> to <code>false</code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-enqueue-a-render-command\" id=\"ref-for-abstract-opdef-enqueue-a-render-command①⓪\" data-timeline=\"device\">Enqueue a render command</a> on <var>this</var> which issues the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑤④\">Queue timeline</a> with <var>renderState</var> when executed.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.endOcclusionQuery",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑤⑤\">Queue timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>passingFragments</var> be non-zero if any fragment samples passed all per-fragment\ntests since the corresponding <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-beginocclusionquery\" id=\"ref-for-dom-gpurenderpassencoder-beginocclusionquery②\">beginOcclusionQuery()</a></code> command was executed, and zero otherwise.</p>"
        },
        {
          "html": "<p>Write <var>passingFragments</var> into <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-occlusion_query_set-slot\" id=\"ref-for-dom-gpurenderpassencoder-occlusion_query_set-slot④\">[[occlusion_query_set]]</a></code> at index <var>renderState</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-occlusionqueryindex-slot\" id=\"ref-for-dom-renderstate-occlusionqueryindex-slot①\">[[occlusionQueryIndex]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.executeBundles",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-executebundles-bundles-bundles",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑨⑤\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑥③\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑥⑦\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderPassEncoder.executeBundles",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-executebundles-bundles-bundles",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑥④\">Device timeline</a> steps:",
      "rationale": "validate",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-the-encoder-state\" id=\"ref-for-abstract-opdef-validate-the-encoder-state②⑧\" data-timeline=\"device\">Validate the encoder state</a> of <var>this</var>. If it returns false, stop.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑤④\" data-timeline=\"device\">invalidate</a> <var>this</var> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p>For each <var>bundle</var> in <var>bundles</var>:</p>\n            <ul>\n             <li data-md=\"\">\n              <p><var>bundle</var> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with②⑤\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n             </li><li data-md=\"\">\n              <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-layout-slot\" id=\"ref-for-dom-gpurendercommandsmixin-layout-slot②\">[[layout]]</a></code> must equal <var>bundle</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderbundle-layout-slot\" id=\"ref-for-dom-gpurenderbundle-layout-slot\">[[layout]]</a></code>.</p>\n             </li><li data-md=\"\">\n              <p>If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-depthreadonly-slot\" id=\"ref-for-dom-gpurendercommandsmixin-depthreadonly-slot②\">[[depthReadOnly]]</a></code> is true, <var>bundle</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderbundle-depthreadonly-slot\" id=\"ref-for-dom-gpurenderbundle-depthreadonly-slot\">[[depthReadOnly]]</a></code> must be true.</p>\n             </li><li data-md=\"\">\n              <p>If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-stencilreadonly-slot\" id=\"ref-for-dom-gpurendercommandsmixin-stencilreadonly-slot②\">[[stencilReadOnly]]</a></code> is true, <var>bundle</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderbundle-stencilreadonly-slot\" id=\"ref-for-dom-gpurenderbundle-stencilreadonly-slot\">[[stencilReadOnly]]</a></code> must be true.</p>\n            </li></ul>\n          </li></ul>\n         </div>"
        },
        {
          "html": "For each <var>bundle</var> in <var>bundles</var>:",
          "rationale": "increment",
          "steps": [
            {
              "html": "<p>Increment <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawcount-slot\" id=\"ref-for-dom-gpurendercommandsmixin-drawcount-slot⑥\">[[drawCount]]</a></code> by <var>bundle</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderbundle-drawcount-slot\" id=\"ref-for-dom-gpurenderbundle-drawcount-slot\">[[drawCount]]</a></code>.</p>"
            },
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑤⑦\">Queue timeline</a> steps:",
              "rationale": "execute",
              "steps": [
                {
                  "html": "<p>Execute each command in <var>bundle</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderbundle-command_list-slot\" id=\"ref-for-dom-gpurenderbundle-command_list-slot\">[[command_list]]</a></code> with <var>renderState</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-reset-the-render-pass-binding-state\" id=\"ref-for-abstract-opdef-reset-the-render-pass-binding-state\" data-timeline=\"device\">Reset the render pass binding state</a> of <var>this</var>.</p>"
        }
      ]
    },
    {
      "name": "Reset the render pass binding state",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-reset-the-render-pass-binding-state",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-reset-the-render-pass-binding-state\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">Reset the render pass binding state</dfn> of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpurenderpassencoder\" id=\"ref-for-gpurenderpassencoder②⑧\">GPURenderPassEncoder</a></code> <var>encoder</var> run\n    the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑥⑤\">device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-clear\" id=\"ref-for-map-clear\">Clear</a> <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-bind_groups-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-bind_groups-slot⑧\">[[bind_groups]]</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-pipeline-slot\" id=\"ref-for-dom-gpurendercommandsmixin-pipeline-slot⑦\">[[pipeline]]</a></code> to <code>null</code>.</p>"
        },
        {
          "html": "<p>Set <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer-slot⑤\">[[index_buffer]]</a></code> to <code>null</code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-clear\" id=\"ref-for-map-clear①\">Clear</a> <var>encoder</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-vertex_buffers-slot\" id=\"ref-for-dom-gpurendercommandsmixin-vertex_buffers-slot④\">[[vertex_buffers]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createRenderBundleEncoder",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createrenderbundleencoder-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑨⑥\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⑨\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features\" id=\"ref-for-abstract-opdef-validate-texture-format-required-features⑥\" data-timeline=\"content\">Validate texture format required features</a> of each non-<code>null</code> element of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-colorformats\" id=\"ref-for-dom-gpurenderpasslayout-colorformats⑥\">colorFormats</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑥⑧\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⓪\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features\" id=\"ref-for-abstract-opdef-validate-texture-format-required-features⑦\" data-timeline=\"content\">Validate texture format required features</a> of <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-depthstencilformat\" id=\"ref-for-dom-gpurenderpasslayout-depthstencilformat④\">depthStencilFormat</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑥⑨\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>e</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④①\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object①①\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpurenderbundleencoder\" id=\"ref-for-gpurenderbundleencoder①③\">GPURenderBundleEncoder</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑥⑥\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>e</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createRenderBundleEncoder",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createrenderbundleencoder-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑥⑦\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following conditions are unsatisfied <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error②⑦\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑤⑤\" data-timeline=\"device\">invalidate</a> <var>e</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must not be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalid\" id=\"ref-for-abstract-opdef-invalid①⑤\" data-timeline=\"device\">lost</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-colorformats\" id=\"ref-for-dom-gpurenderpasslayout-colorformats⑦\">colorFormats</a></code>.length must be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot②⓪\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcolorattachments\" id=\"ref-for-dom-supported-limits-maxcolorattachments②\">maxColorAttachments</a></code>.</p>\n           </li><li data-md=\"\">\n            <p>For each non-<code>null</code> <var>colorFormat</var> in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-colorformats\" id=\"ref-for-dom-gpurenderpasslayout-colorformats⑧\">colorFormats</a></code>:</p>\n            <ul>\n             <li data-md=\"\">\n              <p><var>colorFormat</var> must be a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#color-renderable-format\" id=\"ref-for-color-renderable-format②\">color renderable format</a>.</p>\n            </li></ul>\n           </li><li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-calculating-color-attachment-bytes-per-sample\" id=\"ref-for-abstract-opdef-calculating-color-attachment-bytes-per-sample②\" data-timeline=\"const\">Calculating color attachment bytes per sample</a>(<var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-colorformats\" id=\"ref-for-dom-gpurenderpasslayout-colorformats⑨\">colorFormats</a></code>)\nmust be ≤ <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-device-limits-slot\" id=\"ref-for-dom-device-limits-slot②①\" data-timeline=\"const\">[[limits]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-supported-limits-maxcolorattachmentbytespersample\" id=\"ref-for-dom-supported-limits-maxcolorattachmentbytespersample③\">maxColorAttachmentBytesPerSample</a></code>.</p>\n           </li><li data-md=\"\">\n            <p>If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-depthstencilformat\" id=\"ref-for-dom-gpurenderpasslayout-depthstencilformat⑤\">depthStencilFormat</a></code> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑦③\">provided</a>:</p>\n            <ul>\n             <li data-md=\"\">\n              <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-depthstencilformat\" id=\"ref-for-dom-gpurenderpasslayout-depthstencilformat⑥\">depthStencilFormat</a></code> must be a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#depth-or-stencil-format\" id=\"ref-for-depth-or-stencil-format①①\">depth-or-stencil format</a>.</p>\n            </li></ul>\n           </li><li data-md=\"\">\n            <p>There must exist at least one attachment, either:</p>\n            <ul>\n             <li data-md=\"\">\n              <p>A non-<code>null</code> value in <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-colorformats\" id=\"ref-for-dom-gpurenderpasslayout-colorformats①⓪\">colorFormats</a></code>, or</p>\n             </li><li data-md=\"\">\n              <p>A <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpasslayout-depthstencilformat\" id=\"ref-for-dom-gpurenderpasslayout-depthstencilformat⑦\">depthStencilFormat</a></code>.</p>\n            </li></ul>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>e</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-layout-slot\" id=\"ref-for-dom-gpurendercommandsmixin-layout-slot③\">[[layout]]</a></code> to a copy of <var>descriptor</var>’s included <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpurenderpasslayout\" id=\"ref-for-dictdef-gpurenderpasslayout⑨\">GPURenderPassLayout</a></code> interface.</p>"
        },
        {
          "html": "<p>Set <var>e</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-depthreadonly-slot\" id=\"ref-for-dom-gpurendercommandsmixin-depthreadonly-slot③\">[[depthReadOnly]]</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderbundleencoderdescriptor-depthreadonly\" id=\"ref-for-dom-gpurenderbundleencoderdescriptor-depthreadonly\">depthReadOnly</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>e</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-stencilreadonly-slot\" id=\"ref-for-dom-gpurendercommandsmixin-stencilreadonly-slot③\">[[stencilReadOnly]]</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderbundleencoderdescriptor-stencilreadonly\" id=\"ref-for-dom-gpurenderbundleencoderdescriptor-stencilreadonly\">stencilReadOnly</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>e</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot①③\">[[state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-open\" id=\"ref-for-encoder-state-open⑧\">open</a>\".</p>"
        },
        {
          "html": "<p>Set <var>e</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawcount-slot\" id=\"ref-for-dom-gpurendercommandsmixin-drawcount-slot⑦\">[[drawCount]]</a></code> to 0.</p>"
        }
      ]
    },
    {
      "name": "GPURenderBundleEncoder.finish",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderbundleencoder-finish-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑨⑦\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>renderBundle</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpurenderbundle\" id=\"ref-for-gpurenderbundle①⑦\">GPURenderBundle</a></code>.</p>"
        },
        {
          "html": "<p>Issue the <var>finish steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑥⑧\">Device timeline</a> of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑦⓪\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p>Return <var>renderBundle</var>.</p>"
        }
      ]
    },
    {
      "name": "GPURenderBundleEncoder.finish",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpurenderbundleencoder-finish-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑥⑨\">Device timeline</a> <var>finish steps</var>:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>validationSucceeded</var> be <code>true</code> if all of the following requirements are met, and <code>false</code> otherwise.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid\" id=\"ref-for-abstract-opdef-valid①②\" data-timeline=\"device\">valid</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot①④\">[[state]]</a></code> must be \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-open\" id=\"ref-for-encoder-state-open⑨\">open</a>\".</p>\n           </li><li data-md=\"\">\n            <p><var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudebugcommandsmixin-debug_group_stack-slot\" id=\"ref-for-dom-gpudebugcommandsmixin-debug_group_stack-slot⑥\">[[debug_group_stack]]</a></code> must <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty④\">be empty</a>.</p>\n           </li><li data-md=\"\">\n            <p>Every <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#usage-scopes\" id=\"ref-for-usage-scopes①⑥\">usage scope</a> contained in <var>this</var> must satisfy the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#usage-scope-validation\" id=\"ref-for-usage-scope-validation②\">usage scope validation</a>.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-state-slot\" id=\"ref-for-dom-gpucommandsmixin-state-slot①⑤\">[[state]]</a></code> to \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#encoder-state-ended\" id=\"ref-for-encoder-state-ended④\">ended</a>\".</p>"
        },
        {
          "html": "If <var>validationSucceeded</var> is <code>false</code>, then:",
          "rationale": "generate",
          "steps": [
            {
              "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error②⑧\" data-timeline=\"device\">Generate a validation error</a>.</p>"
            },
            {
              "html": "<p>Return an <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑤⑥\" data-timeline=\"device\">invalidated</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpurenderbundle\" id=\"ref-for-gpurenderbundle①⑧\">GPURenderBundle</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>renderBundle</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderbundle-command_list-slot\" id=\"ref-for-dom-gpurenderbundle-command_list-slot①\">[[command_list]]</a></code> to <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandsmixin-commands-slot\" id=\"ref-for-dom-gpucommandsmixin-commands-slot①①\">[[commands]]</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>renderBundle</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderbundle-drawcount-slot\" id=\"ref-for-dom-gpurenderbundle-drawcount-slot①\">[[drawCount]]</a></code> to <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-drawcount-slot\" id=\"ref-for-dom-gpurendercommandsmixin-drawcount-slot⑧\">[[drawCount]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.writeBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writebuffer-buffer-bufferoffset-data-dataoffset-size-buffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑨⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>data</var> is an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-ArrayBuffer\" id=\"ref-for-idl-ArrayBuffer②⓪\">ArrayBuffer</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DataView\" id=\"ref-for-idl-DataView\">DataView</a></code>, let the element type be \"byte\".\nOtherwise, <var>data</var> is a TypedArray; let the element type be the type of the TypedArray.</p>"
        },
        {
          "html": "<p>Let <var>dataSize</var> be the size of <var>data</var>, in elements.</p>"
        },
        {
          "html": "<p>If <var>size</var> is missing,\nlet <var>contentsSize</var> be <var>dataSize</var> − <var>dataOffset</var>.\nOtherwise, let <var>contentsSize</var> be <var>size</var>.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied,\nthrow <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#operationerror\" id=\"ref-for-operationerror④\">OperationError</a></code> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>contentsSize</var> ≥ 0.</p>\n           </li><li data-md=\"\">\n            <p><var>dataOffset</var> + <var>contentsSize</var> ≤ <var>dataSize</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>contentsSize</var>, converted to bytes, is a multiple of 4 bytes.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Let <var>dataContents</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy\" id=\"ref-for-dfn-get-buffer-source-copy①\">a copy of the bytes held by the buffer source</a> <var>data</var>.</p>"
        },
        {
          "html": "<p>Let <var>contents</var> be the <var>contentsSize</var> elements of <var>dataContents</var> starting at\nan offset of <var>dataOffset</var> elements.</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑦⓪\">Device timeline</a> of <var>this</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.writeBuffer",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writebuffer-buffer-bufferoffset-data-dataoffset-size-buffer",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑦①\">Device timeline</a> steps:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error②⑨\" data-timeline=\"device\">generate a validation error</a> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>buffer</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with②⑥\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>buffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-internal-state-slot\" id=\"ref-for-dom-gpubuffer-internal-state-slot⑧\" data-timeline=\"device\">[[internal state]]</a></code> is \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer-internal-state-available\" id=\"ref-for-gpubuffer-internal-state-available④\" data-timeline=\"device\">available</a>\".</p>\n           </li><li data-md=\"\">\n            <p><var>buffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-usage\" id=\"ref-for-dom-gpubuffer-usage①⑤\" data-timeline=\"const\">usage</a></code> includes <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferusage-copy_dst\" id=\"ref-for-dom-gpubufferusage-copy_dst⑦\">COPY_DST</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>bufferOffset</var>, converted to bytes, is a multiple of 4 bytes.</p>\n           </li><li data-md=\"\">\n            <p><var>bufferOffset</var> + <var>contentsSize</var>, converted to bytes, ≤ <var>buffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-size\" id=\"ref-for-dom-gpubuffer-size①⑨\" data-timeline=\"const\">size</a></code> bytes.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑤⑧\">Queue timeline</a> of <var>this</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.writeTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writetexture-destination-data-datalayout-size-destination",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline⑨⑨\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④②\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuorigin3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuorigin3d-shape④\" data-timeline=\"content\">validate GPUOrigin3D shape</a>(<var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①⑥\">origin</a></code>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④③\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuextent3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuextent3d-shape④\" data-timeline=\"content\">validate GPUExtent3D shape</a>(<var>size</var>).</p>"
        },
        {
          "html": "<p>Let <var>dataBytes</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy\" id=\"ref-for-dfn-get-buffer-source-copy②\">a copy of the bytes held by the buffer source</a> <var>data</var>.</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑦②\">Device timeline</a> of <var>this</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.writeTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writetexture-destination-data-datalayout-size-destination",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑦③\">Device timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>aligned</var> be <code>false</code>.</p>"
        },
        {
          "html": "<p>Let <var>dataLength</var> be <var>dataBytes</var>.<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#byte-sequence-length\" id=\"ref-for-byte-sequence-length\">length</a>.</p>"
        },
        {
          "html": "<p>If any of the following conditions are unsatisfied, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error③⓪\" data-timeline=\"device\">generate a validation error</a> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture②⑤\">texture</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-destroyed-slot\" id=\"ref-for-dom-gputexture-destroyed-slot①\">[[destroyed]]</a></code> is <code>false</code>.</p>\n           </li><li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-texture-buffer-copy\" id=\"ref-for-abstract-opdef-validating-texture-buffer-copy②\" data-timeline=\"device\">validating texture buffer copy</a>(<var>destination</var>, <var>dataLayout</var>, <var>dataLength</var>, <var>size</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-copy_dst\" id=\"ref-for-dom-gputextureusage-copy_dst⑤\">COPY_DST</a></code>, <var>aligned</var>) returns <code>true</code>.</p>\n          </li></ul>\n          \n         </div>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑥⓪\">Queue timeline</a> of <var>this</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.writeTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-writetexture-destination-data-datalayout-size-destination",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑥①\">Queue timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>blockWidth</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width①②\">texel block width</a> of <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture②⑥\">texture</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>blockHeight</var> be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-height\" id=\"ref-for-texel-block-height①①\">texel block height</a> of <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture②⑦\">texture</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>dstOrigin</var> be <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①⑦\">origin</a></code>;</p>"
        },
        {
          "html": "<p>Let <var>dstBlockOriginX</var> be (<var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-x\" id=\"ref-for-gpuorigin3d-x⑥\">x</a> ÷ <var>blockWidth</var>).</p>"
        },
        {
          "html": "<p>Let <var>dstBlockOriginY</var> be (<var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-y\" id=\"ref-for-gpuorigin3d-y⑥\">y</a> ÷ <var>blockHeight</var>).</p>"
        },
        {
          "html": "<p>Let <var>blockColumns</var> be (<var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width②⑥\">width</a> ÷ <var>blockWidth</var>).</p>"
        },
        {
          "html": "<p>Let <var>blockRows</var> be (<var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height②③\">height</a> ÷ <var>blockHeight</var>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert②⑥\">Assert</a> that <var>dstBlockOriginX</var>, <var>dstBlockOriginY</var>, <var>blockColumns</var>, and <var>blockRows</var> are integers.</p>"
        },
        {
          "html": "For each <var>z</var> in the range [0, <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers②④\">depthOrArrayLayers</a> − 1]:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>dstSubregion</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-texture-copy-sub-region\" id=\"ref-for-abstract-opdef-texture-copy-sub-region④\" data-timeline=\"const\">texture copy sub-region</a> (<var>z</var> + <var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-z\" id=\"ref-for-gpuorigin3d-z⑦\">z</a>) of <var>destination</var>.</p>"
            },
            {
              "html": "For each <var>y</var> in the range [0, <var>blockRows</var> − 1]:",
              "rationale": "for",
              "steps": [
                {
                  "html": "For each <var>x</var> in the range [0, <var>blockColumns</var> − 1]:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>blockOffset</var> be the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-texel-block-byte-offset\" id=\"ref-for-abstract-opdef-texel-block-byte-offset②\" data-timeline=\"const\">texel block byte offset</a> of <var>dataLayout</var> for (<var>x</var>, <var>y</var>, <var>z</var>) of <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture②⑧\">texture</a></code>.</p>"
                    },
                    {
                      "html": "<p>Set <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block②⑧\">texel block</a> (<var>dstBlockOriginX</var> + <var>x</var>, <var>dstBlockOriginY</var> + <var>y</var>) of <var>dstSubregion</var> to be an <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#equivalent-texel-representation\" id=\"ref-for-equivalent-texel-representation③\">equivalent texel representation</a> to the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block②⑨\">texel block</a> described by <var>dataBytes</var> at offset <var>blockOffset</var>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUQueue.copyExternalImageToTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-copyexternalimagetotexture-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⓪⓪\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④④\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuorigin2d-shape\" id=\"ref-for-abstract-opdef-validate-gpuorigin2d-shape\" data-timeline=\"content\">validate GPUOrigin2D shape</a>(<var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopyexternalimage-origin\" id=\"ref-for-dom-gpuimagecopyexternalimage-origin②\">origin</a></code>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⑤\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuorigin3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuorigin3d-shape⑤\" data-timeline=\"content\">validate GPUOrigin3D shape</a>(<var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①⑧\">origin</a></code>).</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⑥\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuextent3d-shape\" id=\"ref-for-abstract-opdef-validate-gpuextent3d-shape⑤\" data-timeline=\"content\">validate GPUExtent3D shape</a>(<var>copySize</var>).</p>"
        },
        {
          "html": "<p>Let <var>sourceImage</var> be <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopyexternalimage-source\" id=\"ref-for-dom-gpuimagecopyexternalimage-source②\">source</a></code></p>"
        },
        {
          "html": "<p>If <var>sourceImage</var> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#the-image-argument-is-not-origin-clean\" id=\"ref-for-the-image-argument-is-not-origin-clean②\">is not origin-clean</a>,\nthrow a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#securityerror\" id=\"ref-for-securityerror①\">SecurityError</a></code> and stop.</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, throw an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#operationerror\" id=\"ref-for-operationerror⑤\">OperationError</a></code> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>source</var>.<var>origin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin2d-x\" id=\"ref-for-gpuorigin2d-x\">x</a> + <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width②⑦\">width</a> must be ≤ the width of <var>sourceImage</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>source</var>.<var>origin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin2d-y\" id=\"ref-for-gpuorigin2d-y\">y</a> + <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height②④\">height</a> must be ≤ the height of <var>sourceImage</var>.</p>\n           </li><li data-md=\"\">\n            <p><var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers②⑤\">depthOrArrayLayers</a> must be ≤ 1.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Let <var>usability</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⑦\">?</a> <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#check-the-usability-of-the-image-argument\" id=\"ref-for-check-the-usability-of-the-image-argument①\">check the usability of the image argument</a>(<var>source</var>).</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑦④\">Device timeline</a> of <var>this</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.copyExternalImageToTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-copyexternalimagetotexture-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑦⑤\">Device timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>texture</var> be <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture②⑨\">texture</a></code>.</p>"
        },
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error③①\" data-timeline=\"device\">generate a validation error</a> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>usability</var> must be <code>good</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-destroyed-slot\" id=\"ref-for-dom-gputexture-destroyed-slot②\">[[destroyed]]</a></code> must be <code>false</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>texture</var> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with②⑦\" data-timeline=\"device\">valid to use with</a> <var>this</var>.</p>\n           </li><li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpuimagecopytexture\" id=\"ref-for-abstract-opdef-validating-gpuimagecopytexture③\" data-timeline=\"device\">validating GPUImageCopyTexture</a>(destination, copySize) must return <code>true</code>.</p>\n           </li><li data-md=\"\">\n            <p><var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-usage\" id=\"ref-for-dom-gputexture-usage⑦\">usage</a></code> must include both <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-render_attachment\" id=\"ref-for-dom-gputextureusage-render_attachment①⓪\">RENDER_ATTACHMENT</a></code> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-copy_dst\" id=\"ref-for-dom-gputextureusage-copy_dst⑥\">COPY_DST</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-dimension\" id=\"ref-for-dom-gputexture-dimension①②\">dimension</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedimension-2d\" id=\"ref-for-dom-gputexturedimension-2d②①\">\"2d\"</a></code>.</p>\n           </li><li data-md=\"\">\n            <p><var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-samplecount\" id=\"ref-for-dom-gputexture-samplecount①②\">sampleCount</a></code> must be 1.</p>\n           </li><li data-md=\"\">\n            <p><var>texture</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-format\" id=\"ref-for-dom-gputexture-format②②\">format</a></code> must be one of the following\nformats (which all support <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureusage-render_attachment\" id=\"ref-for-dom-gputextureusage-render_attachment①①\">RENDER_ATTACHMENT</a></code> usage):</p>\n            <ul>\n             <li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-r8unorm\" id=\"ref-for-dom-gputextureformat-r8unorm\">\"r8unorm\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-r16float\" id=\"ref-for-dom-gputextureformat-r16float\">\"r16float\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-r32float\" id=\"ref-for-dom-gputextureformat-r32float\">\"r32float\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-rg8unorm\" id=\"ref-for-dom-gputextureformat-rg8unorm\">\"rg8unorm\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-rg16float\" id=\"ref-for-dom-gputextureformat-rg16float\">\"rg16float\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-rg32float\" id=\"ref-for-dom-gputextureformat-rg32float\">\"rg32float\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-rgba8unorm\" id=\"ref-for-dom-gputextureformat-rgba8unorm③\">\"rgba8unorm\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-rgba8unorm-srgb\" id=\"ref-for-dom-gputextureformat-rgba8unorm-srgb①\">\"rgba8unorm-srgb\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-bgra8unorm\" id=\"ref-for-dom-gputextureformat-bgra8unorm②\">\"bgra8unorm\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-bgra8unorm-srgb\" id=\"ref-for-dom-gputextureformat-bgra8unorm-srgb\">\"bgra8unorm-srgb\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-rgb10a2unorm\" id=\"ref-for-dom-gputextureformat-rgb10a2unorm\">\"rgb10a2unorm\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-rgba16float\" id=\"ref-for-dom-gputextureformat-rgba16float\">\"rgba16float\"</a></code></p>\n             </li><li data-md=\"\">\n              <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputextureformat-rgba32float\" id=\"ref-for-dom-gputextureformat-rgba32float\">\"rgba32float\"</a></code></p>\n            </li></ul>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>If <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers②⑥\">depthOrArrayLayers</a> is &gt; 0, issue the subsequent\nsteps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑥②\">Queue timeline</a> of <var>this</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.copyExternalImageToTexture",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-copyexternalimagetotexture-source-destination-copysize-source",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑥③\">Queue timeline</a> steps:",
      "rationale": "assert",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert②⑦\">Assert</a> that the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-width\" id=\"ref-for-texel-block-width①③\">texel block width</a> of <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture③⓪\">texture</a></code> is 1,\nthe <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block-height\" id=\"ref-for-texel-block-height①②\">texel block height</a> of <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-texture\" id=\"ref-for-dom-gpuimagecopytexture-texture③①\">texture</a></code> is 1, and that <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-depthorarraylayers\" id=\"ref-for-gpuextent3d-depthorarraylayers②⑦\">depthOrArrayLayers</a> is 1.</p>"
        },
        {
          "html": "<p>Let <var>srcOrigin</var> be <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopyexternalimage-origin\" id=\"ref-for-dom-gpuimagecopyexternalimage-origin③\">origin</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>dstOrigin</var> be <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexture-origin\" id=\"ref-for-dom-gpuimagecopytexture-origin①⑨\">origin</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>dstSubregion</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-texture-copy-sub-region\" id=\"ref-for-abstract-opdef-texture-copy-sub-region⑤\" data-timeline=\"const\">texture copy sub-region</a> (<var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-z\" id=\"ref-for-gpuorigin3d-z⑧\">z</a>) of <var>destination</var>.</p>"
        },
        {
          "html": "For each <var>y</var> in the range [0, <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height②⑤\">height</a> − 1]:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>srcY</var> be <var>y</var> if <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopyexternalimage-flipy\" id=\"ref-for-dom-gpuimagecopyexternalimage-flipy①\">flipY</a></code> is <code>false</code> and\n(<var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-height\" id=\"ref-for-gpuextent3d-height②⑥\">height</a> − 1 − <var>y</var>) otherwise.</p>"
            },
            {
              "html": "For each <var>x</var> in the range [0, <var>copySize</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuextent3d-width\" id=\"ref-for-gpuextent3d-width②⑧\">width</a> − 1]:",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#texel-block\" id=\"ref-for-texel-block③⓪\">texel block</a> (<var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-x\" id=\"ref-for-gpuorigin3d-x⑦\">x</a> + <var>x</var>, <var>dstOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin3d-y\" id=\"ref-for-gpuorigin3d-y⑦\">y</a> + <var>y</var>) of <var>dstSubregion</var> to be an <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#equivalent-texel-representation\" id=\"ref-for-equivalent-texel-representation④\">equivalent texel representation</a> of the pixel at\n(<var>srcOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin2d-x\" id=\"ref-for-gpuorigin2d-x①\">x</a> + <var>x</var>, <var>srcOrigin</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpuorigin2d-y\" id=\"ref-for-gpuorigin2d-y①\">y</a> + <var>srcY</var>) of <var>source</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopyexternalimage-source\" id=\"ref-for-dom-gpuimagecopyexternalimage-source③\">source</a></code> after applying any <a href=\"https://gpuweb.github.io/gpuweb/#color-space-conversions\">color encoding</a> required by <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexturetagged-colorspace\" id=\"ref-for-dom-gpuimagecopytexturetagged-colorspace②\">colorSpace</a></code> and <var>destination</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuimagecopytexturetagged-premultipliedalpha\" id=\"ref-for-dom-gpuimagecopytexturetagged-premultipliedalpha②\">premultipliedAlpha</a></code>.</p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "GPUQueue.submit",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-submit-commandbuffers-commandbuffers",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⓪①\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑦⑥\">Device timeline</a> of <var>this</var>:</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.submit",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-submit-commandbuffers-commandbuffers",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑦⑦\">Device timeline</a> steps:",
      "rationale": "if",
      "steps": [
        {
          "html": "For each of the following types of resources used by any command in any\nelement of <var>commandBuffers</var>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "GPUBuffer b",
                  "steps": [
                    {
                      "html": "<p><var>b</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubuffer-internal-state-slot\" id=\"ref-for-dom-gpubuffer-internal-state-slot⑨\" data-timeline=\"device\">[[internal state]]</a></code> must\nbe \"<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpubuffer-internal-state-available\" id=\"ref-for-gpubuffer-internal-state-available⑤\" data-timeline=\"device\">available</a>\".</p>"
                    }
                  ]
                },
                {
                  "case": "GPUTexture t",
                  "steps": [
                    {
                      "html": "<p><var>t</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-destroyed-slot\" id=\"ref-for-dom-gputexture-destroyed-slot③\">[[destroyed]]</a></code> must be <code>false</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "GPUExternalTexture et",
                  "steps": [
                    {
                      "html": "<p><var>et</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuexternaltexture-expired-slot\" id=\"ref-for-dom-gpuexternaltexture-expired-slot④\">[[expired]]</a></code> must be <code>false</code>.</p>"
                    }
                  ]
                },
                {
                  "case": "GPUQuerySet qs",
                  "steps": [
                    {
                      "html": "<p><var>qs</var> must be in the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#query-set-state-available\" id=\"ref-for-query-set-state-available\">available</a> state.\nFor occlusion queries, the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassdescriptor-occlusionqueryset\" id=\"ref-for-dom-gpurenderpassdescriptor-occlusionqueryset④\">occlusionQuerySet</a></code> in <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandencoder-beginrenderpass\" id=\"ref-for-dom-gpucommandencoder-beginrenderpass④\">beginRenderPass()</a></code> is not \"used\" unless\nit is also used by <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpassencoder-beginocclusionquery\" id=\"ref-for-dom-gpurenderpassencoder-beginocclusionquery③\">beginOcclusionQuery()</a></code>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>For each <var>commandBuffer</var> in <var>commandBuffers</var>:</p>\n         <ol>\n          <li data-md=\"\">\n           <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑤⑧\" data-timeline=\"device\">Invalidate</a> <var>commandBuffer</var>.</p>\n         </li></ol>",
          "ignored": [
            "Invalidate commandBuffer."
          ]
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑥④\">Queue timeline</a> of <var>this</var>:</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.submit",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpuqueue-submit-commandbuffers-commandbuffers",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#queue-timeline\" id=\"ref-for-queue-timeline⑥⑤\">Queue timeline</a> steps:",
      "rationale": "for",
      "steps": [
        {
          "html": "For each <var>commandBuffer</var> in <var>commandBuffers</var>:",
          "rationale": "execute",
          "steps": [
            {
              "html": "<p>Execute each command in <var>commandBuffer</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucommandbuffer-command_list-slot\" id=\"ref-for-dom-gpucommandbuffer-command_list-slot①\">[[command_list]]</a></code>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GPUQueue.onSubmittedWorkDone",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⓪②\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var data-timeline=\"content\">contentTimeline</var> be the current <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⓪③\">Content timeline</a>.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise⑤\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Issue the <var>synchronization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑦⑧\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.onSubmittedWorkDone",
      "html": "When the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑧⓪\">device timeline</a> becomes informed of the completion of all <span data-timeline=\"queue\">currently-enqueued operations</span> on <var>this</var>, or\nif <var>this</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalid\" id=\"ref-for-abstract-opdef-invalid①⑥\" data-timeline=\"device\">lost</a>, or when <var>this</var> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#lose-the-device\" id=\"ref-for-lose-the-device⑥\" data-timeline=\"device\">becomes lost</a>:",
      "rationale": "issue",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on <var data-timeline=\"content\">contentTimeline</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUQueue.onSubmittedWorkDone",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⓪④\">Content timeline</a> steps:",
      "rationale": "resolve",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve⑧\">Resolve</a> <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createQuerySet",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createqueryset-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⓪⑤\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuquerysetdescriptor-type\" id=\"ref-for-dom-gpuquerysetdescriptor-type①\">type</a></code> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuquerytype-timestamp\" id=\"ref-for-dom-gpuquerytype-timestamp②\">\"timestamp\"</a></code>,\nbut <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#timestamp-query\" id=\"ref-for-timestamp-query②\">\"timestamp-query\"</a></code> is not <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#enabled-for\" id=\"ref-for-enabled-for①\" data-timeline=\"const\">enabled for</a> <var>this</var>:",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror①②\">TypeError</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>q</var> be <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⑧\">!</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-new-webgpu-object\" id=\"ref-for-abstract-opdef-create-a-new-webgpu-object①②\" data-timeline=\"content\">create a new WebGPU object</a>(<var>this</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuqueryset\" id=\"ref-for-gpuqueryset③②\">GPUQuerySet</a></code>, <var>descriptor</var>).</p>"
        },
        {
          "html": "<p>Set <var>q</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuqueryset-type\" id=\"ref-for-dom-gpuqueryset-type②\">type</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuquerysetdescriptor-type\" id=\"ref-for-dom-gpuquerysetdescriptor-type②\">type</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>q</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuqueryset-count\" id=\"ref-for-dom-gpuqueryset-count②\">count</a></code> to <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuquerysetdescriptor-count\" id=\"ref-for-dom-gpuquerysetdescriptor-count①\">count</a></code>.</p>"
        },
        {
          "html": "<p>Issue the <var>initialization steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑧②\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>q</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.createQuerySet",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-createqueryset-descriptor-descriptor",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑧③\">Device timeline</a> <var>initialization steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error③③\" data-timeline=\"device\">generate a validation error</a>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalidate\" id=\"ref-for-abstract-opdef-invalidate⑤⑨\" data-timeline=\"device\">invalidate</a> <var>q</var>, and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><var>this</var> must not be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalid\" id=\"ref-for-abstract-opdef-invalid①⑦\" data-timeline=\"device\">lost</a>.</p>\n           </li><li data-md=\"\">\n            <p><var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuquerysetdescriptor-count\" id=\"ref-for-dom-gpuquerysetdescriptor-count②\">count</a></code> must be ≤ 4096.</p>\n          </li></ul>\n         </div>"
        },
        {
          "html": "<p>Set <var>q</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuqueryset-state-slot\" id=\"ref-for-dom-gpuqueryset-state-slot\">[[state]]</a></code> to <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#query-set-state-available\" id=\"ref-for-query-set-state-available①\">available</a>.</p>"
        }
      ]
    },
    {
      "name": "GPUQuerySet.destroy",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⓪⑥\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuqueryset-state-slot\" id=\"ref-for-dom-gpuqueryset-state-slot①\">[[state]]</a></code> to <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#query-set-state-destroyed\" id=\"ref-for-query-set-state-destroyed\">destroyed</a>.</p>"
        }
      ]
    },
    {
      "name": "Validate timestampWrites",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-timestampwrites",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑧⑤\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <code>true</code> if the following requirements are met, and <code>false</code> if not:</p>\n      <div class=\"validusage\">\n       <ul>\n        <li data-md=\"\">\n         <p><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#timestamp-query\" id=\"ref-for-timestamp-query③\">\"timestamp-query\"</a></code> must be <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#enabled-for\" id=\"ref-for-enabled-for②\" data-timeline=\"const\">enabled for</a> <var>device</var>.</p>\n        </li><li data-md=\"\">\n         <p><var>timestampWrites</var>.<code>querySet</code> must be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-valid-to-use-with\" id=\"ref-for-abstract-opdef-valid-to-use-with②⑨\" data-timeline=\"device\">valid to use with</a> <var>device</var>.</p>\n        </li><li data-md=\"\">\n         <p><var>timestampWrites</var>.<code>querySet</code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuqueryset-type\" id=\"ref-for-dom-gpuqueryset-type③\">type</a></code> must be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuquerytype-timestamp\" id=\"ref-for-dom-gpuquerytype-timestamp③\">\"timestamp\"</a></code>.</p>\n        </li><li data-md=\"\">\n         <p>Of the write index members in <var>timestampWrites</var> (<code>beginningOfPassWriteIndex</code>, <code>endOfPassWriteIndex</code>):</p>\n         <ul>\n          <li data-md=\"\">\n           <p>At least one must be <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑦④\">provided</a>.</p>\n          </li><li data-md=\"\">\n           <p>Of those which are <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑦⑤\">provided</a>:</p>\n           <ul>\n            <li data-md=\"\">\n             <p>No two may be equal.</p>\n            </li><li data-md=\"\">\n             <p>Each must be &lt; <var>timestampWrites</var>.<code>querySet</code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuqueryset-count\" id=\"ref-for-dom-gpuqueryset-count③\">count</a></code>.</p>\n           </li></ul>\n         </li></ul>\n       </li></ul>\n      </div>"
        }
      ]
    },
    {
      "name": "create a 'webgpu' context on a canvas",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-create-a-webgpu-context-on-a-canvas",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-create-a-webgpu-context-on-a-canvas\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a 'webgpu' context on a canvas</dfn> (<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#htmlcanvaselement\" id=\"ref-for-htmlcanvaselement⑥\">HTMLCanvasElement</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#offscreencanvas\" id=\"ref-for-offscreencanvas④\">OffscreenCanvas</a></code>) <var>canvas</var>, run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⓪⑦\">content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>context</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucanvascontext\" id=\"ref-for-gpucanvascontext④\">GPUCanvasContext</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-canvas\" id=\"ref-for-dom-gpucanvascontext-canvas\">canvas</a></code> to <var>canvas</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-replace-the-drawing-buffer\" id=\"ref-for-abstract-opdef-replace-the-drawing-buffer\" data-timeline=\"content\">Replace the drawing buffer</a> of <var>context</var>.</p>"
        },
        {
          "html": "<p>Return <var>context</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUCanvasContext.configure",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-configure-configuration-configuration",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⓪⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>device</var> be <var>configuration</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvasconfiguration-device\" id=\"ref-for-dom-gpucanvasconfiguration-device\">device</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⑨\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features\" id=\"ref-for-abstract-opdef-validate-texture-format-required-features⑧\" data-timeline=\"content\">Validate texture format required features</a> of <var>configuration</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvasconfiguration-format\" id=\"ref-for-dom-gpucanvasconfiguration-format①\">format</a></code> with <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑦①\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤⓪\">?</a> <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-texture-format-required-features\" id=\"ref-for-abstract-opdef-validate-texture-format-required-features⑨\" data-timeline=\"content\">Validate texture format required features</a> of each element of <var>configuration</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexturedescriptor-viewformats\" id=\"ref-for-dom-gputexturedescriptor-viewformats⑥\">viewFormats</a></code> with <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuobjectbase-device-slot\" id=\"ref-for-dom-gpuobjectbase-device-slot⑦②\" data-timeline=\"const\">[[device]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>descriptor</var> be the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-gputexturedescriptor-for-the-canvas-and-configuration\" id=\"ref-for-abstract-opdef-gputexturedescriptor-for-the-canvas-and-configuration\" data-timeline=\"content\">GPUTextureDescriptor for the canvas and configuration</a>(<var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-canvas\" id=\"ref-for-dom-gpucanvascontext-canvas②\">canvas</a></code>, <var>configuration</var>).</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-configuration-slot\" id=\"ref-for-dom-gpucanvascontext-configuration-slot②\">[[configuration]]</a></code> to <var>configuration</var>.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-texturedescriptor-slot\" id=\"ref-for-dom-gpucanvascontext-texturedescriptor-slot\">[[textureDescriptor]]</a></code> to <var>descriptor</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-replace-the-drawing-buffer\" id=\"ref-for-abstract-opdef-replace-the-drawing-buffer③\" data-timeline=\"content\">Replace the drawing buffer</a> of <var>this</var>, which resets <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-drawingbuffer-slot\" id=\"ref-for-dom-gpucanvascontext-drawingbuffer-slot①\">[[drawingBuffer]]</a></code> with a bitmap with the new format and tags.</p>"
        },
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑧⑥\">Device timeline</a> of <var>device</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUCanvasContext.configure",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-configure-configuration-configuration",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑧⑦\">Device timeline</a> steps:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If any of the following requirements are unmet, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error\" id=\"ref-for-abstract-opdef-generate-a-validation-error③④\" data-timeline=\"device\">generate a validation error</a> and stop.</p>\n         <div class=\"validusage\">\n          <ul>\n           <li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gputexturedescriptor\" id=\"ref-for-abstract-opdef-validating-gputexturedescriptor①\" data-timeline=\"device\">validating GPUTextureDescriptor</a>(<var>device</var>, <var>descriptor</var>)\nmust return true.</p>\n           </li><li data-md=\"\">\n            <p><a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#supported-context-formats\" id=\"ref-for-supported-context-formats\">Supported context formats</a> must <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-contain\" id=\"ref-for-list-contain③\">contain</a> <var>configuration</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvasconfiguration-format\" id=\"ref-for-dom-gpucanvasconfiguration-format②\">format</a></code>.</p>\n          </li></ul>\n         </div>"
        }
      ]
    },
    {
      "name": "GPUCanvasContext.unconfigure",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①⓪⑨\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-configuration-slot\" id=\"ref-for-dom-gpucanvascontext-configuration-slot③\">[[configuration]]</a></code> to <code>null</code>.</p>"
        },
        {
          "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-texturedescriptor-slot\" id=\"ref-for-dom-gpucanvascontext-texturedescriptor-slot①\">[[textureDescriptor]]</a></code> to <code>null</code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-replace-the-drawing-buffer\" id=\"ref-for-abstract-opdef-replace-the-drawing-buffer④\" data-timeline=\"content\">Replace the drawing buffer</a> of <var>this</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUCanvasContext.getCurrentTexture",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①①⓪\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-configuration-slot\" id=\"ref-for-dom-gpucanvascontext-configuration-slot④\">[[configuration]]</a></code> is <code>null</code>:",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#invalidstateerror\" id=\"ref-for-invalidstateerror\">InvalidStateError</a></code> and stop.</p>"
            }
          ]
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#assert\" id=\"ref-for-assert②⑧\">Assert</a> <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-texturedescriptor-slot\" id=\"ref-for-dom-gpucanvascontext-texturedescriptor-slot②\">[[textureDescriptor]]</a></code> is not <code>null</code>.</p>"
        },
        {
          "html": "<p>Let <var>device</var> be <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-configuration-slot\" id=\"ref-for-dom-gpucanvascontext-configuration-slot⑤\">[[configuration]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvasconfiguration-device\" id=\"ref-for-dom-gpucanvasconfiguration-device①\">device</a></code>.</p>"
        },
        {
          "html": "If <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-currenttexture-slot\" id=\"ref-for-dom-gpucanvascontext-currenttexture-slot④\">[[currentTexture]]</a></code> is <code>null</code>:",
          "rationale": "replace",
          "steps": [
            {
              "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-replace-the-drawing-buffer\" id=\"ref-for-abstract-opdef-replace-the-drawing-buffer⑥\" data-timeline=\"content\">Replace the drawing buffer</a> of <var>this</var>.</p>"
            },
            {
              "html": "<p>Set <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-currenttexture-slot\" id=\"ref-for-dom-gpucanvascontext-currenttexture-slot⑤\">[[currentTexture]]</a></code> to the result of calling <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-createtexture\" id=\"ref-for-dom-gpudevice-createtexture③\">createTexture()</a></code> with <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-texturedescriptor-slot\" id=\"ref-for-dom-gpucanvascontext-texturedescriptor-slot③\">[[textureDescriptor]]</a></code>,\nexcept with the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gputexture\" id=\"ref-for-gputexture④⑤\">GPUTexture</a></code>'s underlying storage pointing to <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-drawingbuffer-slot\" id=\"ref-for-dom-gpucanvascontext-drawingbuffer-slot②\">[[drawingBuffer]]</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p><strong>Optionally</strong>, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-queue-an-automatic-expiry-task\" id=\"ref-for-abstract-opdef-queue-an-automatic-expiry-task①\" data-timeline=\"content\">queue an automatic expiry task</a> with device <var>device</var> and the following steps:</p>\n         <div data-timeline=\"content\">\n          <ol>\n           <li data-md=\"\">\n            <p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-expire-the-current-texture\" id=\"ref-for-abstract-opdef-expire-the-current-texture①\" data-timeline=\"content\">Expire the current texture</a> of <var>this</var>.</p>\n            \n          </li></ol>\n         </div>",
          "ignored": [
            "Expire the current texture of this."
          ]
        },
        {
          "html": "<p>Return <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-currenttexture-slot\" id=\"ref-for-dom-gpucanvascontext-currenttexture-slot⑥\">[[currentTexture]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "get a copy of the image contents of a context",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-get-a-copy-of-the-image-contents-of-a-context",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①①①\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Ensure that all submitted work items (e.g. queue submissions) have\ncompleted writing to the image (via <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-currenttexture-slot\" id=\"ref-for-dom-gpucanvascontext-currenttexture-slot⑦\">[[currentTexture]]</a></code>).</p>"
        },
        {
          "html": "<p>Let <var>snapshot</var> be a copy of <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-drawingbuffer-slot\" id=\"ref-for-dom-gpucanvascontext-drawingbuffer-slot③\">[[drawingBuffer]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>alphaMode</var> be <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-configuration-slot\" id=\"ref-for-dom-gpucanvascontext-configuration-slot⑥\">[[configuration]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvasconfiguration-alphamode\" id=\"ref-for-dom-gpucanvasconfiguration-alphamode②\">alphaMode</a></code>.</p>"
        },
        {
          "html": "<dl class=\"switch\">\n       <dt data-md=\"\">If <var>alphaMode</var> is <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvasalphamode-opaque\" id=\"ref-for-dom-gpucanvasalphamode-opaque①\">\"opaque\"</a></code>:\n       </dt><dd data-md=\"\">\n        <ol>\n         <li data-md=\"\">\n          <p>Clear the alpha channel of <var>snapshot</var> to 1.0.</p>\n         </li><li data-md=\"\">\n          <p>Tag <var>snapshot</var> as being opaque.</p>\n        </li></ol>\n        \n       </dd><dt data-md=\"\">Otherwise:\n       </dt><dd data-md=\"\">\n        <p>Tag <var>snapshot</var> with <var>alphaMode</var>.</p>\n      </dd></dl>",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "If alphaMode is \"opaque\":",
                  "steps": [
                    {
                      "html": "<ol>\n         <li data-md=\"\">\n          <p>Clear the alpha channel of <var>snapshot</var> to 1.0.</p>\n         </li><li data-md=\"\">\n          <p>Tag <var>snapshot</var> as being opaque.</p>\n        </li></ol>",
                      "rationale": "clear",
                      "steps": [
                        {
                          "html": "<p>Clear the alpha channel of <var>snapshot</var> to 1.0.</p>"
                        },
                        {
                          "html": "<p>Tag <var>snapshot</var> as being opaque.</p>"
                        }
                      ]
                    }
                  ]
                },
                {
                  "case": "Otherwise:",
                  "steps": [
                    {
                      "html": "<p>Tag <var>snapshot</var> with <var>alphaMode</var>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>snapshot</var>.</p>"
        }
      ]
    },
    {
      "name": "Replace the drawing buffer",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-replace-the-drawing-buffer",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-replace-the-drawing-buffer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">Replace the drawing buffer</dfn> of a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucanvascontext\" id=\"ref-for-gpucanvascontext①③\">GPUCanvasContext</a></code> <var>context</var>, run\n    the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①①②\">content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-expire-the-current-texture\" id=\"ref-for-abstract-opdef-expire-the-current-texture③\" data-timeline=\"content\">Expire the current texture</a> of <var>context</var>.</p>"
        },
        {
          "html": "<p>Let <var>configuration</var> be <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-configuration-slot\" id=\"ref-for-dom-gpucanvascontext-configuration-slot⑦\">[[configuration]]</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-drawingbuffer-slot\" id=\"ref-for-dom-gpucanvascontext-drawingbuffer-slot④\">[[drawingBuffer]]</a></code> to a transparent black image of the same\nsize as <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-canvas\" id=\"ref-for-dom-gpucanvascontext-canvas③\">canvas</a></code>.</p>\n      <ul>\n       <li data-md=\"\">\n        <p>If <var>configuration</var> is null, the drawing buffer is tagged with the color space <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#dom-predefinedcolorspace-srgb\" id=\"ref-for-dom-predefinedcolorspace-srgb\">\"srgb\"</a></code>.\nIn this case, the drawing buffer will remain blank until the context is configured.</p>\n       </li><li data-md=\"\">\n        <p>If not, the drawing buffer has the specified <var>configuration</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvasconfiguration-format\" id=\"ref-for-dom-gpucanvasconfiguration-format③\">format</a></code> and is tagged with the specified <var>configuration</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvasconfiguration-colorspace\" id=\"ref-for-dom-gpucanvasconfiguration-colorspace\">colorSpace</a></code>.</p>\n      </li></ul>"
        }
      ]
    },
    {
      "name": "Expire the current texture",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-expire-the-current-texture",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-expire-the-current-texture\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">Expire the current texture</dfn> of a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucanvascontext\" id=\"ref-for-gpucanvascontext①④\">GPUCanvasContext</a></code> <var>context</var>, run\n    the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①①③\">content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-currenttexture-slot\" id=\"ref-for-dom-gpucanvascontext-currenttexture-slot⑨\">[[currentTexture]]</a></code> is not <code>null</code>:",
          "rationale": "call",
          "steps": [
            {
              "html": "<p>Call <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-currenttexture-slot\" id=\"ref-for-dom-gpucanvascontext-currenttexture-slot①⓪\">[[currentTexture]]</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gputexture-destroy\" id=\"ref-for-dom-gputexture-destroy③\">destroy()</a></code> (without destroying <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-drawingbuffer-slot\" id=\"ref-for-dom-gpucanvascontext-drawingbuffer-slot⑤\">[[drawingBuffer]]</a></code>)\nto terminate write access to the image.</p>"
            },
            {
              "html": "<p>Set <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-currenttexture-slot\" id=\"ref-for-dom-gpucanvascontext-currenttexture-slot①①\">[[currentTexture]]</a></code> to <code>null</code>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "get the bitmap of a WebGPU canvas",
      "html": "When the \"bitmap\" is read from an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#htmlcanvaselement\" id=\"ref-for-htmlcanvaselement⑧\">HTMLCanvasElement</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#offscreencanvas\" id=\"ref-for-offscreencanvas⑥\">OffscreenCanvas</a></code> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucanvascontext\" id=\"ref-for-gpucanvascontext①⑤\">GPUCanvasContext</a></code> <var>context</var>, run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①①④\">content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-get-a-copy-of-the-image-contents-of-a-context\" id=\"ref-for-abstract-opdef-get-a-copy-of-the-image-contents-of-a-context④\" data-timeline=\"content\">a copy of the image contents</a> of <var>context</var>.</p>"
        }
      ]
    },
    {
      "name": "updating the rendering of a WebGPU canvas",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-updating-the-rendering-of-a-webgpu-canvas",
      "html": "Run the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-expire-the-current-texture\" id=\"ref-for-abstract-opdef-expire-the-current-texture④\" data-timeline=\"content\">Expire the current texture</a> of <var>context</var>.</p>"
        }
      ]
    },
    {
      "name": "transferToImageBitmap from WebGPU",
      "html": "When <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#dom-offscreencanvas-transfertoimagebitmap\" id=\"ref-for-dom-offscreencanvas-transfertoimagebitmap②\">transferToImageBitmap()</a></code> is called on a canvas with <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucanvascontext\" id=\"ref-for-gpucanvascontext①⑦\">GPUCanvasContext</a></code> <var>context</var>, after creating an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#imagebitmap\" id=\"ref-for-imagebitmap④\">ImageBitmap</a></code> from the canvas’s bitmap,\n    run the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①①⑥\">content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-replace-the-drawing-buffer\" id=\"ref-for-abstract-opdef-replace-the-drawing-buffer⑧\" data-timeline=\"content\">Replace the drawing buffer</a> of <var>context</var>.</p>"
        }
      ]
    },
    {
      "name": "update the canvas size",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-update-the-canvas-size",
      "html": "When an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#htmlcanvaselement\" id=\"ref-for-htmlcanvaselement①④\">HTMLCanvasElement</a></code> or <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/canvas.html#offscreencanvas\" id=\"ref-for-offscreencanvas①④\">OffscreenCanvas</a></code> <var>canvas</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpucanvascontext\" id=\"ref-for-gpucanvascontext①⑨\">GPUCanvasContext</a></code> <var>context</var> has its <code>width</code> or <code>height</code> attributes set, <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" id=\"abstract-opdef-update-the-canvas-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">update the canvas size</dfn> by running the following <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①①⑦\">content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-replace-the-drawing-buffer\" id=\"ref-for-abstract-opdef-replace-the-drawing-buffer①⓪\" data-timeline=\"content\">Replace the drawing buffer</a> of <var>context</var>.</p>"
        },
        {
          "html": "<p>Let <var>configuration</var> be <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-configuration-slot\" id=\"ref-for-dom-gpucanvascontext-configuration-slot⑧\">[[configuration]]</a></code></p>"
        },
        {
          "html": "If <var>configuration</var> is not <code>null</code>:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>context</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucanvascontext-texturedescriptor-slot\" id=\"ref-for-dom-gpucanvascontext-texturedescriptor-slot④\">[[textureDescriptor]]</a></code> to the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-gputexturedescriptor-for-the-canvas-and-configuration\" id=\"ref-for-abstract-opdef-gputexturedescriptor-for-the-canvas-and-configuration①\" data-timeline=\"content\">GPUTextureDescriptor for the canvas and configuration</a>(<var>canvas</var>, <var>configuration</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GPUCanvasAlphaMode/\"premultiplied\"",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpucanvasalphamode-premultiplied",
      "html": "If the canvas texture contains <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#out-of-gamut-premultiplied-rgba-value\" id=\"ref-for-out-of-gamut-premultiplied-rgba-value①\">out-of-gamut premultiplied RGBA values</a> at the time the\ncanvas contents are read, the behavior depends on whether the canvas is:",
      "rationale": ".switch",
      "steps": [
        {
          "operation": "switch",
          "steps": [
            {
              "case": "used as an image source",
              "steps": [
                {
                  "html": "<p>Values are preserved, as described in <a href=\"https://gpuweb.github.io/gpuweb/#color-space-conversions\">color space conversion</a>.</p>"
                }
              ]
            },
            {
              "case": "displayed to the screen",
              "steps": [
                {
                  "html": "<p>Compositing results are undefined.</p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Generate a validation error",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-a-validation-error",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑧⑧\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>error</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuvalidationerror\" id=\"ref-for-gpuvalidationerror①\">GPUValidationError</a></code> with an appropriate error message.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-dispatch-error\" id=\"ref-for-abstract-opdef-dispatch-error①\">Dispatch error</a> <var>error</var> to <var>device</var>.</p>"
        }
      ]
    },
    {
      "name": "Generate an out-of-memory error",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-an-out-of-memory-error",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑧⑨\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>error</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuoutofmemoryerror\" id=\"ref-for-gpuoutofmemoryerror①\">GPUOutOfMemoryError</a></code> with an appropriate error message.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-dispatch-error\" id=\"ref-for-abstract-opdef-dispatch-error②\">Dispatch error</a> <var>error</var> to <var>device</var>.</p>"
        }
      ]
    },
    {
      "name": "Generate an internal error",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-generate-an-internal-error",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑨⓪\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>error</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuinternalerror\" id=\"ref-for-gpuinternalerror①\">GPUInternalError</a></code> with an appropriate error message.</p>"
        },
        {
          "html": "<p><a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-dispatch-error\" id=\"ref-for-abstract-opdef-dispatch-error③\">Dispatch error</a> <var>error</var> to <var>device</var>.</p>"
        }
      ]
    },
    {
      "name": "current error scope",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-current-error-scope",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑨②\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>error</var> is an instance of:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "GPUValidationError",
                  "steps": [
                    {
                      "html": "<p>Let <var>type</var> be \"validation\".</p>"
                    }
                  ]
                },
                {
                  "case": "GPUOutOfMemoryError",
                  "steps": [
                    {
                      "html": "<p>Let <var>type</var> be \"out-of-memory\".</p>"
                    }
                  ]
                },
                {
                  "case": "GPUInternalError",
                  "steps": [
                    {
                      "html": "<p>Let <var>type</var> be \"internal\".</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>scope</var> be the last <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-item\" id=\"ref-for-list-item\">item</a> of <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-errorscopestack-slot\" id=\"ref-for-dom-gpudevice-errorscopestack-slot\">[[errorScopeStack]]</a></code>.</p>"
        },
        {
          "html": "While <var>scope</var> is not <code>undefined</code>:",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>scope</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpu-error-scope-filter-slot\" id=\"ref-for-dom-gpu-error-scope-filter-slot\">[[filter]]</a></code> is <var>type</var>, return <var>scope</var>.</p>"
            },
            {
              "html": "<p>Set <var>scope</var> to the previous <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-item\" id=\"ref-for-list-item①\">item</a> of <var>device</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-errorscopestack-slot\" id=\"ref-for-dom-gpudevice-errorscopestack-slot①\">[[errorScopeStack]]</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <code>undefined</code>.</p>"
        }
      ]
    },
    {
      "name": "Dispatch error",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-dispatch-error",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑨④\">Device timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>device</var> is <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-invalid\" id=\"ref-for-abstract-opdef-invalid①⑧\" data-timeline=\"device\">lost</a>, return.</p>"
        },
        {
          "html": "<p>Let <var>scope</var> be the <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-current-error-scope\" id=\"ref-for-abstract-opdef-current-error-scope\" data-timeline=\"device\">current error scope</a> for <var>error</var> and <var>device</var>.</p>"
        },
        {
          "html": "If <var>scope</var> is not <code>undefined</code>:",
          "rationale": "append",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append①⓪\">Append</a> <var>error</var> to <var>scope</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpu-error-scope-errors-slot\" id=\"ref-for-dom-gpu-error-scope-errors-slot\">[[errors]]</a></code>.</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p>Otherwise issue the following steps to the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①①⑧\">content timeline</a>:</p>"
        }
      ]
    },
    {
      "name": "Dispatch error",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-dispatch-error",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①①⑨\">Content timeline</a> steps:",
      "rationale": "if",
      "steps": [
        {
          "html": "<p>If the user agent chooses, <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-queue-a-global-task-for-gpudevice\" id=\"ref-for-abstract-opdef-queue-a-global-task-for-gpudevice①\" data-timeline=\"content\">queue a global task for GPUDevice</a> <var>device</var> with the following steps:</p>\n       <div data-timeline=\"content\">\n        <ol>\n         <li data-md=\"\">\n          <p>Fire a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuuncapturederrorevent\" id=\"ref-for-gpuuncapturederrorevent\">GPUUncapturedErrorEvent</a></code> named \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#eventdef-gpudevice-uncapturederror\" id=\"ref-for-eventdef-gpudevice-uncapturederror④\">uncapturederror</a></code>\" on <var>device</var>, with an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuuncapturederrorevent-error\" id=\"ref-for-dom-gpuuncapturederrorevent-error\">error</a></code> of <var>error</var>.</p>\n        </li></ol>\n       </div>",
          "rationale": "fire",
          "steps": [
            {
              "html": "<p>Fire a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpuuncapturederrorevent\" id=\"ref-for-gpuuncapturederrorevent\">GPUUncapturedErrorEvent</a></code> named \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#eventdef-gpudevice-uncapturederror\" id=\"ref-for-eventdef-gpudevice-uncapturederror④\">uncapturederror</a></code>\" on <var>device</var>, with an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuuncapturederrorevent-error\" id=\"ref-for-dom-gpuuncapturederrorevent-error\">error</a></code> of <var>error</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "GPUDevice.pushErrorScope",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-pusherrorscope-filter-filter",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②⓪\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Issue the subsequent steps on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑨⑤\">Device timeline</a> of <var>this</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.pushErrorScope",
      "href": "https://gpuweb.github.io/gpuweb/#dom-gpudevice-pusherrorscope-filter-filter",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑨⑥\">Device timeline</a> steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>scope</var> be a new <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#gpu-error-scope\" id=\"ref-for-gpu-error-scope⑧\">GPU error scope</a>.</p>"
        },
        {
          "html": "<p>Set <var>scope</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpu-error-scope-filter-slot\" id=\"ref-for-dom-gpu-error-scope-filter-slot①\">[[filter]]</a></code> to <var>filter</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#stack-push\" id=\"ref-for-stack-push①\">Push</a> <var>scope</var> onto <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-errorscopestack-slot\" id=\"ref-for-dom-gpudevice-errorscopestack-slot③\">[[errorScopeStack]]</a></code>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.popErrorScope",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②①\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var data-timeline=\"content\">contentTimeline</var> be the current <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②②\">Content timeline</a>.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise⑦\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Issue the <var>check steps</var> on the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑨⑦\">Device timeline</a> of <var>this</var>.</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.popErrorScope",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device-timeline\" id=\"ref-for-device-timeline①⑨⑧\">Device timeline</a> <var>check steps</var>:",
      "rationale": "if",
      "steps": [
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②③\">Content timeline</a> steps:",
          "rationale": "resolve",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve⑨\">Resolve</a> <var>promise</var> with <code>null</code>.</p>"
            }
          ]
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②④\">Content timeline</a> steps:",
          "rationale": "reject",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject⑨\">Reject</a> <var>promise</var> with an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#operationerror\" id=\"ref-for-operationerror⑥\">OperationError</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>scope</var> be the result of <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#stack-pop\" id=\"ref-for-stack-pop①\">popping</a> an <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-item\" id=\"ref-for-list-item②\">item</a> off of <var>this</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpudevice-errorscopestack-slot\" id=\"ref-for-dom-gpudevice-errorscopestack-slot⑥\">[[errorScopeStack]]</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>error</var> be <strong>any</strong> one of the items in <var>scope</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpu-error-scope-errors-slot\" id=\"ref-for-dom-gpu-error-scope-errors-slot①\">[[errors]]</a></code>,\nor <code>null</code> if there are none.</p>\n         <p>For any two errors E1 and E2 in the list, if E2 was caused by E1, E2 <strong>should\nnot</strong> be the one selected.</p>"
        },
        {
          "html": "<p>At an <strong>unspecified point now or in the future</strong>,\nissue the subsequent steps on <var data-timeline=\"content\">contentTimeline</var>.</p>"
        }
      ]
    },
    {
      "name": "GPUDevice.popErrorScope",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②⑤\">Content timeline</a> steps:",
      "rationale": "resolve",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①⓪\">Resolve</a> <var>promise</var> with <var>error</var>.</p>"
        }
      ]
    },
    {
      "name": "compute",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-compute",
      "html": "<strong>Arguments:</strong>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>computeInvocations</var> be an <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-empty\" id=\"ref-for-list-empty①\">empty</a> <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list②⓪\">list</a>.</p>"
        },
        {
          "html": "<p>Let <var>computeStage</var> be <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpucomputepipelinedescriptor-compute\" id=\"ref-for-dom-gpucomputepipelinedescriptor-compute③\">compute</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>workgroupSize</var> be the computed workgroup size for <var>computeStage</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-entrypoint\" id=\"ref-for-dom-gpuprogrammablestage-entrypoint⑤\">entryPoint</a></code> after\napplying <var>computeStage</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-constants\" id=\"ref-for-dom-gpuprogrammablestage-constants④\">constants</a></code> to <var>computeStage</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprogrammablestage-module\" id=\"ref-for-dom-gpuprogrammablestage-module⑧\">module</a></code>.</p>"
        },
        {
          "html": "For <var>workgroupX</var> in range <code>[0, <var>dispatchCall</var>.<code>workgroupCountX</code>]</code>:",
          "rationale": "for",
          "steps": [
            {
              "html": "For <var>workgroupY</var> in range <code>[0, <var>dispatchCall</var>.<code>workgroupCountY</code>]</code>:",
              "rationale": "for",
              "steps": [
                {
                  "html": "For <var>workgroupZ</var> in range <code>[0, <var>dispatchCall</var>.<code>workgroupCountZ</code>]</code>:",
                  "rationale": "for",
                  "steps": [
                    {
                      "html": "For <var>localX</var> in range <code>[0, <var>workgroupSize</var>.<code>x</code>]</code>:",
                      "rationale": "for",
                      "steps": [
                        {
                          "html": "For <var>localY</var> in range <code>[0, <var>workgroupSize</var>.<code>y</code>]</code>:",
                          "rationale": "for",
                          "steps": [
                            {
                              "html": "For <var>localZ</var> in range <code>[0, <var>workgroupSize</var>.<code>y</code>]</code>:",
                              "rationale": "let",
                              "steps": [
                                {
                                  "html": "<p>Let <var>invocation</var> be <code>{ <var>computeStage</var>, <var>workgroupX</var>, <var>workgroupY</var>, <var>workgroupZ</var>, <var>localX</var>, <var>localY</var>, <var>localZ</var> }</code></p>"
                                },
                                {
                                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append①①\">Append</a> <var>invocation</var> to <var>computeInvocations</var>.</p>"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "For every <var>invocation</var> in <var>computeInvocations</var>, in any order the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device\" id=\"ref-for-device②⓪\">device</a> chooses, including in parallel:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set the shader <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values\" id=\"ref-for-built-in-values③\">builtins</a>:</p>\n        <ul>\n         <li data-md=\"\">\n          <p>Set the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values-num_workgroups\" id=\"ref-for-built-in-values-num_workgroups\">num_workgroups</a> builtin, if any, to <code>(<br> <var>dispatchCall</var>.<code>workgroupCountX</code>,<br> <var>dispatchCall</var>.<code>workgroupCountY</code>,<br> <var>dispatchCall</var>.<code>workgroupCountZ</code><br> )</code></p>\n         </li><li data-md=\"\">\n          <p>Set the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values-workgroup_id\" id=\"ref-for-built-in-values-workgroup_id\">workgroup_id</a> builtin, if any, to <code>(<br> <var>invocation</var>.<var>workgroupX</var>,<br> <var>invocation</var>.<var>workgroupY</var>,<br> <var>invocation</var>.<var>workgroupZ</var><br> )</code></p>\n         </li><li data-md=\"\">\n          <p>Set the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values-local_invocation_id\" id=\"ref-for-built-in-values-local_invocation_id\">local_invocation_id</a> builtin, if any, to <code>(<br> <var>invocation</var>.<var>localX</var>,<br> <var>invocation</var>.<var>localY</var>,<br> <var>invocation</var>.<var>localZ</var><br> )</code></p>\n         </li><li data-md=\"\">\n          <p>Set the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values-global_invocation_id\" id=\"ref-for-built-in-values-global_invocation_id\">global_invocation_id</a> builtin, if any, to <code>(<br> <var>invocation</var>.<var>workgroupX</var> * <var>workgroupSize</var>.<code>x</code> + <var>invocation</var>.<var>localX</var>,<br> <var>invocation</var>.<var>workgroupY</var> * <var>workgroupSize</var>.<code>y</code> + <var>invocation</var>.<var>localY</var>,<br> <var>invocation</var>.<var>workgroupZ</var> * <var>workgroupSize</var>.<code>z</code> + <var>invocation</var>.<var>localZ</var><br> )</code>.</p>\n         </li><li data-md=\"\">\n          <p>Set the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values-local_invocation_index\" id=\"ref-for-built-in-values-local_invocation_index\">local_invocation_index</a> builtin, if any, to <code> <var>invocation</var>.<var>localX</var> + (<var>invocation</var>.<var>localY</var> * <var>workgroupSize</var>.<code>x</code>) +\n(<var>invocation</var>.<var>localZ</var> * <var>workgroupSize</var>.<code>x</code> * <var>workgroupSize</var>.<code>y</code>) </code></p>\n        </li></ul>"
            },
            {
              "html": "<p>Invoke the compute shader entry point described by <var>invocation</var>.<var>computeStage</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "render",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-render",
      "html": "<strong>Arguments:</strong>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><strong>Resolve indices</strong>. See <a href=\"https://gpuweb.github.io/gpuweb/#index-resolution\">§ 23.2.1 Index Resolution</a>.</p>\n      <p>Let <var>vertexList</var> be the result of <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-resolve-indices\" id=\"ref-for-abstract-opdef-resolve-indices\" data-timeline=\"queue\">resolve indices</a>(<var>drawCall</var>, <var>state</var>).</p>"
        },
        {
          "html": "<p><strong>Process vertices</strong>. See <a href=\"https://gpuweb.github.io/gpuweb/#vertex-processing\">§ 23.2.2 Vertex Processing</a>.</p>\n      <p>Execute <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-process-vertices\" id=\"ref-for-abstract-opdef-process-vertices\" data-timeline=\"queue\">process vertices</a>(<var>vertexList</var>, <var>drawCall</var>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-vertex\" id=\"ref-for-dom-gpurenderpipelinedescriptor-vertex①③\">vertex</a></code>, <var>state</var>).</p>"
        },
        {
          "html": "<p><strong>Assemble primitives</strong>. See <a href=\"https://gpuweb.github.io/gpuweb/#primitive-assembly\">§ 23.2.3 Primitive Assembly</a>.</p>\n      <p>Execute <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-assemble-primitives\" id=\"ref-for-abstract-opdef-assemble-primitives\" data-timeline=\"queue\">assemble primitives</a>(<var>vertexList</var>, <var>drawCall</var>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-primitive\" id=\"ref-for-dom-gpurenderpipelinedescriptor-primitive⑥\">primitive</a></code>).</p>"
        },
        {
          "html": "<p><strong>Clip primitives</strong>. See <a href=\"https://gpuweb.github.io/gpuweb/#primitive-clipping\">§ 23.2.4 Primitive Clipping</a>.</p>\n      <p>Let <var>primitiveList</var> be the result of this stage.</p>"
        },
        {
          "html": "<p><strong>Rasterize</strong>. See <a href=\"https://gpuweb.github.io/gpuweb/#rasterization\">§ 23.2.5 Rasterization</a>.</p>\n      <p>Let <var>rasterizationList</var> be the result of <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-rasterize\" id=\"ref-for-abstract-opdef-rasterize\" data-timeline=\"queue\">rasterize</a>(<var>primitiveList</var>, <var>state</var>).</p>"
        },
        {
          "html": "<p><strong>Process fragments</strong>. See <a href=\"https://gpuweb.github.io/gpuweb/#fragment-processing\">§ 23.2.6 Fragment Processing</a>.</p>\n      <p>Gather a list of <var>fragments</var>, resulting from executing <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-process-fragment\" id=\"ref-for-abstract-opdef-process-fragment\" data-timeline=\"queue\">process fragment</a>(<var>rasterPoint</var>, <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-fragment\" id=\"ref-for-dom-gpurenderpipelinedescriptor-fragment②②\">fragment</a></code>, <var>state</var>)\nfor each <var>rasterPoint</var> in <var>rasterizationList</var>.</p>"
        },
        {
          "html": "<p><strong>Process depth/stencil</strong>.</p>"
        },
        {
          "html": "<p><strong>Write pixels</strong>.</p>"
        }
      ]
    },
    {
      "name": "resolve indices",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-resolve-indices",
      "html": "<strong>Returns:</strong> list of integer indices.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>vertexIndexList</var> be an empty list of indices.</p>"
        },
        {
          "html": "If <var>drawCall</var> is an indexed draw call:",
          "rationale": "initialize",
          "steps": [
            {
              "html": "<p>Initialize the <var>vertexIndexList</var> with <var>drawCall</var>.indexCount integers.</p>"
            },
            {
              "html": "For <var>i</var> in range 0 .. <var>drawCall</var>.indexCount (non-inclusive):",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>relativeVertexIndex</var> be <a data-link-type=\"abstract-op\" href=\"https://gpuweb.github.io/gpuweb/#abstract-opdef-fetch-index\" id=\"ref-for-abstract-opdef-fetch-index\" data-timeline=\"queue\">fetch index</a>(<var>i</var> + <var>drawCall</var>.<code>firstIndex</code>, <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer-slot⑥\">[[index_buffer]]</a></code>).</p>"
                },
                {
                  "html": "<p>If <var>relativeVertexIndex</var> has the special value <code>\"out of bounds\"</code>,\nstop and return the empty list.</p>"
                },
                {
                  "html": "<p>Append <var>drawCall</var>.<code>baseVertex</code> + <var>relativeVertexIndex</var> to the <var>vertexIndexList</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "Otherwise:",
          "rationale": "initialize",
          "steps": [
            {
              "html": "<p>Initialize the <var>vertexIndexList</var> with <var>drawCall</var>.vertexCount integers.</p>"
            },
            {
              "html": "<p>Set each <var>vertexIndexList</var> item <var>i</var> to the value <var>drawCall</var>.firstVertex + <var>i</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>vertexIndexList</var>.</p>"
        }
      ]
    },
    {
      "name": "fetch index",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-fetch-index",
      "html": "<strong>Returns:</strong> unsigned integer or <code>\"out of bounds\"</code>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>indexSize</var> be defined by the <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_format-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_format-slot③\">[[index_format]]</a></code>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"uint16\"",
                  "steps": [
                    {
                      "html": "<p>2</p>"
                    }
                  ]
                },
                {
                  "case": "\"uint32\"",
                  "steps": [
                    {
                      "html": "<p>4</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>If <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer_offset-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer_offset-slot①\">[[index_buffer_offset]]</a></code> +\n|i + 1| × <var>indexSize</var> &gt; <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer_size-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer_size-slot②\">[[index_buffer_size]]</a></code>,\nreturn the special value <code>\"out of bounds\"</code>.</p>"
        },
        {
          "html": "<p>Interpret the data in <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer-slot⑦\">[[index_buffer]]</a></code>, starting at offset <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-index_buffer_offset-slot\" id=\"ref-for-dom-gpurendercommandsmixin-index_buffer_offset-slot②\">[[index_buffer_offset]]</a></code> + <var>i</var> × <var>indexSize</var>,\nof size <var>indexSize</var> bytes, as an unsigned integer and return it.</p>"
        }
      ]
    },
    {
      "name": "process vertices",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-process-vertices",
      "html": "Each vertex <var>vertexIndex</var> in the <var>vertexIndexList</var>,\n    in each instance of index <var>rawInstanceIndex</var>, is processed independently.\n    The <var>rawInstanceIndex</var> is in range from 0 to <var>drawCall</var>.instanceCount - 1, inclusive.\n    This processing happens in parallel, and any side effects, such as\n    writes into <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubufferbindingtype-storage\" id=\"ref-for-dom-gpubufferbindingtype-storage①⑤\">GPUBufferBindingType.\"storage\"</a></code> bindings,\n    may happen in any order.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>instanceIndex</var> be <var>rawInstanceIndex</var> + <var>drawCall</var>.firstInstance.</p>"
        },
        {
          "html": "For each non-<code>null</code> <var>vertexBufferLayout</var> in the list of <var>desc</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexstate-buffers\" id=\"ref-for-dom-gpuvertexstate-buffers①③\">buffers</a></code>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>i</var> be the index of the buffer layout in this list.</p>"
            },
            {
              "html": "<p>Let <var>vertexBuffer</var>, <var>vertexBufferOffset</var>, and <var>vertexBufferBindingSize</var> be the\nbuffer, offset, and size at slot <var>i</var> of <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurendercommandsmixin-vertex_buffers-slot\" id=\"ref-for-dom-gpurendercommandsmixin-vertex_buffers-slot⑤\">[[vertex_buffers]]</a></code>.</p>"
            },
            {
              "html": "Let <var>vertexElementIndex</var> be dependent on <var>vertexBufferLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexbufferlayout-stepmode\" id=\"ref-for-dom-gpuvertexbufferlayout-stepmode③\">stepMode</a></code>:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "\"vertex\"",
                      "steps": [
                        {
                          "html": "<p><var>vertexIndex</var></p>"
                        }
                      ]
                    },
                    {
                      "case": "\"instance\"",
                      "steps": [
                        {
                          "html": "<p><var>instanceIndex</var></p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "html": "For each <var>attributeDesc</var> in <var>vertexBufferLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexbufferlayout-attributes\" id=\"ref-for-dom-gpuvertexbufferlayout-attributes⑧\">attributes</a></code>:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>attributeOffset</var> be <var>vertexBufferOffset</var> + <var>vertexElementIndex</var> * <var>vertexBufferLayout</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexbufferlayout-arraystride\" id=\"ref-for-dom-gpuvertexbufferlayout-arraystride①①\">arrayStride</a></code> + <var>attributeDesc</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexattribute-offset\" id=\"ref-for-dom-gpuvertexattribute-offset⑦\">offset</a></code>.</p>"
                },
                {
                  "html": "<p>Load the attribute <var>data</var> of format <var>attributeDesc</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexattribute-format\" id=\"ref-for-dom-gpuvertexattribute-format⑧\">format</a></code> from <var>vertexBuffer</var> starting at offset <var>attributeOffset</var>.\nThe components are loaded in the order <code>x</code>, <code>y</code>, <code>z</code>, <code>w</code> from buffer memory.</p>\n          <p>If this results in an out-of-bounds access, the resulting value is determined\naccording to WGSL’s <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#invalid-memory-reference\" id=\"ref-for-invalid-memory-reference①\">invalid memory reference</a> behavior.</p>"
                },
                {
                  "html": "<p><strong>Optionally (implementation-defined):</strong> If <var>attributeOffset</var> + sizeof(<var>attributeDesc</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexattribute-format\" id=\"ref-for-dom-gpuvertexattribute-format⑨\">format</a></code>) &gt; <var>vertexBufferOffset</var> + <var>vertexBufferBindingSize</var>, <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-empty\" id=\"ref-for-list-empty②\">empty</a> <var>vertexIndexList</var> and stop, cancelling the draw call.</p>"
                },
                {
                  "html": "<p>Convert the <var>data</var> into a shader-visible format, according to <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#channel-formats\" id=\"ref-for-channel-formats\">channel formats</a> rules.</p>\n          <div class=\"example\" id=\"example-efaa9763\"><a class=\"self-link\" href=\"https://gpuweb.github.io/gpuweb/#example-efaa9763\"></a> An attribute of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexformat-snorm8x2\" id=\"ref-for-dom-gpuvertexformat-snorm8x2①\">\"snorm8x2\"</a></code> and byte values of <code>[0x70, 0xD0]</code> will be converted to <code>vec2&lt;f32&gt;(0.88, -0.38)</code> in WGSL. </div>"
                },
                {
                  "html": "<p>Adjust the <var>data</var> size to the shader type:</p>\n          <ul>\n           <li data-md=\"\">\n            <p>if both are scalar, or both are vectors of the same dimensionality, no adjustment is needed.</p>\n           </li><li data-md=\"\">\n            <p>if <var>data</var> is vector but the shader type is scalar, then only the first component is extracted.</p>\n           </li><li data-md=\"\">\n            <p>if both are vectors, and <var>data</var> has a higher dimension, the extra components are dropped.</p>\n            <div class=\"example\" id=\"example-b889e1a6\"><a class=\"self-link\" href=\"https://gpuweb.github.io/gpuweb/#example-b889e1a6\"></a> An attribute of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexformat-float32x3\" id=\"ref-for-dom-gpuvertexformat-float32x3①\">\"float32x3\"</a></code> and value <code>vec3&lt;f32&gt;(1.0, 2.0, 3.0)</code> will exposed to the shader as <code>vec2&lt;f32&gt;(1.0, 2.0)</code> if a 2-component vector is expected. </div>\n           </li><li data-md=\"\">\n            <p>if the shader type is a vector of higher dimensionality, or the <var>data</var> is a scalar,\nthen the missing components are filled from <code>vec4&lt;*&gt;(0, 0, 0, 1)</code> value.</p>\n            <div class=\"example\" id=\"example-ada0b71a\"><a class=\"self-link\" href=\"https://gpuweb.github.io/gpuweb/#example-ada0b71a\"></a> An attribute of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexformat-sint32\" id=\"ref-for-dom-gpuvertexformat-sint32①\">\"sint32\"</a></code> and value <code>5</code> will be exposed\n    to the shader as <code>vec4&lt;i32&gt;(5, 0, 0, 1)</code> if a 4-component vector is expected. </div>\n          </li></ul>"
                },
                {
                  "html": "<p>Bind the <var>data</var> to vertex shader input\nlocation <var>attributeDesc</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuvertexattribute-shaderlocation\" id=\"ref-for-dom-gpuvertexattribute-shaderlocation⑤\">shaderLocation</a></code>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "For each <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#gpubindgroup\" id=\"ref-for-gpubindgroup③⑤\">GPUBindGroup</a></code> group at <var>index</var> in <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindingcommandsmixin-bind_groups-slot\" id=\"ref-for-dom-gpubindingcommandsmixin-bind_groups-slot⑨\">[[bind_groups]]</a></code>:",
          "rationale": "for",
          "steps": [
            {
              "html": "For each resource <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#typedefdef-gpubindingresource\" id=\"ref-for-typedefdef-gpubindingresource③\">GPUBindingResource</a></code> in the bind group:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>entry</var> be the corresponding <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dictdef-gpubindgrouplayoutentry\" id=\"ref-for-dictdef-gpubindgrouplayoutentry④③\">GPUBindGroupLayoutEntry</a></code> for this resource.</p>"
                },
                {
                  "html": "<p>If <var>entry</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-visibility\" id=\"ref-for-dom-gpubindgrouplayoutentry-visibility①⓪\">visibility</a></code> includes <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpushaderstage-vertex\" id=\"ref-for-dom-gpushaderstage-vertex⑥\">VERTEX</a></code>:</p>\n          <ul>\n           <li data-md=\"\">\n            <p>Bind the resource to the shader under group <var>index</var> and binding <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpubindgrouplayoutentry-binding\" id=\"ref-for-dom-gpubindgrouplayoutentry-binding①②\">GPUBindGroupLayoutEntry.binding</a></code>.</p>\n          </li></ul>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Set the shader <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values\" id=\"ref-for-built-in-values④\">builtins</a>:</p>\n      <ul>\n       <li data-md=\"\">\n        <p>Set the <code>vertex_index</code> builtin, if any, to <var>vertexIndex</var>.</p>\n       </li><li data-md=\"\">\n        <p>Set the <code>instance_index</code> builtin, if any, to <var>instanceIndex</var>.</p>\n      </li></ul>"
        },
        {
          "html": "<p>Invoke the vertex shader entry point described by <var>desc</var>.</p>\n      \n      <p>The <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device\" id=\"ref-for-device②②\">device</a> may become <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#lose-the-device\" id=\"ref-for-lose-the-device⑨\" data-timeline=\"device\">lost</a> if <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-execution-end\" id=\"ref-for-shader-execution-end①\">shader execution does not end</a> in a reasonable amount of time, as determined by the user agent.</p>"
        }
      ]
    },
    {
      "name": "assemble primitives",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-assemble-primitives",
      "html": "For each instance, the primitives get assembled from the vertices that have been\n    processed by the shaders, based on the <var>vertexIndexList</var>.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>First, if the primitive topology is a strip, (which means that <var>desc</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-stripindexformat\" id=\"ref-for-dom-gpuprimitivestate-stripindexformat④\">stripIndexFormat</a></code> is not undefined)\nand the <var>drawCall</var> is indexed, the <var>vertexIndexList</var> is split into\nsub-lists using the maximum value of <var>desc</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-stripindexformat\" id=\"ref-for-dom-gpuprimitivestate-stripindexformat⑤\">stripIndexFormat</a></code> as a separator.</p>\n      <p>Example: a <var>vertexIndexList</var> with values <code>[1, 2, 65535, 4, 5, 6]</code> of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuindexformat-uint16\" id=\"ref-for-dom-gpuindexformat-uint16③\">\"uint16\"</a></code> will be split in sub-lists <code>[1, 2]</code> and <code>[4, 5, 6]</code>.</p>"
        },
        {
          "html": "For each of the sub-lists <var>vl</var>, primitive generation is done according to the <var>desc</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-topology\" id=\"ref-for-dom-gpuprimitivestate-topology④\">topology</a></code>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"line-list\"",
                  "steps": [
                    {
                      "html": "<p>Line primitives are composed from (<var>vl</var>.0, <var>vl</var>.1),\nthen (<var>vl</var>.2, <var>vl</var>.3), then (<var>vl</var>.4 to <var>vl</var>.5), etc.\nEach subsequent primitive takes 2 vertices.</p>"
                    }
                  ]
                },
                {
                  "case": "\"line-strip\"",
                  "steps": [
                    {
                      "html": "<p>Line primitives are composed from (<var>vl</var>.0, <var>vl</var>.1),\nthen (<var>vl</var>.1, <var>vl</var>.2), then (<var>vl</var>.2, <var>vl</var>.3), etc.\nEach subsequent primitive takes 1 vertex.</p>"
                    }
                  ]
                },
                {
                  "case": "\"triangle-list\"",
                  "steps": [
                    {
                      "html": "<p>Triangle primitives are composed from (<var>vl</var>.0, <var>vl</var>.1, <var>vl</var>.2),\nthen (<var>vl</var>.3, <var>vl</var>.4, <var>vl</var>.5), then (<var>vl</var>.6, <var>vl</var>.7, <var>vl</var>.8), etc.\nEach subsequent primitive takes 3 vertices.</p>"
                    }
                  ]
                },
                {
                  "case": "\"triangle-strip\"",
                  "steps": [
                    {
                      "html": "<p>Triangle primitives are composed from (<var>vl</var>.0, <var>vl</var>.1, <var>vl</var>.2),\nthen (<var>vl</var>.2, <var>vl</var>.1, <var>vl</var>.3), then (<var>vl</var>.2, <var>vl</var>.3, <var>vl</var>.4),\nthen (<var>vl</var>.4, <var>vl</var>.3, <var>vl</var>.5), etc.\nEach subsequent primitive takes 1 vertices.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "html": "For each vertex output value \"v\" with a corresponding fragment input, <var>a</var>.v and <var>b</var>.v would be the outputs for <var>a</var> and <var>b</var> vertices respectively.\nThe clipped shader output <var>c</var>.v is produced based on the interpolation qualifier:",
      "rationale": ".switch",
      "steps": [
        {
          "operation": "switch",
          "steps": [
            {
              "case": "flat",
              "steps": [
                {
                  "html": "<p>Flat interpolation is unaffected, and is based on the <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"provoking-vertex\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">provoking vertex</dfn>,\nwhich is determined by the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#interpolation-sampling\" id=\"ref-for-interpolation-sampling\">interpolation sampling</a> mode declared in the shader. The\noutput value is the same for the whole primitive, and matches the vertex output of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#provoking-vertex\" id=\"ref-for-provoking-vertex\">provoking vertex</a>.</p>"
                }
              ]
            },
            {
              "case": "linear",
              "steps": [
                {
                  "html": "<p>The interpolation ratio gets adjusted against the perspective coordinates of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#clip-position\" id=\"ref-for-clip-position③\">clip position</a>s, so that the result of interpolation is linear in screen space.</p>"
                }
              ]
            },
            {
              "case": "perspective",
              "steps": [
                {
                  "html": "<p>The value is linearly interpolated in clip space, producing perspective-correct values.</p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "rasterize",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-rasterize",
      "html": "Each primitive in <var>primitiveList</var> is processed independently.\n    However, the order of primitives affects later stages, such as depth/stencil operations and pixel writes.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>First, the clipped vertices are transformed into <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#ndc\" id=\"ref-for-ndc③\">NDC</a> - normalized device coordinates.\nGiven the output position <var>p</var>, the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#ndc\" id=\"ref-for-ndc④\">NDC</a> position and perspective divisor are:</p>\n      <p>ndc(<var>p</var>) = vector(<var>p</var>.x ÷ <var>p</var>.w, <var>p</var>.y ÷ <var>p</var>.w, <var>p</var>.z ÷ <var>p</var>.w)</p>\n      <p>divisor(<var>p</var>) = 1.0 ÷ <var>p</var>.w</p>"
        },
        {
          "html": "<p>Let <var>vp</var> be <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-viewport-slot\" id=\"ref-for-dom-renderstate-viewport-slot③\">[[viewport]]</a></code>.\nMap the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#ndc\" id=\"ref-for-ndc⑤\">NDC</a> position <var>n</var> into <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#viewport-coordinates\" id=\"ref-for-viewport-coordinates④\">viewport coordinates</a>:</p>\n      <ul>\n       <li data-md=\"\">\n        <p>Compute <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer\" id=\"ref-for-framebuffer②\">framebuffer</a> coordinates from the render target offset and size:</p>\n        <p>framebufferCoords(<var>n</var>) = vector(<var>vp</var>.<code>x</code> + 0.5 × (<var>n</var>.x + 1) × <var>vp</var>.<code>width</code>, <var>vp</var>.<code>y</code> + 0.5 × (−<var>n</var>.y + 1) × <var>vp</var>.<code>height</code>)</p>\n       </li><li data-md=\"\">\n        <p>Compute depth by linearly mapping [0,1] to the viewport depth range:</p>\n        <p>depth(<var>n</var>) = <var>vp</var>.<code>minDepth</code> + <var>n</var>.<code>z</code> × ( <var>vp</var>.<code>maxDepth</code> - <var>vp</var>.<code>minDepth</code> )</p>\n      </li></ul>"
        },
        {
          "html": "<p>Let <var>rasterizationPoints</var> be an empty list.</p>"
        },
        {
          "html": "Proceed with a specific rasterization algorithm,\ndepending on <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-primitive\" id=\"ref-for-dom-gpurenderpipelinedescriptor-primitive⑨\">primitive</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-topology\" id=\"ref-for-dom-gpuprimitivestate-topology⑥\">topology</a></code>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"point-list\"",
                  "steps": [
                    {
                      "html": "<p>The point, if not filtered by <a href=\"https://gpuweb.github.io/gpuweb/#primitive-clipping\">§ 23.2.4 Primitive Clipping</a>, goes into <a href=\"https://gpuweb.github.io/gpuweb/#point-rasterization\">§ 23.2.5.1 Point Rasterization</a>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"line-list\" or \"line-strip\"",
                  "steps": [
                    {
                      "html": "<p>The line cut by <a href=\"https://gpuweb.github.io/gpuweb/#primitive-clipping\">§ 23.2.4 Primitive Clipping</a> goes into <a href=\"https://gpuweb.github.io/gpuweb/#line-rasterization\">§ 23.2.5.2 Line Rasterization</a>.</p>"
                    }
                  ]
                },
                {
                  "case": "\"triangle-list\" or \"triangle-strip\"",
                  "steps": [
                    {
                      "html": "<p>The polygon produced in <a href=\"https://gpuweb.github.io/gpuweb/#primitive-clipping\">§ 23.2.4 Primitive Clipping</a> goes into <a href=\"https://gpuweb.github.io/gpuweb/#polygon-rasterization\">§ 23.2.5.4 Polygon Rasterization</a>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Remove all the points <var>rp</var> from <var>rasterizationPoints</var> that have <var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-destination\" id=\"ref-for-rasterizationpoint-destination\">destination</a>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragmentdestination-position\" id=\"ref-for-fragmentdestination-position\">position</a> outside of <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-scissorrect-slot\" id=\"ref-for-dom-renderstate-scissorrect-slot①\">[[scissorRect]]</a></code>.</p>"
        },
        {
          "html": "<p>Return <var>rasterizationPoints</var>.</p>"
        }
      ]
    },
    {
      "html": "The coverage mask depends on multi-sampling mode:",
      "rationale": ".switch",
      "steps": [
        {
          "operation": "switch",
          "steps": [
            {
              "case": "sample-frequency",
              "steps": [
                {
                  "html": "<p>coverageMask = 1 ≪ <code>sampleIndex</code></p>"
                }
              ]
            },
            {
              "case": "pixel-frequency multi-sampling",
              "steps": [
                {
                  "html": "<p>coverageMask = 1 ≪ <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-multisample\" id=\"ref-for-dom-gpurenderpipelinedescriptor-multisample⑧\">multisample</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumultisamplestate-count\" id=\"ref-for-dom-gpumultisamplestate-count⑦\">count</a></code> − 1</p>"
                }
              ]
            },
            {
              "case": "no multi-sampling",
              "steps": [
                {
                  "html": "<p>coverageMask = 1</p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "rasterize polygon",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-rasterize-polygon",
      "html": "<strong>Returns:</strong> list of <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint\" id=\"ref-for-rasterizationpoint①\">RasterizationPoint</a>.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>rasterizationPoints</var> be an empty list.</p>"
        },
        {
          "html": "<p>Let <var>v</var>(<var>i</var>) be the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer\" id=\"ref-for-framebuffer⑤\">framebuffer</a> coordinates for the clipped vertex number <var>i</var> (starting with 1)\nin a rasterized polygon of <var>n</var> vertices.</p>"
        },
        {
          "html": "The sign of <var>area</var> is interpreted based on the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-primitive\" id=\"ref-for-dom-gpurenderpipelinedescriptor-primitive①⓪\">primitive</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-frontface\" id=\"ref-for-dom-gpuprimitivestate-frontface①\">frontFace</a></code>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"ccw\"",
                  "steps": [
                    {
                      "html": "<p><var>area</var> &gt; 0 is considered <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#front-facing\" id=\"ref-for-front-facing⑤\">front-facing</a>, otherwise <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#back-facing\" id=\"ref-for-back-facing①\">back-facing</a></p>"
                    }
                  ]
                },
                {
                  "case": "\"cw\"",
                  "steps": [
                    {
                      "html": "<p><var>area</var> &lt; 0 is considered <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#front-facing\" id=\"ref-for-front-facing⑥\">front-facing</a>, otherwise <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#back-facing\" id=\"ref-for-back-facing②\">back-facing</a></p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "Cull based on <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-primitive\" id=\"ref-for-dom-gpurenderpipelinedescriptor-primitive①①\">primitive</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpuprimitivestate-cullmode\" id=\"ref-for-dom-gpuprimitivestate-cullmode②\">cullMode</a></code>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "\"none\"",
                  "steps": [
                    {
                      "html": "<p>All polygons pass this test.</p>"
                    }
                  ]
                },
                {
                  "case": "\"front\"",
                  "steps": [
                    {
                      "html": "<p>The <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#front-facing\" id=\"ref-for-front-facing⑦\">front-facing</a> polygons are discarded,\nand do not process in later stages of the render pipeline.</p>"
                    }
                  ]
                },
                {
                  "case": "\"back\"",
                  "steps": [
                    {
                      "html": "<p>The <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#back-facing\" id=\"ref-for-back-facing③\">back-facing</a> polygons are discarded.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "Determine a set of <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment\" id=\"ref-for-fragment\">fragments</a> inside the polygon in <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer\" id=\"ref-for-framebuffer⑦\">framebuffer</a> space -\nthese are locations scheduled for the per-fragment operations.\nThis operation is known as \"point sampling\".\nThe logic is based on <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-multisample\" id=\"ref-for-dom-gpurenderpipelinedescriptor-multisample⑨\">multisample</a></code>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "disabled",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment\" id=\"ref-for-fragment①\">Fragment</a>s are associated with pixel centers. That is, all the points with coordinates <var>C</var>, where\nfract(<var>C</var>) = vector2(0.5, 0.5) in the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer\" id=\"ref-for-framebuffer⑧\">framebuffer</a> space, enclosed into the polygon, are included.\nIf a pixel center is on the edge of the polygon, whether or not it’s included is not defined.</p>"
                    }
                  ]
                },
                {
                  "case": "enabled",
                  "steps": [
                    {
                      "html": "<p>Each pixel is associated with <var>descriptor</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpurenderpipelinedescriptor-multisample\" id=\"ref-for-dom-gpurenderpipelinedescriptor-multisample①⓪\">multisample</a></code>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-gpumultisamplestate-count\" id=\"ref-for-dom-gpumultisamplestate-count⑧\">count</a></code> locations, which are implementation-defined.\nThe locations are ordered, and the list is the same for each pixel of the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer\" id=\"ref-for-framebuffer⑨\">framebuffer</a>.\nEach location corresponds to one fragment in the multisampled <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#framebuffer\" id=\"ref-for-framebuffer①⓪\">framebuffer</a>.</p>\n        <p>The rasterizer builds a mask of locations being hit inside each pixel and provides is as \"sample-mask\"\nbuilt-in to the fragment shader.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "For each produced fragment of type <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragmentdestination\" id=\"ref-for-fragmentdestination②\">FragmentDestination</a>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>rp</var> be a new <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint\" id=\"ref-for-rasterizationpoint②\">RasterizationPoint</a> object</p>"
            },
            {
              "html": "<p>Compute the list <var>b</var> as <a href=\"https://gpuweb.github.io/gpuweb/#barycentric-coordinates\">§ 23.2.5.3 Barycentric coordinates</a> of that fragment.\nSet <var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-barycentriccoordinates\" id=\"ref-for-rasterizationpoint-barycentriccoordinates\">barycentricCoordinates</a> to <var>b</var>.</p>"
            },
            {
              "html": "<p>Let <var>d</var><sub><var>i</var></sub> be the depth value of <var>v</var><sub><var>i</var></sub>.</p>"
            },
            {
              "html": "<p>Set <var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-depth\" id=\"ref-for-rasterizationpoint-depth\">depth</a> to ∑ (<var>b</var><sub><var>i</var></sub> × <var>d</var><sub><var>i</var></sub>)</p>"
            },
            {
              "html": "<p>Append <var>rp</var> to <var>rasterizationPoints</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>rasterizationPoints</var>.</p>"
        }
      ]
    },
    {
      "name": "process fragment",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-process-fragment",
      "html": "<strong>Returns:</strong> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment\" id=\"ref-for-fragment②\">Fragment</a> or <code>null</code>.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>fragment</var> be a new <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment\" id=\"ref-for-fragment③\">Fragment</a> object.</p>"
        },
        {
          "html": "<p>Set <var>fragment</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment-destination\" id=\"ref-for-fragment-destination\">destination</a> to <var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-destination\" id=\"ref-for-rasterizationpoint-destination①\">destination</a>.</p>"
        },
        {
          "html": "<p>Set <var>fragment</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment-coveragemask\" id=\"ref-for-fragment-coveragemask\">coverageMask</a> to <var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-coveragemask\" id=\"ref-for-rasterizationpoint-coveragemask\">coverageMask</a>.</p>"
        },
        {
          "html": "<p>Set <var>fragment</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment-depth\" id=\"ref-for-fragment-depth\">depth</a> to <var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-depth\" id=\"ref-for-rasterizationpoint-depth①\">depth</a>.</p>"
        },
        {
          "html": "If <var>desc</var> is not <code>null</code>:",
          "rationale": "set",
          "steps": [
            {
              "html": "Set the shader input <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values\" id=\"ref-for-built-in-values⑤\">builtins</a>. For each non-composite argument of the entry point,\nannotated as a <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values\" id=\"ref-for-built-in-values⑥\">builtin</a>, set its value based on the annotation:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "position",
                      "steps": [
                        {
                          "html": "<p><code>vec4&lt;f32&gt;</code>(<var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-destination\" id=\"ref-for-rasterizationpoint-destination②\">destination</a>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragmentdestination-position\" id=\"ref-for-fragmentdestination-position①\">position</a>, <var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-depth\" id=\"ref-for-rasterizationpoint-depth②\">depth</a>, <var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-perspectivedivisor\" id=\"ref-for-rasterizationpoint-perspectivedivisor\">perspectiveDivisor</a>)</p>"
                        }
                      ]
                    },
                    {
                      "case": "front_facing",
                      "steps": [
                        {
                          "html": "<p><var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-frontfacing\" id=\"ref-for-rasterizationpoint-frontfacing\">frontFacing</a></p>"
                        }
                      ]
                    },
                    {
                      "case": "sample_index",
                      "steps": [
                        {
                          "html": "<p><var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-destination\" id=\"ref-for-rasterizationpoint-destination③\">destination</a>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragmentdestination-sampleindex\" id=\"ref-for-fragmentdestination-sampleindex\">sampleIndex</a></p>"
                        }
                      ]
                    },
                    {
                      "case": "sample_mask",
                      "steps": [
                        {
                          "html": "<p><var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-coveragemask\" id=\"ref-for-rasterizationpoint-coveragemask①\">coverageMask</a></p>"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "html": "For each user-specified <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-stage-input\" id=\"ref-for-shader-stage-input\">shader stage input</a> of the fragment stage:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>value</var> be the interpolated fragment input,\nbased on <var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-barycentriccoordinates\" id=\"ref-for-rasterizationpoint-barycentriccoordinates①\">barycentricCoordinates</a>, <var>rp</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#rasterizationpoint-primitivevertices\" id=\"ref-for-rasterizationpoint-primitivevertices\">primitiveVertices</a>,\nand the <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#interpolation\" id=\"ref-for-interpolation①\">interpolation</a> qualifier on the input.</p>"
                },
                {
                  "html": "<p>Set the corresponding fragment shader <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#input-output-locations\" id=\"ref-for-input-output-locations⑨\">location</a> input to <var>value</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Invoke the fragment shader entry point described by <var>desc</var>.</p>\n        <p>The <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#device\" id=\"ref-for-device②③\">device</a> may become <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#lose-the-device\" id=\"ref-for-lose-the-device①⓪\" data-timeline=\"device\">lost</a> if <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-execution-end\" id=\"ref-for-shader-execution-end②\">shader execution does not end</a> in a reasonable amount of time, as determined by the user agent.</p>"
            },
            {
              "html": "<p>If the fragment issued <code>discard</code>, return <code>null</code>.</p>"
            },
            {
              "html": "<p>Set <var>fragment</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment-colors\" id=\"ref-for-fragment-colors\">colors</a> to the user-specified <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#shader-stage-output\" id=\"ref-for-shader-stage-output⑥\">shader stage output</a> values from the shader.</p>"
            },
            {
              "html": "Take the shader output <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values\" id=\"ref-for-built-in-values⑦\">builtins</a>:",
              "rationale": "if",
              "steps": [
                {
                  "html": "If <code>frag_depth</code> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values\" id=\"ref-for-built-in-values⑧\">builtin</a> is produced by the shader as <var>value</var>:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>vp</var> be <var>state</var>.<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://gpuweb.github.io/gpuweb/#dom-renderstate-viewport-slot\" id=\"ref-for-dom-renderstate-viewport-slot⑤\">[[viewport]]</a></code>.</p>"
                    },
                    {
                      "html": "<p>Set <var>fragment</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment-depth\" id=\"ref-for-fragment-depth①\">depth</a> to clamp(<var>value</var>, <var>vp</var>.<code>minDepth</code>, <var>vp</var>.<code>maxDepth</code>).</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "If <code>sample_mask</code> <a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/wgsl/#built-in-values\" id=\"ref-for-built-in-values⑨\">builtin</a> is produced by the shader as <var>value</var>:",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>fragment</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment-coveragemask\" id=\"ref-for-fragment-coveragemask①\">coverageMask</a> to <var>fragment</var>.<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#fragment-coveragemask\" id=\"ref-for-fragment-coveragemask②\">coverageMask</a> ∧ <var>value</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>fragment</var>.</p>"
        }
      ]
    },
    {
      "name": "validate GPUColor shape",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpucolor-shape",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②⑥\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror①③\">TypeError</a></code> if <var>color</var> is a sequence and <var>color</var>.length ≠ 4.</p>"
        }
      ]
    },
    {
      "name": "validate GPUOrigin2D shape",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuorigin2d-shape",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②⑦\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror①④\">TypeError</a></code> if <var>origin</var> is a sequence and <var>origin</var>.length &gt; 2.</p>"
        }
      ]
    },
    {
      "name": "validate GPUOrigin3D shape",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuorigin3d-shape",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②⑧\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror①⑤\">TypeError</a></code> if <var>origin</var> is a sequence and <var>origin</var>.length &gt; 3.</p>"
        }
      ]
    },
    {
      "name": "validate GPUExtent3D shape",
      "href": "https://gpuweb.github.io/gpuweb/#abstract-opdef-validate-gpuextent3d-shape",
      "html": "<a data-link-type=\"dfn\" href=\"https://gpuweb.github.io/gpuweb/#content-timeline\" id=\"ref-for-content-timeline①②⑨\">Content timeline</a> steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-typeerror\" id=\"ref-for-exceptiondef-typeerror①⑥\">TypeError</a></code> if:</p>"
        }
      ]
    }
  ]
}